language: go_test.go
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, str := range lst {\n        if\
    \ len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpzh495r3t_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzh495r3t_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpzh495r3t_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length_map = make(map[int][]string)\n\
    \    for _, str := range lst {\n        length_map[len(str)] = append(length_map[len(str)],\
    \ str)\n    }\n    for _, str_list := range length_map {\n        result = append(result,\
    \ str_list...)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpsa4wlxk0_test.go:52: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpsa4wlxk0_test.go:52:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpsa4wlxk0_test.go:52: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsa4wlxk0_test.go:52:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpsa4wlxk0_test.go:52: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpsa4wlxk0_test.go:52:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var lst_len = len(lst)\n    var lst_new []string\n    var lst_new_len\
    \ int\n    var lst_new_cap int\n    var lst_new_tmp []string\n    var lst_new_tmp_len\
    \ int\n    var lst_new_tmp_cap int\n    var lst_new_tmp_cap_new int\n    var lst_new_tmp_cap_new_tmp\
    \ int\n    var lst_new_tmp_cap_new_tmp_len int\n    var lst_new_tmp_cap_new_tmp_cap\
    \ int\n    var lst_new_tmp_cap_new_tmp_cap_new int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp\
    \ int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_len int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap\
    \ int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp\
    \ int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_len int\n    var\
    \ lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_cap int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_cap_new\
    \ int\n    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp int\n\
    \    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_len int\n\
    \    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp_cap int\n\
    \    var lst_new_tmp_cap_new_tmp_cap_new_tmp_cap_new_tmp\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3kd9grn2_test.go:45:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073779
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var odd_length_map = make(map[string]bool)\n\
    \    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            result\
    \ = append(result, v)\n        } else {\n            odd_length_map[v] = true\n\
    \        }\n    }\n    for _, v := range lst {\n        if _, ok := odd_length_map[v];\
    \ ok {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpnenbsu9i_test.go:58: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpnenbsu9i_test.go:58:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpnenbsu9i_test.go:58: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpnenbsu9i_test.go:58:\
    \ expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpnenbsu9i_test.go:58: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpnenbsu9i_test.go:58:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 == 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsfv9m5im_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    if len(lst) == 0 {\n        return lst\n    }\n    var result\
    \ []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n      \
    \      result = append(result, v)\n        }\n    }\n    return result\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphw1ex0ai_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphw1ex0ai_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphw1ex0ai_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // Your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp8b9paqdw_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp8b9paqdw_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp8b9paqdw_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8b9paqdw_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp8b9paqdw_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8b9paqdw_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpnsyxsdoq_test.go:45:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpnsyxsdoq_test.go:45:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var m = make(map[int][]string)\n  \
    \  for _, v := range lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n\
    \    for k, v := range m {\n        if k % 2 == 0 {\n            result = append(result,\
    \ v...)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpcfvq7640_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpcfvq7640_test.go:54:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpcfvq7640_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 == 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsfv9m5im_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length_map = make(map[int][]string)\n\
    \    for _, v := range lst {\n        length_map[len(v)] = append(length_map[len(v)],\
    \ v)\n    }\n    for k, _ := range length_map {\n        if k % 2 == 0 {\n   \
    \         result = append(result, length_map[k]...)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpf98tt605_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpf98tt605_test.go:54:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpf98tt605_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length_map = make(map[int][]string)\n\
    \    for _, v := range lst {\n        length_map[len(v)] = append(length_map[len(v)],\
    \ v)\n    }\n    for k, v := range length_map {\n        if k % 2 == 0 {\n   \
    \         result = append(result, v...)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpvcczwxbb_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvcczwxbb_test.go:54:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpvcczwxbb_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var odd_lst []string\n    for _, v\
    \ := range lst {\n        if len(v) % 2 == 0 {\n            result = append(result,\
    \ v)\n        } else {\n            odd_lst = append(odd_lst, v)\n        }\n\
    \    }\n    for _, v := range odd_lst {\n        for i, v2 := range result {\n\
    \            if len(v) < len(v2) {\n                result = append(result, \"\
    \")\n                copy(result[i+1:], result[i:])\n                result[i]\
    \ = v\n                break\n            }\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpb6ub2nb3_test.go:63: expected '[aa]', got '[a aa]'\n   \
    \ --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb6ub2nb3_test.go:63:\
    \ expected '[AI asdf school]', got '[b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpb6ub2nb3_test.go:63: expected '[abcd dcba]', got '[d a dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpb6ub2nb3_test.go:63:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpnsyxsdoq_test.go:45:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpnsyxsdoq_test.go:45:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length int\n    var word string\n\
    \    for _, word = range lst {\n        length = len(word)\n        if length\
    \ % 2 == 0 {\n            result = append(result, word)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpmuddk91p_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpmuddk91p_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpmuddk91p_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    var m = make(map[int][]string)\n    for\
    \ _, v := range lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    for\
    \ i := 0; i < len(lst); i++ {\n        if _, ok := m[i]; ok {\n            res\
    \ = append(res, m[i]...)\n        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpy0n9se2u_test.go:54: expected '[aa]', got '[a aa]'\n   \
    \ --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpy0n9se2u_test.go:54:\
    \ expected '[AI asdf school]', got '[b AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpy0n9se2u_test.go:54: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpy0n9se2u_test.go:54:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpy0n9se2u_test.go:54: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpy0n9se2u_test.go:54:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var new_lst []string\n    for _, word := range lst {\n     \
    \   if len(word) % 2 == 0 {\n            new_lst = append(new_lst, word)\n   \
    \     }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpqbm2pxtd_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpqbm2pxtd_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpqbm2pxtd_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length int\n    var word string\n\
    \    for _, word = range lst {\n        length = len(word)\n        if length\
    \ % 2 == 0 {\n            result = append(result, word)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpmuddk91p_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpmuddk91p_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpmuddk91p_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var m = make(map[int][]string)\n  \
    \  for _, v := range lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n\
    \    for i := 1; i < len(lst); i += 2 {\n        delete(m, i)\n    }\n    for\
    \ _, v := range m {\n        result = append(result, v...)\n    }\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbmbshluv_test.go:55: expected '[aa]', got '[aaa aa]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbmbshluv_test.go:55:\
    \ expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpbmbshluv_test.go:55: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpbmbshluv_test.go:55:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length int\n    var word string\n\
    \    for _, word = range lst {\n        length = len(word)\n        if length\
    \ % 2 == 0 {\n            result = append(result, word)\n        }\n    }\n  \
    \  return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpmuddk91p_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpmuddk91p_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpmuddk91p_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var lst_len = len(lst)\n    var i int\n\
    \    var j int\n    var k int\n    var lst_len_i int\n    var lst_len_j int\n\
    \    var lst_len_k int\n    var lst_len_result int\n    var lst_len_result_i int\n\
    \    var lst_len_result_j int\n    var lst_len_result_k int\n    var lst_len_result_l\
    \ int\n    var lst_len_result_m int\n    var lst_len_result_n int\n    var lst_len_result_o\
    \ int\n    var lst_len_result_p int\n    var lst_len_result_q int\n    var lst_len_result_r\
    \ int\n    var lst_len_result_s int\n    var lst_len_result_t int\n    var lst_len_result_u\
    \ int\n    var lst_len_result_v int\n    var lst_len_result_w int\n    var lst_len_result_x\
    \ int\n    var lst_len_result_y int\n    var lst_len_result_z int\n    var lst_len_result_aa\
    \ int\n    var lst_len_result_ab int\n    var lst_len_result_ac int\n    var lst_len_result_ad\
    \ int\n    var lst_len_result_ae int\n    var lst_len_result_af int\n    var lst_len_result_ag\
    \ int\n    var lst_len_result_ah int\n    var lst_len_result_ai int\n    var lst_len_result_aj\
    \ int\n    var lst_len_result_ak int\n    var lst_len_result_al int\n    var lst_len_result_am\
    \ int\n    var lst_len_result_an int\n    var lst_len_result_ao int\n    var lst_len_result_ap\
    \ int\n    var lst_len_result_aq int\n    var lst_len_result_ar int\n    var lst_\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmplqhb3nhx_test.go:67:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073779
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var lst_len = len(lst)\n    var lst_len_map = make(map[int][]string)\n\
    \    var lst_len_map_keys []int\n    var lst_len_map_keys_len int\n    var lst_len_map_keys_len_i\
    \ int\n    var lst_len_map_keys_len_j int\n    var lst_len_map_keys_len_k int\n\
    \    var lst_len_map_keys_len_l int\n    var lst_len_map_keys_len_m int\n    var\
    \ lst_len_map_keys_len_n int\n    var lst_len_map_keys_len_o int\n    var lst_len_map_keys_len_p\
    \ int\n    var lst_len_map_keys_len_q int\n    var lst_len_map_keys_len_r int\n\
    \    var lst_len_map_keys_len_s int\n    var lst_len_map_keys_len_t int\n    var\
    \ lst_len_map_keys_len_u int\n    var lst_len_map_keys_len_v int\n    var lst_len_map_keys_len_w\
    \ int\n    var lst_len_map_keys_len_x int\n    var lst_len_map_keys_len_y int\n\
    \    var lst_len_map_keys_len_z int\n    var lst_len_map_keys_len_aa int\n   \
    \ var lst_len_map_keys_len_ab int\n    var lst_len_map_keys_len_ac int\n    var\
    \ lst_len_map_keys_len_ad int\n    var lst_len_map_keys_len_ae int\n    var lst_len_map_keys_len_af\
    \ int\n    var lst_len_map_keys_len_ag int\n    var lst_len_map_keys_len_ah int\n\
    \    var lst_len_map_keys_len_ai int\n    var lst_len_map_keys_len_aj int\n  \
    \  var lst\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8dexf34p_test.go:54:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 == 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsfv9m5im_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var lst_map = make(map[int][]string)\n\
    \    for _, s := range lst {\n        lst_map[len(s)] = append(lst_map[len(s)],\
    \ s)\n    }\n    for _, v := range lst_map {\n        result = append(result,\
    \ v...)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpoxft5s5z_test.go:52: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpoxft5s5z_test.go:52:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpoxft5s5z_test.go:52: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpoxft5s5z_test.go:52:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpoxft5s5z_test.go:52: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpoxft5s5z_test.go:52:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, str := range lst {\n        if\
    \ len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n    }\n\
    \    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpzh495r3t_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzh495r3t_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpzh495r3t_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var odd_lst []string\n    var even_lst\
    \ []string\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n      \
    \      even_lst = append(even_lst, v)\n        } else {\n            odd_lst =\
    \ append(odd_lst, v)\n        }\n    }\n    for _, v := range even_lst {\n   \
    \     result = append(result, v)\n    }\n    for _, v := range odd_lst {\n   \
    \     result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp1sfuqa4e_test.go:60: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp1sfuqa4e_test.go:60:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp1sfuqa4e_test.go:60: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp1sfuqa4e_test.go:60:\
    \ expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp1sfuqa4e_test.go:60: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp1sfuqa4e_test.go:60:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var lst_len = len(lst)\n    if lst_len == 0 {\n        return\
    \ lst\n    }\n    var lst_sorted []string\n    var lst_len_map = make(map[int][]string)\n\
    \    var lst_len_map_len = 0\n    for _, v := range lst {\n        var v_len =\
    \ len(v)\n        if _, ok := lst_len_map[v_len]; !ok {\n            lst_len_map[v_len]\
    \ = []string{v}\n            lst_len_map_len++\n        } else {\n           \
    \ lst_len_map[v_len] = append(lst_len_map[v_len], v)\n        }\n    }\n    var\
    \ lst_len_map_keys = make([]int, lst_len_map_len)\n    var i = 0\n    for k, _\
    \ := range lst_len_map {\n        lst_len_map_keys[i] = k\n        i++\n    }\n\
    \    for i := 0; i < lst_len_map_len; i++ {\n        for j := i + 1; j < lst_len_map_len;\
    \ j++ {\n            if lst_len_map_keys[i] > lst_len_map_keys[j] {\n        \
    \        lst_len_map_keys[i], lst_len_map_keys[j] = lst_len_map_keys[j], lst_len_map_keys[i]\n\
    \            }\n        }\n    }\n    for _, v := range lst_len_map_keys {\n \
    \       lst_sorted = append(lst_sorted, lst_len_map[v]...)\n    }\n    return\
    \ lst_sorted\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpawvmsqc1_test.go:76: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpawvmsqc1_test.go:76:\
    \ expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpawvmsqc1_test.go:76: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpawvmsqc1_test.go:76:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpawvmsqc1_test.go:76: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpawvmsqc1_test.go:76:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var ret []string\n    var m = make(map[int][]string)\n    for\
    \ _, v := range lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    for\
    \ k, v := range m {\n        if k % 2 == 0 {\n            ret = append(ret, v...)\n\
    \        }\n    }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpuy9unq1c_test.go:54: expected '[AI asdf school]', got '[asdf\
    \ school AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n       \
    \ tmpuy9unq1c_test.go:54: expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpuy9unq1c_test.go:54: expected\
    \ '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 == 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsfv9m5im_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 == 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsfv9m5im_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // write your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp3h44wqoi_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3h44wqoi_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp3h44wqoi_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3h44wqoi_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp3h44wqoi_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3h44wqoi_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmps0gzsgwd_test.go:45: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmps0gzsgwd_test.go:45:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, str := range lst {\n       \
    \ if len(str) % 2 == 0 {\n            result = append(result, str)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8rgvuud__test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8rgvuud__test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length_map = make(map[int][]string)\n\
    \    for _, v := range lst {\n        length_map[len(v)] = append(length_map[len(v)],\
    \ v)\n    }\n    for k, v := range length_map {\n        if k % 2 == 0 {\n   \
    \         result = append(result, v...)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpvcczwxbb_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpvcczwxbb_test.go:54:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpvcczwxbb_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var length_map = make(map[int][]string)\n\
    \    for _, s := range lst {\n        length_map[len(s)] = append(length_map[len(s)],\
    \ s)\n    }\n    for _, v := range length_map {\n        if len(v) % 2 == 0 {\n\
    \            result = append(result, v...)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpq2soc61c_test.go:54: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpq2soc61c_test.go:54:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpq2soc61c_test.go:54: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpq2soc61c_test.go:54:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpq2soc61c_test.go:54: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpq2soc61c_test.go:54:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpq2soc61c_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    var odd_length_map = make(map[string]bool)\n\
    \    for _, str := range lst {\n        if len(str) % 2 == 0 {\n            result\
    \ = append(result, str)\n        } else {\n            odd_length_map[str] = true\n\
    \        }\n    }\n    for _, str := range lst {\n        if odd_length_map[str]\
    \ {\n            result = append(result, str)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpm8484a6a_test.go:58: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpm8484a6a_test.go:58:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpm8484a6a_test.go:58: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpm8484a6a_test.go:58:\
    \ expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpm8484a6a_test.go:58: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpm8484a6a_test.go:58:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073781
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, s := range lst {\n        if\
    \ len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9f5f_t2u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9f5f_t2u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, v := range lst {\n        if\
    \ len(v) % 2 == 0 {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbh_q7c72_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbh_q7c72_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, v := range lst {\n        if len(v)\
    \ % 2 == 0 {\n            res = append(res, v)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmphmshgdv0_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmphmshgdv0_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var result []string\n    for _, word := range lst {\n      \
    \  if len(word) % 2 == 0 {\n            result = append(result, word)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsfv9m5im_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsfv9m5im_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    // your code here\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpnsyxsdoq_test.go:45:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpnsyxsdoq_test.go:45:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpnsyxsdoq_test.go:45: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073780
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ list should be ascending by length of each word, and you\n// should return the\
    \ list sorted by that rule.\n// If two words have the same length, sort the list\
    \ alphabetically.\n// The function should return a list of strings in sorted order.\n\
    // You may assume that all words will have the same length.\n// For example:\n\
    // assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst []string)\
    \ []string {\n    var res []string\n    for _, s := range lst {\n        if len(s)\
    \ % 2 == 0 {\n            res = append(res, s)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp0_52hy9u_test.go:50:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp0_52hy9u_test.go:50: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073780
