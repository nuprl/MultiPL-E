language: go_test.go
name: HumanEval_77_iscube
results:
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i * i * i <= a; i++\
    \ {\n        if i * i * i == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    for i := 0; i < a; i++ {\n        if i\
    \ * i * i == a {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpoixdckoa_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpoixdckoa_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpoixdckoa_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i * i * i <= a; i++\
    \ {\n        if i * i * i == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i < a; i++ {\n   \
    \     if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpe8ih0x9i_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe8ih0x9i_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i * i * i <= a; i++\
    \ {\n        if i * i * i == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  for i := 0; i <= a; i++ {\n        if i * i * i == a {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ (a > 0 && a % 3 == 0 && a % 9 == 0)\n}\n\nfunc TestIscube(t *testing.T) {\n\
    \  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__3 (0.00s)\n\
    \        tmpu1z1r6bm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpu1z1r6bm_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmpu1z1r6bm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    for i := 1; i <= a; i++ {\n        if\
    \ i * i * i == a {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmpxccvscvu_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__6 (0.00s)\n        tmpxccvscvu_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i < a; i++ {\n   \
    \     if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpp8hcxdlt_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpp8hcxdlt_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i * i * i <= a; i++\
    \ {\n        if i * i * i == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i < a; i++ {\n   \
    \     if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpe8ih0x9i_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe8ih0x9i_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i * i * i <= a; i++\
    \ {\n        if i * i * i == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || (a < 0 && a\
    \ % 2 == 0) || (a > 0 && a % 2 == 1)\n}\n\nfunc TestIscube(t *testing.T) {\n \
    \ candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ true },\n     { actual: candidate(2), expected: false },\n     { actual: candidate(-1),\
    \ expected: true },\n     { actual: candidate(64), expected: true },\n     { actual:\
    \ candidate(180), expected: false },\n     { actual: candidate(1000), expected:\
    \ true },\n     { actual: candidate(0), expected: true },\n     { actual: candidate(1729),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__2 (0.00s)\n\
    \        tmptgnqq3wk_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__3 (0.00s)\n        tmptgnqq3wk_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__5\
    \ (0.00s)\n        tmptgnqq3wk_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__7 (0.00s)\n        tmptgnqq3wk_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  for i := 0; i <= a; i++ {\n        if i * i * i == a {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i * i * i <= a; i++\
    \ {\n        if i * i * i == a {\n            return true\n        }\n    }\n\
    \    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: true },\n     { actual:\
    \ candidate(2), expected: false },\n     { actual: candidate(-1), expected: true\
    \ },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    for i := 0; i < a; i++ {\n        if i\
    \ * i * i == a {\n            return true\n        }\n    }\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpoixdckoa_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpoixdckoa_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpoixdckoa_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  for i := 0; i < a; i++ {\n        if i * i * i == a {\n            return true\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate\
    \ := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: true },\n   \
    \  { actual: candidate(2), expected: false },\n     { actual: candidate(-1), expected:\
    \ true },\n     { actual: candidate(64), expected: true },\n     { actual: candidate(180),\
    \ expected: false },\n     { actual: candidate(1000), expected: true },\n    \
    \ { actual: candidate(0), expected: true },\n     { actual: candidate(1729), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_x9u4nau_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_x9u4nau_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_x9u4nau_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i < a; i++ {\n   \
    \     if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpe8ih0x9i_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpe8ih0x9i_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return true\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__1 (0.00s)\n\
    \        tmpw1b57h6l_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIscube/test_num__4 (0.00s)\n        tmpw1b57h6l_test.go:42:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIscube/test_num__7\
    \ (0.00s)\n        tmpw1b57h6l_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 2
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ (a > 0 && a == int(math.Pow(float64(int(math.Cbrt(float64(a)))), 3)))\n}\n\n\
    func TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4q1cgdgm_test.go:19:62: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a == 0 {\n        return true\n   \
    \ }\n    if a < 0 {\n        a = -a\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return a == 0 || a == 1 || a == -1 ||\
    \ a == 64\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__5 (0.00s)\n\
    \        tmpkdj2gna4_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  if a == 0 {\n        return true\n    }\n    for i := 1; i <= a; i++ {\n  \
    \      if i * i * i == a {\n            return true\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    // your code here\n    return false\n\
    }\n\nfunc TestIscube(t *testing.T) {\n  candidate := iscube\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: true },\n     { actual: candidate(2),\
    \ expected: false },\n     { actual: candidate(-1), expected: true },\n     {\
    \ actual: candidate(64), expected: true },\n     { actual: candidate(180), expected:\
    \ false },\n     { actual: candidate(1000), expected: true },\n     { actual:\
    \ candidate(0), expected: true },\n     { actual: candidate(1729), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmp_uv2vsa2_test.go:43:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmp_uv2vsa2_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 0
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    if a < 0 {\n        a = -a\n    }\n  \
    \  for i := 0; i * i * i <= a; i++ {\n        if i * i * i == a {\n          \
    \  return true\n        }\n    }\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
- exit_code: 1
  program: "package iscube_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Write a function that takes an integer a and returns True \n// if this ingeger\
    \ is a cube of some integer number.\n// Note: you may assume the input is always\
    \ valid.\n// Examples:\n// iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1)\
    \ ==> True\n// iscube(64) ==> True\n// iscube(0) ==> True\n// iscube(180) ==>\
    \ False\nfunc iscube(a int) bool {\n    return false\n}\n\nfunc TestIscube(t *testing.T)\
    \ {\n  candidate := iscube\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: true },\n     { actual: candidate(2), expected: false },\n     { actual:\
    \ candidate(-1), expected: true },\n     { actual: candidate(64), expected: true\
    \ },\n     { actual: candidate(180), expected: false },\n     { actual: candidate(1000),\
    \ expected: true },\n     { actual: candidate(0), expected: true },\n     { actual:\
    \ candidate(1729), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIscube (0.00s)\n    --- FAIL: TestIscube/test_num__0 (0.00s)\n\
    \        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__2 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__3\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIscube/test_num__5 (0.00s)\n        tmpods5ergm_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIscube/test_num__6\
    \ (0.00s)\n        tmpods5ergm_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073700
