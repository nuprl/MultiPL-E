name: HumanEval_147_get_max_triples
language: go_test.go
prompt: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j\
  \ < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input:\
  \ n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid\
  \ triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n"
tests: "func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
  \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
  \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n\
    \    for i := 1; i <= n; i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    count\
    \ := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    // a[i] = i * i - i + 1\n    // a[i] + a[j] + a[k] = 3 * i * i\
    \ - 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n    // = 3 * (i\
    \ * i + j * j + k * k) - 3 * (i + j + k) + 3\n    // = 3 * (i * i + j * j + k\
    \ * k - i - j - k) + 3\n    // = 3 * (i + j + k) * (i + j + k - 1) + 3\n    //\
    \ = 3 * (i + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i + j + k) * (i + j +\
    \ k - 1) + 3\n    // = 3 * (i + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i\
    \ + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i + j + k) * (i + j + k - 1) +\
    \ 3\n    // = 3 * (i + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i + j + k)\
    \ * (i + j + k - 1) + 3\n    // = 3 * (i + j + k) * (i + j + k - 1) + 3\n    //\
    \ = 3 * (i + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i + j + k) * (i + j +\
    \ k - 1) + 3\n    // = 3 * (i + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i\
    \ + j + k) * (i + j + k - 1) + 3\n    // = 3 * (i + j + k) * (i + j + k - 1) +\
    \ 3\n    // = 3 * (i + j + k) * (i + j + k - 1", "    if n < 3 {\n        return\
    \ 0\n    }\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i\
    \ - 1] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n - 2; i++\
    \ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n", "    if n < 3 {\n        return 0\n    }\n    count := 0\n    for\
    \ i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n           \
    \ for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j\
    \ + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n", "    if n < 3\
    \ {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    count := 0\n    for i :=\
    \ 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n", "    if n < 3 {\n        return 0\n    }\n    a\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i - 1] = i * i -\
    \ i + 1\n    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for\
    \ j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    count := 0\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    // Write your code here\n    return\
    \ 0\n}\n", "    // a[i] = i * i - i + 1\n    // a[i] + a[j] + a[k] = i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1\n    // = i * i + j * j + k * k - (i + j\
    \ + k) + 3\n    // = (i + j + k) * (i + j + k) - (i + j + k) + 3\n    // = (i\
    \ + j + k) * (i + j + k - 1) + 2\n    // = (i + j + k) * (i + j + k - 1) + 1 +\
    \ 1\n    // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n    // = (i + j + k) *\
    \ (i + j + k - 1) + (2)\n    // = (i + j + k) * (i + j + k - 1) + (2 - 1)\n  \
    \  // = (i + j + k) * (i + j + k - 1) + (1)\n    // = (i + j + k) * (i + j + k\
    \ - 1) + (1 - 1)\n    // = (i + j + k) * (i + j + k - 1) + (0)\n    // = (i +\
    \ j + k) * (i + j + k - 1)\n    // (i + j + k) * (i + j + k - 1) % 3 == 0\n  \
    \  // (i + j + k) % 3 == 0 && (i + j + k - 1) % 3 == 0\n    // (i + j + k) % 3\
    \ == 0 && (i + j + k - 1) % 3 == 0\n    // (i + j + k) % 3 == 0 && (i + j + k\
    \ - 1) % 3 == 0\n    // (i + j + k) % 3 == 0 && (i + j + k - 1) % 3 == 0\n   \
    \ // (i + j + k) % 3 == 0 && (i + j + k - 1) % 3 == 0\n    // (i + j + k) % 3\
    \ ==", "    if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n   \
    \ for i := 1; i <= n; i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    count\
    \ := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return\
    \ 0\n    }\n    var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i * i - i + 1)\n    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n\
    \        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    if n < 3 {\n        return 0\n    }\n    // a[i] = i * i - i + 1\n\
    \    // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n \
    \   // = i * i + j * j + k * k - i - j - k + 3\n    // = (i + j + k) * (i + j\
    \ + k) - (i + j + k) + 3\n    // = (i + j + k) * (i + j + k - 1) + 2\n    // =\
    \ (i + j + k) * (i + j + k - 1) + 1 + 1\n    // = (i + j + k) * (i + j + k - 1)\
    \ + (1 + 1)\n    // = (i + j + k) * (i + j + k - 1) + (2)\n    // = (i + j + k)\
    \ * (i + j + k - 1) + (2 - 1)\n    // = (i + j + k) * (i + j + k - 1) + (1)\n\
    \    // = (i + j + k) * (i + j + k - 1) + (1 - 1)\n    // = (i + j + k) * (i +\
    \ j + k - 1) + (0)\n    // = (i + j + k) * (i + j + k - 1)\n    // (i + j + k)\
    \ * (i + j + k - 1) % 3 == 0\n    // (i + j + k) % 3 == 0\n    // i % 3 == 0\n\
    \    // j % 3 == 0\n    // k % 3 == 0\n    // i % 3 == 0 && j % 3 == 0 && k %\
    \ 3 == 0\n    // i % 3 == 0 && j % 3 == 0\n    // i % 3 == 0 && k % 3 == 0\n \
    \   // j % 3 == 0 && k % 3 == 0\n    // i % 3 == 0\n    // j % 3 == 0\n    //\
    \ k % 3 == 0\n    // i % 3 == 0 || j % 3 == 0 || k %", "    if n < 3 {\n     \
    \   return 0\n    }\n    var a = make([]int, n)\n    for i := 1; i <= n; i++ {\n\
    \        a[i - 1] = i * i - i + 1\n    }\n    var count int\n    for i := 0; i\
    \ < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n", "    if n < 3 {\n        return 0\n    }\n    a\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i - 1] = i * i -\
    \ i + 1\n    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for\
    \ j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   var a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i -\
    \ i + 1)\n    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n       \
    \ for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n", " \
    \   // Write your code here\n    if n < 3 {\n        return 0\n    }\n    var\
    \ res int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    res++\n\
    \                }\n            }\n        }\n    }\n    return res\n}\n", " \
    \   if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i :=\
    \ 1; i <= n; i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    count := 0\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n", "    if n < 3 {\n        return 0\n\
    \    }\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i -\
    \ 1] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n\
    \        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n", "    if n < 3 {\n        return 0\n    }\n    // a[i] = i * i - i + 1\n\
    \    // a[i] + a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n \
    \   // = i * i + j * j + k * k - i - j - k + 3\n    // = (i + j + k) * (i + j\
    \ + k) - (i + j + k) + 3\n    // = (i + j + k) * (i + j + k - 1) + 2\n    // a[i]\
    \ + a[j] + a[k] is a multiple of 3\n    // (i + j + k) * (i + j + k - 1) + 2 is\
    \ a multiple of 3\n    // (i + j + k) * (i + j + k - 1) is a multiple of 3\n \
    \   // (i + j + k) is a multiple of 3\n    // i + j + k is a multiple of 3\n \
    \   // i + j + k = 3 * m\n    // i + j = 3 * m - k\n    // i + j is a multiple\
    \ of 3\n    // i + j = 3 * m'\n    // i + j + k = 3 * m' + k\n    // k = 3 * m'\
    \ - i - j\n    // k is a multiple of 3\n    // k = 3 * m''\n    // i + j + k =\
    \ 3 * m' + 3 * m''\n    // i + j + k is a multiple of 3\n    // i + j + k = 3\
    \ * m'''\n    // i + j + k = 3 * m'''\n    // i + j = 3 * m''' - k\n    // i +\
    \ j is a multiple of 3\n    // i + j = 3 * m''''\n    // i + j + k = 3 * m''''\
    \ + k\n    // k = 3 * m'''' - i - j\n    // k is a multiple of 3\n    // k = 3\
    \ * m'''''\n    // i + j + k = 3 * m'''' + 3 * m'''''\n    // i + j + k is a multiple\
    \ of", "    if n < 3 {\n        return 0\n    }\n    count := 0\n    for i :=\
    \ 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for k\
    \ := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
