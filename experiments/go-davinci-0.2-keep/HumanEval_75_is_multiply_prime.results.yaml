language: go_test.go
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return is_multiply_prime(a\
    \ / i)\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp2s9i7uw0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp2s9i7uw0_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp2s9i7uw0_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmp2s9i7uw0_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp2s9i7uw0_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a <= 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    for i := 2; i < a; i++ {\n\
    \        if a % i == 0 {\n            return is_multiply_prime(a / i)\n      \
    \  }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n\
    \  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt4smntb9_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt4smntb9_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt4smntb9_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt4smntb9_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt4smntb9_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a <= 0 {\n        return false\n   \
    \ }\n    if a == 1 {\n        return true\n    }\n    if a == 2 {\n        return\
    \ true\n    }\n    if a == 3 {\n        return true\n    }\n    if a == 5 {\n\
    \        return true\n    }\n    if a == 7 {\n        return true\n    }\n   \
    \ if a == 11 {\n        return true\n    }\n    if a == 13 {\n        return true\n\
    \    }\n    if a == 17 {\n        return true\n    }\n    if a == 19 {\n     \
    \   return true\n    }\n    if a == 23 {\n        return true\n    }\n    if a\
    \ == 29 {\n        return true\n    }\n    if a == 31 {\n        return true\n\
    \    }\n    if a == 37 {\n        return true\n    }\n    if a == 41 {\n     \
    \   return true\n    }\n    if a == 43 {\n        return true\n    }\n    if a\
    \ == 47 {\n        return true\n    }\n    if a == 53 {\n        return true\n\
    \    }\n    if a == 59 {\n        return true\n    }\n    if a == 61 {\n     \
    \   return true\n    }\n    if a == 67 {\n        return true\n    }\n    if a\
    \ == 71 {\n        return true\n    }\n    if a == 73 {\n        return true\n\
    \    }\n    if a == 79 {\n        return true\n    }\n    if a == 83 {\n     \
    \   return true\n    }\n    if a == 89 {\n        return true\n    }\n    if a\
    \ == 97 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp347zx_i9_test.go:121: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmp347zx_i9_test.go:121:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmp347zx_i9_test.go:121: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmp347zx_i9_test.go:121:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmp347zx_i9_test.go:121: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp347zx_i9_test.go:121:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    for i := 2; i <= a; i++ {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                if a / i == 1 {\n                    return true\n      \
    \          }\n                return is_multiply_prime(a / i)\n            }\n\
    \        }\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T)\
    \ {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: false },\n     { actual: candidate(30), expected: true },\n     {\
    \ actual: candidate(8), expected: true },\n     { actual: candidate(10), expected:\
    \ false },\n     { actual: candidate(125), expected: true },\n     { actual: candidate(105),\
    \ expected: true },\n     { actual: candidate(126), expected: false },\n     {\
    \ actual: candidate(729), expected: false },\n     { actual: candidate(891), expected:\
    \ false },\n     { actual: candidate(1001), expected: true },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyepk6p1z_test.go:20:16: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a == 1 {\n        return false\n   \
    \ }\n    if a == 2 {\n        return true\n    }\n    if a == 3 {\n        return\
    \ true\n    }\n    if a == 5 {\n        return true\n    }\n    if a == 7 {\n\
    \        return true\n    }\n    if a == 11 {\n        return true\n    }\n  \
    \  if a == 13 {\n        return true\n    }\n    if a == 17 {\n        return\
    \ true\n    }\n    if a == 19 {\n        return true\n    }\n    if a == 23 {\n\
    \        return true\n    }\n    if a == 29 {\n        return true\n    }\n  \
    \  if a == 31 {\n        return true\n    }\n    if a == 37 {\n        return\
    \ true\n    }\n    if a == 41 {\n        return true\n    }\n    if a == 43 {\n\
    \        return true\n    }\n    if a == 47 {\n        return true\n    }\n  \
    \  if a == 53 {\n        return true\n    }\n    if a == 59 {\n        return\
    \ true\n    }\n    if a == 61 {\n        return true\n    }\n    if a == 67 {\n\
    \        return true\n    }\n    if a == 71 {\n        return true\n    }\n  \
    \  if a == 73 {\n        return true\n    }\n    if a == 79 {\n        return\
    \ true\n    }\n    if a == 83 {\n        return true\n    }\n    if a == 89 {\n\
    \        return true\n    }\n    if a == 97 {\n        return true\n    }\n  \
    \  return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpbiyzwoc9_test.go:118: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__1 (0.00s)\n        tmpbiyzwoc9_test.go:118:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__2\
    \ (0.00s)\n        tmpbiyzwoc9_test.go:118: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__4 (0.00s)\n        tmpbiyzwoc9_test.go:118:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpbiyzwoc9_test.go:118: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmpbiyzwoc9_test.go:118:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    if a % 2 == 0 {\n        return is_multiply_prime(a / 2)\n    }\n    if a\
    \ % 3 == 0 {\n        return is_multiply_prime(a / 3)\n    }\n    if a % 5 ==\
    \ 0 {\n        return is_multiply_prime(a / 5)\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                if is_prime(a / i) {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6ljyuww_test.go:20:16: undefined: is_prime

    /tmp/tmpv6ljyuww_test.go:21:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    if a % 2 == 0 {\n        return is_multiply_prime(a / 2)\n    }\n    if a\
    \ % 3 == 0 {\n        return is_multiply_prime(a / 3)\n    }\n    if a % 5 ==\
    \ 0 {\n        return is_multiply_prime(a / 5)\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp8wt__frj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp8wt__frj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 2
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            if is_prime(i)\
    \ {\n                if is_prime(a / i) {\n                    return true\n \
    \               }\n            }\n        }\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpv6ljyuww_test.go:20:16: undefined: is_prime

    /tmp/tmpv6ljyuww_test.go:21:20: undefined: is_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073446
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 3 {\n        return false\n    }\n\
    \    if a == 3 {\n        return true\n    }\n    if a % 2 == 0 {\n        return\
    \ is_multiply_prime(a / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a\
    \ / 3)\n    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n\
    \    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate\
    \ := is_multiply_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ false },\n     { actual: candidate(30), expected: true },\n     { actual: candidate(8),\
    \ expected: true },\n     { actual: candidate(10), expected: false },\n     {\
    \ actual: candidate(125), expected: true },\n     { actual: candidate(105), expected:\
    \ true },\n     { actual: candidate(126), expected: false },\n     { actual: candidate(729),\
    \ expected: false },\n     { actual: candidate(891), expected: false },\n    \
    \ { actual: candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmp54k7qjoe_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmp54k7qjoe_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmp54k7qjoe_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmp54k7qjoe_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__7\
    \ (0.00s)\n        tmp54k7qjoe_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__9 (0.00s)\n        tmp54k7qjoe_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp8wt__frj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp8wt__frj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    if a % 2 == 0 {\n        return is_multiply_prime(a / 2)\n    }\n    if a\
    \ % 3 == 0 {\n        return is_multiply_prime(a / 3)\n    }\n    if a % 5 ==\
    \ 0 {\n        return is_multiply_prime(a / 5)\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a == 1 {\n        return false\n   \
    \ }\n    for i := 2; i < a; i++ {\n        if a % i == 0 {\n            return\
    \ is_multiply_prime(a / i)\n        }\n    }\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp82hknsv2_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp82hknsv2_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    if a % 2 == 0 {\n        return is_multiply_prime(a / 2)\n    }\n    if a\
    \ % 3 == 0 {\n        return is_multiply_prime(a / 3)\n    }\n    if a % 5 ==\
    \ 0 {\n        return is_multiply_prime(a / 5)\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return true\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmp8wt__frj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__6\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmp8wt__frj_test.go:40:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmp8wt__frj_test.go:40: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a % 2 == 0 {\n        return is_multiply_prime(a\
    \ / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a / 3)\n\
    \    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n    }\n\
    \    if a == 1 {\n        return true\n    }\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__0\
    \ (0.00s)\n        tmpjeuqxu81_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__3 (0.00s)\n        tmpjeuqxu81_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__5\
    \ (0.00s)\n        tmpjeuqxu81_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__7 (0.00s)\n        tmpjeuqxu81_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpjeuqxu81_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    if a < 6 {\n        return false\n    }\n\
    \    if a % 2 == 0 {\n        return is_multiply_prime(a / 2)\n    }\n    if a\
    \ % 3 == 0 {\n        return is_multiply_prime(a / 3)\n    }\n    if a % 5 ==\
    \ 0 {\n        return is_multiply_prime(a / 5)\n    }\n    return true\n}\n\n\
    func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__6 (0.00s)\n        tmpbk4snsrl_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__8\
    \ (0.00s)\n        tmpbk4snsrl_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    return false\n}\n\nfunc TestIs_Multiply_Prime(t\
    \ *testing.T) {\n  candidate := is_multiply_prime\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(5), expected: false },\n     { actual: candidate(30), expected:\
    \ true },\n     { actual: candidate(8), expected: true },\n     { actual: candidate(10),\
    \ expected: false },\n     { actual: candidate(125), expected: true },\n     {\
    \ actual: candidate(105), expected: true },\n     { actual: candidate(126), expected:\
    \ false },\n     { actual: candidate(729), expected: false },\n     { actual:\
    \ candidate(891), expected: false },\n     { actual: candidate(1001), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpt1fyhyy3_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpt1fyhyy3_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
- exit_code: 1
  program: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
    \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunc\
    \ is_multiply_prime(a int) bool {\n    // Write your code here\n    return false\n\
    }\n\nfunc TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: false },\n     {\
    \ actual: candidate(30), expected: true },\n     { actual: candidate(8), expected:\
    \ true },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
    \ expected: true },\n     { actual: candidate(105), expected: true },\n     {\
    \ actual: candidate(126), expected: false },\n     { actual: candidate(729), expected:\
    \ false },\n     { actual: candidate(891), expected: false },\n     { actual:\
    \ candidate(1001), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Multiply_Prime (0.00s)\n    --- FAIL: TestIs_Multiply_Prime/test_num__1\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__2 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__4\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Multiply_Prime/test_num__5 (0.00s)\n        tmpfmlyacz4_test.go:41:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Multiply_Prime/test_num__9\
    \ (0.00s)\n        tmpfmlyacz4_test.go:41: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073447
