language: go_test.go
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a map to keep track of the cars.  The key is the\
    \ car's position,\n    // and the value is the direction of the car.  The direction\
    \ is either 1 or -1.\n    // 1 means the car is moving left to right, and -1 means\
    \ the car is moving right to left.\n    // We can use a map to keep track of the\
    \ cars.  The key is the car's position,\n    // and the value is the direction\
    \ of the car.  The direction is either 1 or -1.\n    // 1 means the car is moving\
    \ left to right, and -1 means the car is moving right to left.\n    cars := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        cars[i] = 1\n        cars[-i] = -1\n  \
    \  }\n    // Now we simulate the cars moving.  We do this by iterating through\
    \ the map.\n    // For each car, we move it one step.  If the car's new position\
    \ is already\n    // occupied by another car, we know that the two cars collided.\n\
    \    collisions := 0\n    for pos, dir := range cars {\n        new_pos := pos\
    \ + dir\n        if _, ok := cars[new_pos]; ok {\n            collisions++\n \
    \       }\n        cars[new_pos] = dir\n        delete(cars, pos)\n    }\n   \
    \ return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpn9ugejco_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpn9ugejco_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpn9ugejco_test.go:60: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpn9ugejco_test.go:60:\
    \ expected '%!s(int=64)', got '%!s(int=9)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpn9ugejco_test.go:60: expected '%!s(int=100)', got '%!s(int=13)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a simple array to represent the road.\n    //\
    \ The array is indexed from 0 to n-1.\n    // If the value of the array at index\
    \ i is 1, then there is a car moving left to right at index i.\n    // If the\
    \ value of the array at index i is -1, then there is a car moving right to left\
    \ at index i.\n    // If the value of the array at index i is 0, then there is\
    \ no car at index i.\n    road := make([]int, n)\n    for i := 0; i < n; i++ {\n\
    \        road[i] = 0\n    }\n    // We will use two pointers, one for the left\
    \ to right cars and one for the right to left cars.\n    // The left to right\
    \ pointer will start at 0 and move to the right.\n    // The right to left pointer\
    \ will start at n-1 and move to the left.\n    // We will keep moving the pointers\
    \ until they meet.\n    // If the pointers meet at the same time, then there is\
    \ no collision.\n    // If the pointers meet at different times, then there is\
    \ a collision.\n    // The number of collisions is the number of times the pointers\
    \ meet at different times.\n    lr_ptr := 0\n    rl_ptr := n - 1\n    num_collisions\
    \ := 0\n    for lr_ptr < rl_ptr {\n        if road[lr_ptr] == 0 {\n          \
    \  road[lr_ptr] = 1\n            lr_ptr++\n        }\n        if road[rl_ptr]\
    \ == 0 {\n            road[rl_ptr] = -1\n            rl_ptr--\n        }\n   \
    \     if road[lr_ptr] == 1 && road[rl_ptr] == -1 {\n            num_collisions++\n\
    \            lr_ptr++\n            rl_ptr--\n        }\n    }\n    return num_collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbtyszys6_test.go:71: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbtyszys6_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbtyszys6_test.go:71: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbtyszys6_test.go:71:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbtyszys6_test.go:71: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can model the cars as a set of points on the number line.\n\
    \    // We can model the left-to-right cars as a set of points {0, 1, 2, ...,\
    \ n-1}\n    // and the right-to-left cars as a set of points {-1, -2, -3, ...,\
    \ -n}.\n    // We can then compute the number of collisions as the number of pairs\
    \ of points\n    // that are the same.  This is the same as the number of pairs\
    \ of points that are\n    // the same, which is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the number of pairs\
    \ of points that are the same.\n    // This is the same as the\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxiie_7_3_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving right to left.\n    // The key is the starting position of the car.\n\
    \    // The value is the ending position of the car.\n    // We then iterate through\
    \ the cars that are moving left to right.\n    // For each car, we check if the\
    \ hash table contains the ending position of the car.\n    // If it does, we increment\
    \ the collision count.\n    // We then remove the entry from the hash table.\n\
    \    // We then add the entry to the hash table.\n    // We then return the collision\
    \ count.\n    // The time complexity is O(n) because we iterate through the cars\
    \ that are moving left to right.\n    // The space complexity is O(n) because\
    \ we store the cars that are moving right to left.\n    // The space complexity\
    \ can be reduced to O(1) if we use a bit vector to represent the hash table.\n\
    \    // However, the time complexity will be O(n^2) because we will have to iterate\
    \ through the bit vector\n    // to find the collision.\n    hash_table := make(map[int]int)\n\
    \    collision_count := 0\n    for i := 0; i < n; i++ {\n        if _, ok := hash_table[i];\
    \ ok {\n            collision_count++\n        }\n        delete(hash_table, i)\n\
    \        hash_table[n - i - 1] = n - i - 1\n    }\n    return collision_count\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpr2uhxp6d_test.go:60: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpr2uhxp6d_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpr2uhxp6d_test.go:60: expected '%!s(int=16)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpr2uhxp6d_test.go:60:\
    \ expected '%!s(int=64)', got '%!s(int=4)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpr2uhxp6d_test.go:60: expected '%!s(int=100)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a hash table to keep track of the cars that are\
    \ driving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We will use a hash table to\
    \ keep track of the cars that are driving right to left.\n    // The key is the\
    \ position of the car, and the value is the number of cars at that position.\n\
    \    // We will use a variable to keep track of the number of collisions.\n  \
    \  // We will use a variable to keep track of the current time.\n    // We will\
    \ use a variable to keep track of the current position of the left-to-right cars.\n\
    \    // We will use a variable to keep track of the current position of the right-to-left\
    \ cars.\n    // We will use a variable to keep track of the current position of\
    \ the left-to-right cars.\n    // We will use a variable to keep track of the\
    \ current position of the right-to-left cars.\n    // We will use a variable to\
    \ keep track of the current position of the left-to-right cars.\n    // We will\
    \ use a variable to keep track of the current position of the right-to-left cars.\n\
    \    // We will use a variable to keep track of the current position of the left-to-right\
    \ cars.\n    // We will use a variable to keep track of the current position of\
    \ the right-to-left cars.\n    // We will use a variable to keep track of the\
    \ current position of the left-to-right cars.\n    // We will use a variable to\
    \ keep track of the current position of the right-to-left cars.\n    // We will\
    \ use a variable to keep track of the current position of the left-to-right cars.\n\
    \    // We will use a variable to keep track of the current position of the right-to-left\
    \ cars.\n    // We will use a variable to keep track of the current position of\
    \ the left-to-right cars.\n    // We will use a variable to keep track of the\
    \ current position of the right-to-left cars.\n    // We will use a variable to\
    \ keep track of the current position of the left-to-right cars.\n    // We will\
    \ use a variable to keep track of the current position of the right-to-left cars.\n\
    \    //\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpduq6sydy_test.go:40:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We assume that the cars are numbered from 1 to n.\n    //\
    \ We assume that the cars moving left to right are numbered from 1 to n/2,\n \
    \   // and the cars moving right to left are numbered from n/2+1 to n.\n    //\
    \ We assume that the cars are initially at positions 0, 1, 2, ..., n-1.\n    //\
    \ We assume that the cars move at speed 1.\n    // We assume that the cars are\
    \ infinitely sturdy and strong.\n    // We assume that the road is infinitely\
    \ long.\n    // We assume that the road is perfectly straight.\n    // We assume\
    \ that the road is a line.\n    // We assume that the road is a line segment.\n\
    \    // We assume that the road is a line segment of length n.\n    // We assume\
    \ that the road is a line segment of length n, and the cars are initially at positions\
    \ 0, 1, 2, ..., n-1.\n    // We assume that the road is a line segment of length\
    \ n, and the cars are initially at positions 0, 1, 2, ..., n-1, and the cars move\
    \ at speed 1.\n    // We assume that the road is a line segment of length n, and\
    \ the cars are initially at positions 0, 1, 2, ..., n-1, and the cars move at\
    \ speed 1, and the cars are infinitely sturdy and strong.\n    // We assume that\
    \ the road is a line segment of length n, and the cars are initially at positions\
    \ 0, 1, 2, ..., n-1, and the cars move at speed 1, and the cars are infinitely\
    \ sturdy and strong, and the road is infinitely long.\n    // We assume that the\
    \ road is a line segment of length n, and the cars are initially at positions\
    \ 0, 1, 2, ..., n-1, and the cars move at speed 1, and the cars are infinitely\
    \ sturdy and strong, and the road is infinitely long, and the road is perfectly\
    \ straight.\n    // We assume that the road is a line segment of length n, and\
    \ the cars are initially at positions 0, 1, 2, ..., n-1, and the cars move at\
    \ speed 1, and the cars are infinitely sturdy and strong, and the road is infinitely\
    \ long, and the road is perfectly straight, and the road is a line.\n    // We\
    \ assume that the road is a line\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpoiifa5pn_test.go:35:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car.\
    \  The value is the number\n    // of cars that are at that position.\n    //\
    \ We start with an empty hash table.  We then iterate through the cars that are\n\
    \    // moving right to left.  For each car, we check if there are any cars in\
    \ the hash\n    // table that are at the same position.  If so, we increment the\
    \ number of collisions.\n    // We then remove the car from the hash table.\n\
    \    // We then iterate through the cars that are moving left to right.  For each\
    \ car,\n    // we add it to the hash table.\n    // The time complexity is O(n).\
    \  The space complexity is O(n).\n    left_to_right := make(map[int]int)\n   \
    \ collisions := 0\n    for i := 0; i < n; i++ {\n        if _, ok := left_to_right[i];\
    \ ok {\n            collisions++\n        }\n        delete(left_to_right, i)\n\
    \    }\n    for i := 0; i < n; i++ {\n        left_to_right[i]++\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphj9jxs12_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphj9jxs12_test.go:58:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphj9jxs12_test.go:58: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphj9jxs12_test.go:58:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphj9jxs12_test.go:58: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars moving\
    \ left to right are numbered from 0 to n-1.\n    // The cars moving right to left\
    \ are numbered from n to 2n-1.\n    // The cars moving left to right are indexed\
    \ by i.\n    // The cars moving right to left are indexed by j.\n    // The cars\
    \ moving left to right are at position x[i].\n    // The cars moving right to\
    \ left are at position y[j].\n    // The cars moving left to right are moving\
    \ at speed s[i].\n    // The cars moving right to left are moving at speed t[j].\n\
    \    // The cars moving left to right are at position x[i] + s[i]*t.\n    // The\
    \ cars moving right to left are at position y[j] - t[j]*t.\n    // The cars moving\
    \ left to right are at position x[i] + s[i]*t + s[i]*t.\n    // The cars moving\
    \ right to left are at position y[j] - t[j]*t - t[j]*t.\n    // The cars moving\
    \ left to right are at position x[i] + 2*s[i]*t.\n    // The cars moving right\
    \ to left are at position y[j] - 2*t[j]*t.\n    // The cars moving left to right\
    \ are at position x[i] + 2*s[i]*t + s[i]*t.\n    // The cars moving right to left\
    \ are at position y[j] - 2*t[j]*t - t[j]*t.\n    // The cars moving left to right\
    \ are at position x[i] + 3*s[i]*t.\n    // The cars moving right to left are at\
    \ position y[j] - 3*t[j]*t.\n    // The cars moving left to right are at position\
    \ x[i] + 3*s[i]*t + s[i]*t.\n    // The cars moving right to left are at position\
    \ y[j] - 3*t[j]*t - t[j]*t.\n    // The cars moving left to right are at position\
    \ x[i] + 4*s[\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8b4a5k3u_test.go:39:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are in the same position as cars that are moving\
    \ right to left.\n    // We can think of the cars moving left to right as being\
    \ at positions\n    // 0, 1, 2, ..., n-1.  The cars moving right to left are at\
    \ positions\n    // n-1, n-2, ..., 0.  The number of collisions is the number\
    \ of positions\n    // that are occupied by both a car moving left to right and\
    \ a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a car moving left to right\n    // that are also occupied\
    \ by a car moving right to left.\n    // This is the same as the number of positions\
    \ that are occupied by a\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptvjxm55s_test.go:44:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 0
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a map to track the cars that are moving left\
    \ to right.\n    // The key will be the position of the car, and the value will\
    \ be the number of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We will use a map to track the cars that are moving right to left.\n \
    \   // The key will be the position of the car, and the value will be the number\
    \ of cars\n    // at that position.\n    right_to_left := make(map[int]int)\n\
    \    // We will use a map to track the cars that are moving left to right.\n \
    \   // The key will be the position of the car, and the value will be the number\
    \ of cars\n    // at that position.\n    collisions := 0\n    // We will use a\
    \ map to track the cars that are moving left to right.\n    // The key will be\
    \ the position of the car, and the value will be the number of cars\n    // at\
    \ that position.\n    for i := 0; i < n; i++ {\n        left_to_right[i] = 1\n\
    \        right_to_left[-i] = 1\n    }\n    // We will use a map to track the cars\
    \ that are moving left to right.\n    // The key will be the position of the car,\
    \ and the value will be the number of cars\n    // at that position.\n    for\
    \ i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if left_to_right[i]\
    \ > 0 && right_to_left[-j] > 0 {\n                collisions += left_to_right[i]\
    \ * right_to_left[-j]\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a map to keep track of the cars that are moving\
    \ left to right.\n    // The key is the position of the car, and the value is\
    \ the number of cars\n    // at that position.\n    // We can use a map to keep\
    \ track of the cars that are moving right to left.\n    // The key is the position\
    \ of the car, and the value is the number of cars\n    // at that position.\n\
    \    // We can use a map to keep track of the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    // We can use a map to keep track of the cars that\
    \ are moving right to left.\n    // The key is the position of the car, and the\
    \ value is the number of cars\n    // at that position.\n    // We can use a map\
    \ to keep track of the cars that are moving left to right.\n    // The key is\
    \ the position of the car, and the value is the number of cars\n    // at that\
    \ position.\n    // We can use a map to keep track of the cars that are moving\
    \ right to left.\n    // The key is the position of the car, and the value is\
    \ the number of cars\n    // at that position.\n    // We can use a map to keep\
    \ track of the cars that are moving left to right.\n    // The key is the position\
    \ of the car, and the value is the number of cars\n    // at that position.\n\
    \    // We can use a map to keep track of the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    // We can use a map to keep track of the cars that\
    \ are moving left to right.\n    // The key is the position of the car, and the\
    \ value is the number of cars\n    // at that position.\n    // We can use a map\
    \ to keep track of the cars that are moving right to left.\n    // The key is\
    \ the position of the car, and the value is the number of cars\n    // at that\
    \ position.\n    // We can use a map to keep track of the cars that are moving\
    \ left to right.\n    // The key is the position of the car\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp33bxck6w_test.go:49:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  We iterate through\
    \ the cars that are\n    // moving right to left, and for each car, we check if\
    \ there are any cars\n    // moving left to right at the same position.  If so,\
    \ we add the number of\n    // cars moving left to right to the total number of\
    \ collisions.\n    // We use a hash table to keep track of the cars moving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We iterate through the cars moving right to left.\n    for i := 0; i <\
    \ n; i++ {\n        // We check if there are any cars moving left to right at\
    \ the same\n        // position.\n        if _, ok := left_to_right[i]; ok {\n\
    \            // If so, we add the number of cars moving left to right to the\n\
    \            // total number of collisions.\n            n += left_to_right[i]\n\
    \        }\n        // We add this car to the hash table.\n        left_to_right[i]++\n\
    \    }\n    // We return the total number of collisions.\n    return n\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpvohh_wcb_test.go:60: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpvohh_wcb_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpvohh_wcb_test.go:60: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpvohh_wcb_test.go:60:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpvohh_wcb_test.go:60: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073214
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var left_to_right_cars []int\n    var right_to_left_cars []int\n\
    \    for i := 0; i < n; i++ {\n        left_to_right_cars = append(left_to_right_cars,\
    \ i)\n        right_to_left_cars = append(right_to_left_cars, i)\n    }\n    return\
    \ car_race_collision_helper(left_to_right_cars, right_to_left_cars)\n}\n\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpkyesxf9b_test.go:23:12: undefined: car_race_collision_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ right to left\n    // that are in front of the cars that are moving left to\
    \ right.\n    // The cars that are moving left to right are in the positions [0,\
    \ n-1].\n    // The cars that are moving right to left are in the positions [n,\
    \ 2n-1].\n    // The cars that are moving right to left are in front of the cars\
    \ that are moving\n    // left to right iff the cars that are moving right to\
    \ left are in the positions\n    // [n-1, 2n-2].\n    // The number of cars that\
    \ are moving right to left that are in front of the cars\n    // that are moving\
    \ left to right is the number of cars that are moving right to left\n    // that\
    \ are in the positions [n-1, 2n-2].\n    // The number of cars that are moving\
    \ right to left that are in the positions [n-1, 2n-2]\n    // is the number of\
    \ cars that are moving right to left that are in the positions [n-1, 2n-2]\n \
    \   // and are not in the positions [0, n-1].\n    // The number of cars that\
    \ are moving right to left that are in the positions [n-1, 2n-2]\n    // and are\
    \ not in the positions [0, n-1] is the number of cars that are moving right to\
    \ left\n    // that are in the positions [n-1, 2n-2] and are not in the positions\
    \ [0, n-1].\n    // The number of cars that are moving right to left that are\
    \ in the positions [n-1, 2n-2]\n    // and are not in the positions [0, n-1] is\
    \ the number of cars that are moving right to left\n    // that are in the positions\
    \ [n-1, 2n-2] and are not in the positions [0, n-1].\n    // The number of cars\
    \ that are moving right to left that are in the positions [n-1, 2n-2]\n    //\
    \ and are not in the positions [0, n-1] is the number of cars that are moving\
    \ right to left\n    // that are in the positions [n-1, 2n-2] and are not\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0cch6aut_test.go:39:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars driving\
    \ left to right are numbered from 0 to n/2-1.\n    // The cars driving right to\
    \ left are numbered from n/2 to n-1.\n    // The cars driving left to right start\
    \ at position 0.\n    // The cars driving right to left start at position n.\n\
    \    // The cars driving left to right move at speed 1.\n    // The cars driving\
    \ right to left move at speed -1.\n    // The cars driving left to right move\
    \ to the right.\n    // The cars driving right to left move to the left.\n   \
    \ // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n  \
    \  // The cars driving right to left are at positions n, n-1, n-2, ..., n/2+1.\n\
    \    // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n\
    \    // The cars driving right to left are at positions n, n-1, n-2, ..., n/2+1.\n\
    \    // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n\
    \    // The cars driving right to left are at positions n, n-1, n-2, ..., n/2+1.\n\
    \    // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n\
    \    // The cars driving right to left are at positions n, n-1, n-2, ..., n/2+1.\n\
    \    // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n\
    \    // The cars driving right to left are at positions n, n-1, n-2, ..., n/2+1.\n\
    \    // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n\
    \    // The cars driving right to left are at positions n, n-1, n-2, ..., n/2+1.\n\
    \    // The cars driving left to right are at positions 0, 1, 2, ..., n/2-1.\n\
    \    // The cars driving right to left are at\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnif3x31m_test.go:40:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can model the cars as a set of points on a number line.\n\
    \    // The left-to-right cars are at positions 0, 1, 2, ..., n-1.\n    // The\
    \ right-to-left cars are at positions 0, -1, -2, ..., -(n-1).\n    // The cars\
    \ are all moving at the same speed.\n    // A collision occurs when two cars are\
    \ at the same position.\n    //\n    // We can model this as a set of n points\
    \ on a number line.\n    // The number of collisions is the number of pairs of\
    \ points that are the same.\n    //\n    // For example, if n = 3, then the points\
    \ are 0, 1, 2, 0, -1, -2.\n    // The number of collisions is 3.\n    //\n   \
    \ // If n = 4, then the points are 0, 1, 2, 3, 0, -1, -2, -3.\n    // The number\
    \ of collisions is 6.\n    //\n    // If n = 5, then the points are 0, 1, 2, 3,\
    \ 4, 0, -1, -2, -3, -4.\n    // The number of collisions is 10.\n    //\n    //\
    \ If n = 6, then the points are 0, 1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5.\n   \
    \ // The number of collisions is 15.\n    //\n    // If n = 7, then the points\
    \ are 0, 1, 2, 3, 4, 5, 6, 0, -1, -2, -3, -4, -5, -6.\n    // The number of collisions\
    \ is 21.\n    //\n    // If n = 8, then the points are 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 0, -1, -2, -3, -4, -5, -6, -7.\n    // The number of collisions is 28.\n   \
    \ //\n    // If n = 9, then the points are 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, -1, -2,\
    \ -3, -4, -5, -6, -7, -8.\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9x72m59m_test.go:46:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the positions\
    \ of the cars.\n    // We will use a Red-Black tree.\n    // The tree will be\
    \ sorted by the position of the cars.\n    // The tree will also store the direction\
    \ of the cars.\n    // We will insert the cars into the tree.\n    // We will\
    \ then traverse the tree in order.\n    // If we encounter a car that's moving\
    \ left to right, we will search the tree\n    // for a car that's moving right\
    \ to left and has a position that's to the right\n    // of the car that's moving\
    \ left to right.\n    // If we find such a car, we will increment the number of\
    \ collisions.\n    // If we don't find such a car, we will continue traversing\
    \ the tree.\n    // We will continue traversing the tree until we reach a car\
    \ that's moving right to left.\n    // We will then search the tree for a car\
    \ that's moving left to right and has a position\n    // that's to the left of\
    \ the car that's moving right to left.\n    // If we find such a car, we will\
    \ increment the number of collisions.\n    // If we don't find such a car, we\
    \ will continue traversing the tree.\n    // We will continue traversing the tree\
    \ until we reach a car that's moving left to right.\n    // We will then search\
    \ the tree for a car that's moving right to left and has a position\n    // that's\
    \ to the right of the car that's moving left to right.\n    // If we find such\
    \ a car, we will increment the number of collisions.\n    // If we don't find\
    \ such a car, we will continue traversing the tree.\n    // We will continue traversing\
    \ the tree until we reach a car that's moving right to left.\n    // We will then\
    \ search the tree for a car that's moving left to right and has a position\n \
    \   // that's to the left of the car that's moving right to left.\n    // If we\
    \ find such a car, we will increment the number of collisions.\n    // If we don't\
    \ find such a car, we will continue traversing the tree.\n    // We will continue\
    \ traversing the tree until we reach a car that's moving left to right.\n    //\
    \ We will then search the tree for a car that\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5qia_1jm_test.go:45:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use the following algorithm:\n    // We start with a list\
    \ of cars moving left to right, and a list of cars moving right to left.\n   \
    \ // We sort the left to right list, and the right to left list.\n    // We then\
    \ merge the two lists, and count the number of collisions.\n    // The merge algorithm\
    \ is as follows:\n    // We start with the first element of the left to right\
    \ list, and the first element of the right to left list.\n    // We compare the\
    \ two elements.  If the left to right element is less than the right to left element,\n\
    \    // we move on to the next element of the left to right list.  If the right\
    \ to left element is less than the left to right element,\n    // we move on to\
    \ the next element of the right to left list.  If the two elements are equal,\
    \ we have a collision.\n    // We then move on to the next element of the left\
    \ to right list, and the next element of the right to left list.\n    // We repeat\
    \ this process until we reach the end of one of the lists.\n    // The time complexity\
    \ of this algorithm is O(n log n).\n    // The space complexity of this algorithm\
    \ is O(n).\n    // We can improve the space complexity to O(1) by sorting the\
    \ left to right list in place, and the right to left list in place.\n    // We\
    \ can improve the time complexity to O(n) by using a counting sort.\n    // However,\
    \ we will not do so here.\n    left_to_right := make([]int, n)\n    right_to_left\
    \ := make([]int, n)\n    for i := 0; i < n; i++ {\n        left_to_right[i] =\
    \ i\n        right_to_left[i] = n - i - 1\n    }\n    merge_sort(left_to_right)\n\
    \    merge_sort(right_to_left)\n    collisions := 0\n    i := 0\n    j := 0\n\
    \    for i < n && j < n {\n        if left_to_right[i] < right_to_left[j] {\n\
    \            i++\n        } else if right_to_left[j] < left_to_right[i] {\n  \
    \          j\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvxawiscm_test.go:49:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 0
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a hash table to store the cars that are moving left\
    \ to right.\n    // The key is the position of the car; the value is the number\
    \ of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We use a hash table to store the cars that are moving right to left.\n\
    \    // The key is the position of the car; the value is the number of cars\n\
    \    // at that position.\n    right_to_left := make(map[int]int)\n    // We use\
    \ a hash table to store the cars that are moving left to right.\n    // The key\
    \ is the position of the car; the value is the number of cars\n    // at that\
    \ position.\n    collisions := 0\n    // We initialize the cars that are moving\
    \ left to right.\n    for i := 0; i < n; i++ {\n        left_to_right[i] = 1\n\
    \    }\n    // We initialize the cars that are moving right to left.\n    for\
    \ i := 0; i < n; i++ {\n        right_to_left[-i] = 1\n    }\n    // We iterate\
    \ through the cars that are moving left to right.\n    for i := 0; i < n; i++\
    \ {\n        // We iterate through the cars that are moving right to left.\n \
    \       for j := 0; j < n; j++ {\n            // If the cars collide, we update\
    \ the number of collisions.\n            if left_to_right[i] > 0 && right_to_left[-j]\
    \ > 0 {\n                collisions += left_to_right[i] * right_to_left[-j]\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars moving\
    \ left to right are numbered 0 to n-1.\n    // The cars moving right to left are\
    \ numbered n to 2n-1.\n    // The cars moving left to right are at positions 0\
    \ to n-1.\n    // The cars moving right to left are at positions n to 2n-1.\n\
    \    // The cars moving left to right are moving at speed 1.\n    // The cars\
    \ moving right to left are moving at speed -1.\n    // The cars moving left to\
    \ right are moving in the direction of increasing position.\n    // The cars moving\
    \ right to left are moving in the direction of decreasing position.\n    // The\
    \ cars moving left to right are moving in the direction of increasing index.\n\
    \    // The cars moving right to left are moving in the direction of decreasing\
    \ index.\n    // The cars moving left to right are moving in the direction of\
    \ increasing time.\n    // The cars moving right to left are moving in the direction\
    \ of decreasing time.\n    // The cars moving left to right are moving in the\
    \ direction of increasing time.\n    // The cars moving right to left are moving\
    \ in the direction of decreasing time.\n    // The cars moving left to right are\
    \ moving in the direction of increasing time.\n    // The cars moving right to\
    \ left are moving in the direction of decreasing time.\n    // The cars moving\
    \ left to right are moving in the direction of increasing time.\n    // The cars\
    \ moving right to left are moving in the direction of decreasing time.\n    //\
    \ The cars moving left to right are moving in the direction of increasing time.\n\
    \    // The cars moving right to left are moving in the direction of decreasing\
    \ time.\n    // The cars moving left to right are moving in the direction of increasing\
    \ time.\n    // The cars moving right to left are moving in the direction of decreasing\
    \ time.\n    // The cars moving left to right are moving in the direction of increasing\
    \ time.\n    // The cars moving right to left are moving in the direction of decreasing\
    \ time.\n    // The cars moving left to right are moving in the direction of increasing\
    \ time.\n    // The cars moving right to left are moving in the direction of decreasing\
    \ time.\n    // The cars moving left to right are moving in the direction of increasing\
    \ time.\n    // The cars moving right to left are moving in the direction of decreasing\
    \ time\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgar3wt2f_test.go:46:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can model the cars as a set of points on a line.\n   \
    \ // The left-to-right cars are at positions 0, 1, 2, ..., n-1.\n    // The right-to-left\
    \ cars are at positions n, n+1, n+2, ..., 2n-1.\n    // We can sort the points\
    \ in O(n log n) time.\n    // Then we can iterate through the points and count\
    \ the number of collisions.\n    // The total time complexity is O(n log n).\n\
    \    // The space complexity is O(n).\n    points := make([]int, 2*n)\n    for\
    \ i := 0; i < n; i++ {\n        points[i] = i\n    }\n    for i := n; i < 2*n;\
    \ i++ {\n        points[i] = 2*n - i - 1\n    }\n    sort(points)\n    collisions\
    \ := 0\n    for i := 0; i < 2*n-1; i++ {\n        if points[i] == points[i+1]\
    \ {\n            collisions++\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqeh2wazn_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We'll use a hash table to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We'll use a hash table to keep\
    \ track of the cars that are moving right to left.\n    // The key is the position\
    \ of the car, and the value is the number of cars at that position.\n    // We'll\
    \ use a hash table to keep track of the collisions.\n    // The key is the position\
    \ of the collision, and the value is the number of collisions at that position.\n\
    \    // We'll use a hash table to keep track of the cars that are moving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars at that position.\n    // We'll use a hash table to keep track of the\
    \ cars that are moving right to left.\n    // The key is the position of the car,\
    \ and the value is the number of cars at that position.\n    // We'll use a hash\
    \ table to keep track of the collisions.\n    // The key is the position of the\
    \ collision, and the value is the number of collisions at that position.\n   \
    \ // We'll use a hash table to keep track of the cars that are moving left to\
    \ right.\n    // The key is the position of the car, and the value is the number\
    \ of cars at that position.\n    // We'll use a hash table to keep track of the\
    \ cars that are moving right to left.\n    // The key is the position of the car,\
    \ and the value is the number of cars at that position.\n    // We'll use a hash\
    \ table to keep track of the collisions.\n    // The key is the position of the\
    \ collision, and the value is the number of collisions at that position.\n   \
    \ // We'll use a hash table to keep track of the cars that are moving left to\
    \ right.\n    // The key is the position of the car, and the value is the number\
    \ of cars at that position.\n    // We'll use a hash table to keep track of the\
    \ cars that are moving right to left.\n    // The key is the position of the car,\
    \ and the value is the number of cars at that position.\n    // We'll use a hash\
    \ table to keep track of the collisions.\n    // The key is the position\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpup65j916_test.go:41:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a map to keep track of the cars.  The key of\
    \ the map is the\n    // position of the car.  The value is the number of cars\
    \ at that position.\n    // The map is initialized to have n cars at position\
    \ 0, and n cars at position\n    // 2n.  The cars at position 0 are moving left\
    \ to right, and the cars at position\n    // 2n are moving right to left.\n  \
    \  car_map := make(map[int]int)\n    car_map[0] = n\n    car_map[2*n] = n\n\n\
    \    // We will use a slice to keep track of the positions of the cars.  The slice\n\
    \    // is initialized to have n 0's and n 2n's.\n    car_positions := make([]int,\
    \ 2*n)\n    for i := 0; i < n; i++ {\n        car_positions[i] = 0\n        car_positions[i+n]\
    \ = 2*n\n    }\n\n    // We will use a slice to keep track of the directions of\
    \ the cars.  The slice\n    // is initialized to have n 1's and n -1's.\n    car_directions\
    \ := make([]int, 2*n)\n    for i := 0; i < n; i++ {\n        car_directions[i]\
    \ = 1\n        car_directions[i+n] = -1\n    }\n\n    // We will use a slice to\
    \ keep track of the speeds of the cars.  The slice\n    // is initialized to have\
    \ n 1's and n 1's.\n    car_speeds := make([]int, 2*n)\n    for i := 0; i < 2*n;\
    \ i++ {\n        car_speeds[i] = 1\n    }\n\n    // We will use a slice to keep\
    \ track of the collisions.  The slice\n    // is initialized to have n 0's and\
    \ n 0's.\n    car_collisions := make([]int, 2*n)\n\n    // We will use a slice\
    \ to keep track of the cars that have collided.  The slice\n    // is initialized\
    \ to have n 0's and n 0's.\n    car_collided := make([]int, 2*n)\n\n    // We\
    \ will\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwflabp1b_test.go:58:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073213
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that n is even.\n    // Assume that n is at least\
    \ 2.\n    // Assume that n is at most 100.\n    // Assume that n is a positive\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Assume that n is a non-negative integer.\n    // Assume that n is a non-negative\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Assume that n is a non-negative integer.\n    // Assume that n is a non-negative\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Assume that n is a non-negative integer.\n    // Assume that n is a non-negative\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Assume that n is a non-negative integer.\n    // Assume that n is a non-negative\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Assume that n is a non-negative integer.\n    // Assume that n is a non-negative\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Assume that n is a non-negative integer.\n    // Assume that n is a non-negative\
    \ integer.\n    // Assume that n is a non-negative integer.\n    // Assume that\
    \ n is a non-negative integer.\n    // Assume that n is a non-negative integer.\n\
    \    // Ass\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_6sjzd2__test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree.  The key is the\
    \ position of the car.\n    // The value is the number of cars at that position.\n\
    \    // We start with an empty tree.\n    // We insert the first car into the\
    \ tree.\n    // Then we insert the second car into the tree.\n    // Then we insert\
    \ the third car into the tree.\n    // ...\n    // Then we insert the nth car\
    \ into the tree.\n    // Then we insert the (n+1)th car into the tree.\n    //\
    \ ...\n    // Then we insert the 2nth car into the tree.\n    //\n    // When\
    \ we insert a car into the tree, we first check if the car is already in the tree.\n\
    \    // If it is, we increment the value of the car by 1.\n    // If it is not,\
    \ we insert the car into the tree with value 1.\n    //\n    // When we insert\
    \ a car into the tree, we also check if the car is colliding with any other car.\n\
    \    // If it is, we increment the number of collisions by the number of cars\
    \ that it is colliding with.\n    //\n    // When we insert a car into the tree,\
    \ we also check if the car is colliding with any other car.\n    // If it is,\
    \ we increment the number of collisions by the number of cars that it is colliding\
    \ with.\n    //\n    // When we insert a car into the tree, we also check if the\
    \ car is colliding with any other car.\n    // If it is, we increment the number\
    \ of collisions by the number of cars that it is colliding with.\n    //\n   \
    \ // When we insert a car into the tree, we also check if the car is colliding\
    \ with any other car.\n    // If it is, we increment the number of collisions\
    \ by the number of cars that it is colliding with.\n    //\n    // When we insert\
    \ a car into the tree, we also check if the car is colliding with any other car.\n\
    \    // If it is, we increment the number of collisions by the number of cars\
    \ that it is colliding with.\n    //\n    // When we insert a car into the tree,\
    \ we also check if the car is colliding with any other car.\n    // If it is,\
    \ we increment the\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnwhv_3p3_test.go:50:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // the cars are numbered from 0 to n-1\n    // the left-to-right\
    \ cars are in the range 0 to n/2-1\n    // the right-to-left cars are in the range\
    \ n/2 to n-1\n    // the cars are initially spaced out by 1 unit\n    // the cars\
    \ move at a speed of 1 unit per second\n    // the cars start at time 0\n    //\
    \ the cars are infinitely strong and sturdy\n    // the cars are infinitely long\n\
    \    // the road is infinitely long\n    // the road is perfectly straight\n \
    \   // the road is flat\n    // the road is frictionless\n    // the road is perfectly\
    \ smooth\n    // the cars are perfectly smooth\n    // the cars are frictionless\n\
    \    // the cars are perfectly round\n    // the cars are perfectly cylindrical\n\
    \    // the cars are perfectly circular\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    // the cars are perfectly spherical\n\
    \    // the cars are perfectly spherical\n    //\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1gg7646f_test.go:76:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars.\n    // The root of the tree is the car that's in the middle of the\
    \ road.\n    // The left subtree is the cars that are to the left of the root,\
    \ and the right subtree\n    // is the cars that are to the right of the root.\n\
    \    // The cars are sorted by their position on the road.\n    // The cars that\
    \ are moving left to right are inserted into the tree.\n    // The cars that are\
    \ moving right to left are deleted from the tree.\n    // When a car is deleted\
    \ from the tree, we check if the car that's being deleted\n    // is to the left\
    \ of the root.  If so, we increment the collision count.\n    // This is because\
    \ the car that's being deleted is moving right to left, and\n    // the root is\
    \ moving left to right.  Therefore, the two cars collide.\n    //\n    // The\
    \ time complexity is O(n log n).\n    // The space complexity is O(n).\n    //\n\
    \    // The following is the implementation of the binary search tree.\n    //\
    \ The tree is implemented using a slice.  The root is at index 0.\n    // The\
    \ left subtree is at index 1, and the right subtree is at index 2.\n    // The\
    \ left child of a node at index i is at index 2i+1, and the right child\n    //\
    \ is at index 2i+2.\n    // The parent of a node at index i is at index (i-1)/2.\n\
    \    // The tree is sorted in ascending order.\n    tree := make([]int, 0)\n \
    \   // The following function inserts a car into the tree.\n    insert := func(car\
    \ int) {\n        tree = append(tree, car)\n        i := len(tree) - 1\n     \
    \   for i > 0 {\n            parent := (i - 1) / 2\n            if tree[parent]\
    \ > tree[i] {\n                tree[parent], tree[i] = tree[i], tree[parent]\n\
    \                i = parent\n            } else {\n                break\n   \
    \         }\n        }\n    }\n    // The following function deletes a car from\
    \ the tree.\n    // The function returns true if the car is to the left\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpidm20kvn_test.go:56:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n - 1\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0vy21m_i_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0vy21m_i_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0vy21m_i_test.go:37: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars moving\
    \ left to right are numbered from 0 to n-1.\n    // The cars moving right to left\
    \ are numbered from n to 2n-1.\n    // The cars are initially positioned at the\
    \ following locations:\n    // The cars moving left to right are initially positioned\
    \ at locations\n    // 0, 1, 2, ..., n-1.\n    // The cars moving right to left\
    \ are initially positioned at locations\n    // n, n+1, n+2, ..., 2n-1.\n    //\
    \ The cars are moving at the same speed.\n    // The cars moving left to right\
    \ are moving to the right.\n    // The cars moving right to left are moving to\
    \ the left.\n    // The cars are infinitely sturdy and strong; as a result, they\
    \ continue moving\n    // in their trajectory as if they did not collide.\n  \
    \  // This function outputs the number of such collisions.\n    // For example,\
    \ if n = 3, then the cars moving left to right are\n    // initially positioned\
    \ at locations 0, 1, 2.\n    // The cars moving right to left are initially positioned\
    \ at locations\n    // 3, 4, 5.\n    // The cars moving left to right are moving\
    \ to the right.\n    // The cars moving right to left are moving to the left.\n\
    \    // The cars are moving at the same speed.\n    // The cars moving left to\
    \ right are numbered from 0 to 2.\n    // The cars moving right to left are numbered\
    \ from 3 to 5.\n    // The cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    // in their trajectory as if they did not collide.\n\
    \    // This function outputs the number of such collisions.\n    // For example,\
    \ if n = 3, then the cars moving left to right are\n    // initially positioned\
    \ at locations 0, 1, 2.\n    // The cars moving right to left are initially positioned\
    \ at locations\n    // 3, 4, 5.\n    // The cars moving left to right are moving\
    \ to the right.\n    // The cars moving right to left are moving to the left.\n\
    \    // The cars are moving at the same speed.\n    // The cars moving left to\
    \ right are numbered from 0 to 2.\n    // The cars moving right to left are numbered\
    \ from 3 to 5\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpntxak6zk_test.go:52:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // We then iterate through the cars that are moving\
    \ right to left.  For each car\n    // that's moving right to left, we check if\
    \ there's a car that's moving left to right\n    // that's in the same position.\
    \  If there is, we increment the collision counter.\n    // We then remove the\
    \ car that's moving left to right from the hash table.\n    // We do this for\
    \ all cars that are moving right to left.\n    // The time complexity is O(n)\
    \ and the space complexity is O(n).\n    collisions := 0\n    left_to_right :=\
    \ make(map[int]bool)\n    for i := 0; i < n; i++ {\n        left_to_right[i] =\
    \ true\n    }\n    for i := 0; i < n; i++ {\n        if _, ok := left_to_right[i];\
    \ ok {\n            collisions++\n            delete(left_to_right, i)\n     \
    \   }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp1uo01ehh_test.go:55: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp1uo01ehh_test.go:55:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp1uo01ehh_test.go:55: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp1uo01ehh_test.go:55:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp1uo01ehh_test.go:55: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We then iterate through the\
    \ cars that are moving right to left, and check if there are\n    // cars that\
    \ are moving left to right at the same position.  If so, we increment the number\n\
    \    // of collisions.\n    // The time complexity is O(n), and the space complexity\
    \ is O(n).\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.  This means that if there are multiple\n    // cars at the same\
    \ position, they will all continue moving in their trajectory as if they\n   \
    \ // did not collide.  This is why we need to store the number of cars at each\
    \ position.\n    //\n    // Note that the cars are infinitely long.  This means\
    \ that if a car is at position x,\n    // then all the cars that are at positions\
    \ x + 1, x + 2, ..., x + n, ... will collide with\n    // this car.  This is why\
    \ we need to store the number of cars at each position.\n    //\n    // Note that\
    \ the cars are infinitely strong.  This means that if a car is at position x,\n\
    \    // then all the cars that are at positions x - 1, x - 2, ..., x - n, ...\
    \ will collide with\n    // this car.  This is why we need to store the number\
    \ of cars at each position.\n    //\n    // Note that the cars are infinitely\
    \ fast.  This means that if a car is at position x,\n    // then all the cars\
    \ that are at positions x + 1, x + 2, ..., x + n, ... will collide with\n    //\
    \ this car, and all the cars that are at positions x - 1, x - 2, ..., x - n, ...\
    \ will collide\n    // with this car.  This is why we need to store the number\
    \ of cars at each position.\n    //\n    // Note that the cars are infinitely\
    \ fast.  This means that if a car is at position x,\n    // then all the cars\
    \ that are at positions x + 1, x + 2,\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpik7g8tqk_test.go:44:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a hash table to store the cars that are driving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We use a hash table to store the cars that are driving right to left.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    right_to_left := make(map[int]int)\n    // We use\
    \ a hash table to store the collisions.\n    // The key is the position of the\
    \ collision, and the value is the number of collisions\n    // at that position.\n\
    \    collisions := make(map[int]int)\n    // We use a hash table to store the\
    \ cars that are driving left to right.\n    // The key is the position of the\
    \ car, and the value is the number of cars\n    // at that position.\n    left_to_right\
    \ := make(map[int]int)\n    // We use a hash table to store the cars that are\
    \ driving right to left.\n    // The key is the position of the car, and the value\
    \ is the number of cars\n    // at that position.\n    right_to_left := make(map[int]int)\n\
    \    // We use a hash table to store the collisions.\n    // The key is the position\
    \ of the collision, and the value is the number of collisions\n    // at that\
    \ position.\n    collisions := make(map[int]int)\n    // We use a hash table to\
    \ store the cars that are driving left to right.\n    // The key is the position\
    \ of the car, and the value is the number of cars\n    // at that position.\n\
    \    left_to_right := make(map[int]int)\n    // We use a hash table to store the\
    \ cars that are driving right to left.\n    // The key is the position of the\
    \ car, and the value is the number of cars\n    // at that position.\n    right_to_left\
    \ := make(map[int]int)\n    // We use a hash table to store the collisions.\n\
    \    // The key is the position of the collision, and the value is the number\
    \ of collisions\n    //\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpulsuphdl_test.go:52:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  We start with\
    \ the leftmost car at position\n    // 0, and the rightmost car at position n-1.\
    \  We then move the cars one step at a time.\n    // For each step, we check if\
    \ the car that's moving left to right is at the same\n    // position as a car\
    \ that's moving right to left.  If so, we increment the number\n    // of collisions\
    \ by the number of cars that are moving right to left at that position.\n    //\
    \ We then update the hash table to reflect the new position of the cars.\n   \
    \ //\n    // The time complexity is O(n), and the space complexity is O(n).\n\
    \    //\n    // Note that we can also use a sorted array to keep track of the\
    \ cars that are\n    // moving left to right.  The time complexity is still O(n),\
    \ but the space complexity\n    // is O(1).\n    ht := make(map[int]int)\n   \
    \ collisions := 0\n    for i := 0; i < n; i++ {\n        ht[i] = 1\n    }\n  \
    \  for i := 0; i < n; i++ {\n        collisions += ht[n-1-i]\n        ht[i] +=\
    \ 1\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp7dezdct5_test.go:60: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp7dezdct5_test.go:60:\
    \ expected '%!s(int=9)', got '%!s(int=4)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp7dezdct5_test.go:60: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp7dezdct5_test.go:60:\
    \ expected '%!s(int=64)', got '%!s(int=12)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp7dezdct5_test.go:60: expected '%!s(int=100)', got '%!s(int=15)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to store the position of the cars moving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We use a map to store the position of the cars moving right to left.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    right_to_left := make(map[int]int)\n    // We use\
    \ a map to store the number of collisions at each position.\n    // The key is\
    \ the position of the car, and the value is the number of collisions\n    // at\
    \ that position.\n    collisions := make(map[int]int)\n    // We initialize the\
    \ cars moving left to right.\n    for i := 0; i < n; i++ {\n        left_to_right[i]\
    \ = 1\n    }\n    // We initialize the cars moving right to left.\n    for i :=\
    \ 0; i < n; i++ {\n        right_to_left[-i] = 1\n    }\n    // We move the cars\
    \ left to right.\n    for i := 0; i < n; i++ {\n        // We move the car i to\
    \ the right.\n        left_to_right[i] = 0\n        left_to_right[i + 1] += 1\n\
    \        // We check if there is a collision.\n        if right_to_left[i + 1]\
    \ > 0 {\n            collisions[i + 1] += 1\n        }\n    }\n    // We move\
    \ the cars right to left.\n    for i := 0; i < n; i++ {\n        // We move the\
    \ car i to the left.\n        right_to_left[-i] = 0\n        right_to_left[-i\
    \ - 1] += 1\n        // We check if there is a collision.\n        if left_to_right[-i\
    \ - 1] > 0 {\n            collisions[-i - 1] += 1\n        }\n    }\n    // We\
    \ count the number of collisions.\n    num_collisions := 0\n    for _, v := range\
    \ collisions {\n        num_coll\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgv74u3zr_test.go:61:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a simple simulation.  We simulate the movement of\
    \ the cars\n    // and count the number of collisions.\n    //\n    // We use\
    \ a map to keep track of the positions of the cars.\n    // The key of the map\
    \ is the position of the car.  The value of the map\n    // is the number of cars\
    \ at that position.\n    //\n    // We start with the left-to-right cars at positions\
    \ 0 to n-1,\n    // and the right-to-left cars at positions n to 2n-1.\n    //\n\
    \    // We then simulate the movement of the cars.  At each step, we move\n  \
    \  // each car one step forward.  If the new position of the car is already\n\
    \    // occupied by another car, we have a collision.\n    //\n    // We repeat\
    \ this process until all cars have moved off the map.\n    //\n    // The total\
    \ number of collisions is the sum of the number of collisions\n    // at each\
    \ step.\n    //\n    // The time complexity of this algorithm is O(n^2).  The\
    \ space complexity\n    // is O(n).\n    //\n    // We can improve the time complexity\
    \ to O(n) by using a different data \nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcpcgeolx_test.go:40:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  We start by putting all the cars that\
    \ are moving left to right\n    // into the hash table.  Then, we iterate through\
    \ the cars that are moving right\n    // to left, and for each car, we check if\
    \ it's in the hash table.  If it is, we\n    // remove it from the hash table\
    \ and increment the collision count.\n    // The time complexity is O(n) and the\
    \ space complexity is O(n).\n    var collisions int = 0\n    var left_to_right_cars\
    \ map[int]bool = make(map[int]bool)\n    for i := 0; i < n; i++ {\n        left_to_right_cars[i]\
    \ = true\n    }\n    for i := 0; i < n; i++ {\n        if _, ok := left_to_right_cars[i];\
    \ ok {\n            collisions++\n            delete(left_to_right_cars, i)\n\
    \        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp6qb2jqca_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp6qb2jqca_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp6qb2jqca_test.go:54: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp6qb2jqca_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp6qb2jqca_test.go:54: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We'll use a hash table to store the cars that are moving\
    \ left to right.\n    // The key of the hash table is the position of the car.\n\
    \    // The value of the hash table is the number of cars that are at that position.\n\
    \    left_to_right := make(map[int]int)\n\n    // We'll use a hash table to store\
    \ the cars that are moving right to left.\n    // The key of the hash table is\
    \ the position of the car.\n    // The value of the hash table is the number of\
    \ cars that are at that position.\n    right_to_left := make(map[int]int)\n\n\
    \    // We'll use a hash table to store the number of collisions at each position.\n\
    \    // The key of the hash table is the position of the collision.\n    // The\
    \ value of the hash table is the number of collisions at that position.\n    collisions\
    \ := make(map[int]int)\n\n    // We'll use a hash table to store the number of\
    \ cars that are at each position.\n    // The key of the hash table is the position\
    \ of the car.\n    // The value of the hash table is the number of cars that are\
    \ at that position.\n    cars := make(map[int]int)\n\n    // We'll use a hash\
    \ table to store the number of collisions at each position.\n    // The key of\
    \ the hash table is the position of the collision.\n    // The value of the hash\
    \ table is the number of collisions at that position.\n    collisions := make(map[int]int)\n\
    \n    // We'll use a hash table to store the number of cars that are at each position.\n\
    \    // The key of the hash table is the position of the car.\n    // The value\
    \ of the hash table is the number of cars that are at that position.\n    cars\
    \ := make(map[int]int)\n\n    // We'll use a hash table to store the number of\
    \ collisions at each position.\n    // The key of the hash table is the position\
    \ of the collision.\n    // The value of the hash table is the number of collisions\
    \ at that position.\n    collisions := make(map[int]int)\n\n    // We'll use a\
    \ hash table to store the number of cars that are at each position.\n    // The\
    \ key of the hash table is the position of the\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1vkttade_test.go:54:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073214
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume n is a positive integer.\n    // Assume the cars are\
    \ numbered from 1 to n.\n    // Assume the cars moving left to right are numbered\
    \ from 1 to n.\n    // Assume the cars moving right to left are numbered from\
    \ n to 1.\n    // Assume the cars moving left to right are at positions 1 to n.\n\
    \    // Assume the cars moving right to left are at positions n to 1.\n    //\
    \ Assume the cars moving left to right are moving at speed 1.\n    // Assume the\
    \ cars moving right to left are moving at speed 1.\n    // Assume the cars moving\
    \ left to right are moving left to right.\n    // Assume the cars moving right\
    \ to left are moving right to left.\n    // Assume the cars moving left to right\
    \ are moving in the same direction.\n    // Assume the cars moving right to left\
    \ are moving in the same direction.\n    // Assume the cars moving left to right\
    \ are moving in the same speed.\n    // Assume the cars moving right to left are\
    \ moving in the same speed.\n    // Assume the cars moving left to right are moving\
    \ at the same speed.\n    // Assume the cars moving right to left are moving at\
    \ the same speed.\n    // Assume the cars moving left to right are moving at the\
    \ same speed.\n    // Assume the cars moving right to left are moving at the same\
    \ speed.\n    // Assume the cars moving left to right are moving at the same speed.\n\
    \    // Assume the cars moving right to left are moving at the same speed.\n \
    \   // Assume the cars moving left to right are moving at the same speed.\n  \
    \  // Assume the cars moving right to left are moving at the same speed.\n   \
    \ // Assume the cars moving left to right are moving at the same speed.\n    //\
    \ Assume the cars moving right to left are moving at the same speed.\n    // Assume\
    \ the cars moving left to right are moving at the same speed.\n    // Assume the\
    \ cars moving right to left are moving at the same speed.\n    // Assume the cars\
    \ moving left to right are moving at the same speed.\n    // Assume the cars moving\
    \ right to left are moving at the same speed.\n    // Assume the cars moving left\
    \ to right are moving at the same speed.\n    // Assume\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpganttiux_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // A car that's moving left to right is represented by a positive\
    \ number.\n    // A car that's moving right to left is represented by a negative\
    \ number.\n    // The absolute value of the number represents the position of\
    \ the car.\n    // The sign of the number represents the direction of the car.\n\
    \    // The cars are sorted in ascending order.\n    // For example, the array\
    \ [1, -2, 3, -4] represents the following:\n    // car 1 is moving left to right,\
    \ and is at position 1.\n    // car 2 is moving right to left, and is at position\
    \ 2.\n    // car 3 is moving left to right, and is at position 3.\n    // car\
    \ 4 is moving right to left, and is at position 4.\n    // The cars are very far\
    \ from each other, so the array is sorted.\n    // The cars are moving in the\
    \ same speed, so the array is sorted.\n    // The cars are infinitely sturdy and\
    \ strong, so the array is sorted.\n    // The cars are moving in the same speed,\
    \ so the array is sorted.\n    // The cars are moving in the same speed, so the\
    \ array is sorted.\n    // The cars are moving in the same speed, so the array\
    \ is sorted.\n    // The cars are moving in the same speed, so the array is sorted.\n\
    \    // The cars are moving in the same speed, so the array is sorted.\n    //\
    \ The cars are moving in the same speed, so the array is sorted.\n    // The cars\
    \ are moving in the same speed, so the array is sorted.\n    // The cars are moving\
    \ in the same speed, so the array is sorted.\n    // The cars are moving in the\
    \ same speed, so the array is sorted.\n    // The cars are moving in the same\
    \ speed, so the array is sorted.\n    // The cars are moving in the same speed,\
    \ so the array is sorted.\n    // The cars are moving in the same speed, so the\
    \ array is sorted.\n    // The cars are moving in the same speed, so the array\
    \ is sorted.\n    // The cars are moving in the same speed, so the array is sorted.\n\
    \    // The cars are moving in the same speed, so the array is sorted.\n    //\
    \ The cars are moving in the same speed, so the array is sorted.\n   \nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv3ihpuzb_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073215
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a brute force solution.\n    // For each car that's\
    \ moving left to right, check if it collides with any car\n    // that's moving\
    \ right to left.\n    // The time complexity is O(n^2).\n    // The space complexity\
    \ is O(1).\n    var collisions int = 0\n    for i := 0; i < n; i++ {\n       \
    \ for j := 0; j < n; j++ {\n            if i < j {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0u_2fyuf_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0u_2fyuf_test.go:50:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0u_2fyuf_test.go:50: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0u_2fyuf_test.go:50:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0u_2fyuf_test.go:50: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the left-to-right cars are numbered from 0 to\
    \ n-1, and the\n    // right-to-left cars are numbered from n to 2n-1.\n    //\
    \ We'll use a map to keep track of the positions of the cars.\n    // The key\
    \ is the car number, and the value is the position.\n    // Initially, the left-to-right\
    \ cars are at positions 0 to n-1, and the\n    // right-to-left cars are at positions\
    \ 2n-1 to n.\n    car_positions := make(map[int]int)\n    for i := 0; i < n; i++\
    \ {\n        car_positions[i] = i\n        car_positions[i+n] = 2*n - 1 - i\n\
    \    }\n    // We'll use a map to keep track of the number of collisions that\
    \ have happened\n    // at each position.\n    collisions := make(map[int]int)\n\
    \    // We'll use a map to keep track of the number of cars that have passed each\
    \ position.\n    cars_passed := make(map[int]int)\n    // We'll use a map to keep\
    \ track of the number of cars that have passed each position\n    // in the opposite\
    \ direction.\n    cars_passed_opposite := make(map[int]int)\n    // We'll use\
    \ a map to keep track of the number of cars that have passed each position\n \
    \   // in the same direction.\n    cars_passed_same := make(map[int]int)\n   \
    \ // We'll use a map to keep track of the number of cars that have passed each\
    \ position\n    // in the same direction and have collided with a car in the opposite\
    \ direction.\n    cars_passed_same_collided := make(map[int]int)\n    // We'll\
    \ use a map to keep track of the number of cars that have passed each position\n\
    \    // in the opposite direction and have collided with a car in the same direction.\n\
    \    cars_passed_opposite_collided := make(map[int]int)\n    // We'll use a map\
    \ to keep track of the number of cars that have collided with a car\n    // in\
    \ the opposite direction.\n    cars_collided := make(map[int]\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjbkaagif_test.go:47:35: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a very simple problem.  We just need to count the\
    \ number of cars\n    // that are moving in the same direction.  The number of\
    \ cars moving in the\n    // same direction is the number of collisions.\n   \
    \ return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpxn3k8481_test.go:40: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpxn3k8481_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpxn3k8481_test.go:40: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpxn3k8481_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpxn3k8481_test.go:40: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 0 to n-1.\n    //\
    \ Assume that the cars moving left to right are numbered 0 to n-1.\n    // Assume\
    \ that the cars moving right to left are numbered n to 2n-1.\n    // Assume that\
    \ the cars moving left to right start at position -1.\n    // Assume that the\
    \ cars moving right to left start at position 2n.\n    // Assume that the cars\
    \ move at a speed of 1.\n    // Assume that the cars move in discrete steps.\n\
    \    // Assume that the cars move in a synchronized fashion.\n    // Assume that\
    \ the cars move in a synchronized fashion.\n    // Assume that the cars move in\
    \ a synchronized fashion.\n    // Assume that the cars move in a synchronized\
    \ fashion.\n    // Assume that the cars move in a synchronized fashion.\n    //\
    \ Assume that the cars move in a synchronized fashion.\n    // Assume that the\
    \ cars move in a synchronized fashion.\n    // Assume that the cars move in a\
    \ synchronized fashion.\n    // Assume that the cars move in a synchronized fashion.\n\
    \    // Assume that the cars move in a synchronized fashion.\n    // Assume that\
    \ the cars move in a synchronized fashion.\n    // Assume that the cars move in\
    \ a synchronized fashion.\n    // Assume that the cars move in a synchronized\
    \ fashion.\n    // Assume that the cars move in a synchronized fashion.\n    //\
    \ Assume that the cars move in a synchronized fashion.\n    // Assume that the\
    \ cars move in a synchronized fashion.\n    // Assume that the cars move in a\
    \ synchronized fashion.\n    // Assume that the cars move in a synchronized fashion.\n\
    \    // Assume that the cars move in a synchronized fashion.\n    // Assume that\
    \ the cars move in a synchronized fashion.\n    // Assume that the cars move in\
    \ a synchronized fashion.\n    // Assume that the cars move in a synchronized\
    \ fashion.\n    // Assume that the cars move in a synchronized fashion.\n    //\
    \ Assume that the cars move in a synchronized fashion.\n    // Assume that the\
    \ cars move in a synchronized fashion.\n    // Assume that the cars move in a\
    \ synchronized fashion.\n    // Assume that the cars move in a synchronized fashion.\n\
    \    // Assume that the cars move in a synchronized\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp677ua9b9_test.go:52:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 0 {\n        return 0\n    }\n    return n - 1\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmprfzl79zj_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmprfzl79zj_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmprfzl79zj_test.go:40: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmprfzl79zj_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmprfzl79zj_test.go:40: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the cars\
    \ that are moving\n    // left to right.  Then, for each car that's moving right\
    \ to left, we can\n    // do a binary search to see if there's a car that's moving\
    \ left to right\n    // that's in the same position.  If so, we have a collision.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers.\
    \  The slice\n    // is sorted in ascending order.  The binary search tree is\
    \ implemented as\n    // a slice of integers because slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \    //\n    // The binary search tree is implemented as a slice of integers because\n\
    \    // slices are faster than maps.\n    //\n    // The binary search tree is\
    \ implemented as a slice of integers because\n    // slices are faster than maps.\n\
    \   \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjm6y01vq_test.go:68:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars moving\n    // left to right.  The tree is sorted by the position of\
    \ the cars.\n    // We insert the cars moving left to right into the tree.  When\
    \ we insert a car,\n    // we check if there are any cars moving right to left\
    \ that are to the left of\n    // the car we're inserting.  If so, we increment\
    \ the collision count.\n    // We do the same thing for the cars moving right\
    \ to left.\n    // The time complexity is O(n log n).\n    collisions := 0\n \
    \   left_to_right_tree := new(BinarySearchTree)\n    right_to_left_tree := new(BinarySearchTree)\n\
    \    for i := 0; i < n; i++ {\n        left_to_right_tree.Insert(i)\n        right_to_left_tree.Insert(-i)\n\
    \        collisions += left_to_right_tree.CountLessThan(-i)\n        collisions\
    \ += right_to_left_tree.CountLessThan(i)\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybztkf0m_test.go:25:31: undefined: BinarySearchTree

    /tmp/tmpybztkf0m_test.go:26:31: undefined: BinarySearchTree

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars.\n    // The cars are numbered from 1 to n.\n    // The cars moving\
    \ left to right are inserted into the tree in the order\n    // of their numbers.\
    \  The cars moving right to left are deleted from the tree\n    // in the order\
    \ of their numbers.  The number of collisions is the number of\n    // cars that\
    \ are deleted from the tree.\n    //\n    // The tree is implemented as an array.\
    \  The array is indexed by the car number.\n    // The array element is a \nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuqpa2ovg_test.go:26:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars that\
    \ are moving left to right are numbered from 0 to n/2-1.\n    // The cars that\
    \ are moving right to left are numbered from n/2 to n-1.\n    // The cars that\
    \ are moving left to right are indexed by the variable i.\n    // The cars that\
    \ are moving right to left are indexed by the variable j.\n    // The variable\
    \ i is incremented from 0 to n/2-1.\n    // The variable j is decremented from\
    \ n-1 to n/2.\n    // The variable collision_count is incremented whenever i==j.\n\
    \    collision_count := 0\n    for i, j := 0, n-1; i < n/2; i, j = i+1, j-1 {\n\
    \        if i == j {\n            collision_count++\n        }\n    }\n    return\
    \ collision_count\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt1oq9oj6_test.go:51: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt1oq9oj6_test.go:51:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt1oq9oj6_test.go:51: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt1oq9oj6_test.go:51:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt1oq9oj6_test.go:51: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are currently\
    \ moving left to right.\n    // The key is the position of the car.  The value\
    \ is the number of cars at that position.\n    // We use a map to keep track of\
    \ the cars that are currently moving right to left.\n    // The key is the position\
    \ of the car.  The value is the number of cars at that position.\n    // We start\
    \ with n cars moving left to right, and n cars moving right to left.\n    // We\
    \ keep track of the number of collisions.\n    // We keep track of the current\
    \ time.\n    // We keep track of the current position of the leftmost car moving\
    \ left to right.\n    // We keep track of the current position of the rightmost\
    \ car moving right to left.\n    // We keep track of the current position of the\
    \ rightmost car moving left to right.\n    // We keep track of the current position\
    \ of the leftmost car moving right to left.\n    // We keep track of the current\
    \ position of the leftmost car moving left to right.\n    // We keep track of\
    \ the current position of the rightmost car moving right to left.\n    // We keep\
    \ track of the current position of the rightmost car moving left to right.\n \
    \   // We keep track of the current position of the leftmost car moving right\
    \ to left.\n    // We keep track of the current position of the leftmost car moving\
    \ left to right.\n    // We keep track of the current position of the rightmost\
    \ car moving right to left.\n    // We keep track of the current position of the\
    \ rightmost car moving left to right.\n    // We keep track of the current position\
    \ of the leftmost car moving right to left.\n    // We keep track of the current\
    \ position of the leftmost car moving left to right.\n    // We keep track of\
    \ the current position of the rightmost car moving right to left.\n    // We keep\
    \ track of the current position of the rightmost car moving left to right.\n \
    \   // We keep track of the current position of the leftmost car moving right\
    \ to left.\n    // We keep track of the current position of the leftmost car moving\
    \ left to right.\n    // We keep track of the current position of the rightmost\
    \ car moving right to left.\n    // We keep track of the current position of the\
    \ rightmost car moving left to\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpbvkivrnw_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We assume that the cars are numbered from 0 to n-1.\n   \
    \ // We assume that the cars moving left to right are numbered from 0 to n/2-1.\n\
    \    // We assume that the cars moving right to left are numbered from n/2 to\
    \ n-1.\n    // We assume that the cars moving left to right start at position\
    \ 0.\n    // We assume that the cars moving right to left start at position n.\n\
    \    // We assume that the cars moving left to right move at speed 1.\n    //\
    \ We assume that the cars moving right to left move at speed -1.\n    // We assume\
    \ that the cars moving left to right are indexed by i.\n    // We assume that\
    \ the cars moving right to left are indexed by j.\n    // We assume that the cars\
    \ moving left to right are indexed by i.\n    // We assume that the cars moving\
    \ right to left are indexed by j.\n    // We assume that the cars moving left\
    \ to right are indexed by i.\n    // We assume that the cars moving right to left\
    \ are indexed by j.\n    // We assume that the cars moving left to right are indexed\
    \ by i.\n    // We assume that the cars moving right to left are indexed by j.\n\
    \    // We assume that the cars moving left to right are indexed by i.\n    //\
    \ We assume that the cars moving right to left are indexed by j.\n    // We assume\
    \ that the cars moving left to right are indexed by i.\n    // We assume that\
    \ the cars moving right to left are indexed by j.\n    // We assume that the cars\
    \ moving left to right are indexed by i.\n    // We assume that the cars moving\
    \ right to left are indexed by j.\n    // We assume that the cars moving left\
    \ to right are indexed by i.\n    // We assume that the cars moving right to left\
    \ are indexed by j.\n    // We assume that the cars moving left to right are indexed\
    \ by i.\n    // We assume that the cars moving right to left are indexed by j.\n\
    \    // We assume that the cars moving left to right are indexed by i.\n    //\
    \ We assume that the cars moving right to left are indexed by j.\n    // We assume\
    \ that the cars moving left to right are indexed by i.\n    // We assume that\
    \ the cars moving right to left are indexed by j.\n    // We assume that\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp92e5i90s_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  We start with\
    \ an empty hash table.\n    // We then iterate through the cars that are moving\
    \ right to left.  For each\n    // car, we check if there is a car moving left\
    \ to right at the same position.\n    // If there is, we increment the collision\
    \ count.  If there is not, we add\n    // the car to the hash table.\n    // The\
    \ time complexity is O(n), and the space complexity is O(n).\n    ht := make(map[int]int)\n\
    \    collision_count := 0\n    for i := 0; i < n; i++ {\n        if _, ok := ht[i];\
    \ ok {\n            collision_count++\n        } else {\n            ht[i] = 1\n\
    \        }\n    }\n    return collision_count\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphlmbn5yn_test.go:54: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphlmbn5yn_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphlmbn5yn_test.go:54: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphlmbn5yn_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphlmbn5yn_test.go:54: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to simulate the race.  We will have two queues,\
    \ one for cars\n    // moving left to right, and one for cars moving right to\
    \ left.  We will\n    // simulate the race by moving cars from one queue to the\
    \ other.  We will\n    // keep track of the number of collisions.\n    //\n  \
    \  // We will use a slice to represent the queue.  The slice will be of size n.\n\
    \    // Each element of the slice will be a \nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpig28mcqc_test.go:24:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to track the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    left_to_right := make(map[int]int)\n    // We use\
    \ a map to track the cars that are moving right to left.\n    // The key is the\
    \ position of the car, and the value is the number of cars\n    // at that position.\n\
    \    right_to_left := make(map[int]int)\n    // We use a variable to track the\
    \ number of collisions.\n    collisions := 0\n    // We use a variable to track\
    \ the position of the leftmost car that is moving\n    // left to right.\n   \
    \ leftmost_left_to_right := 0\n    // We use a variable to track the position\
    \ of the rightmost car that is moving\n    // right to left.\n    rightmost_right_to_left\
    \ := 0\n    // We use a variable to track the position of the leftmost car that\
    \ is moving\n    // right to left.\n    leftmost_right_to_left := 0\n    // We\
    \ use a variable to track the position of the rightmost car that is moving\n \
    \   // left to right.\n    rightmost_left_to_right := 0\n    // We use a variable\
    \ to track the number of cars that are moving left to right.\n    num_left_to_right\
    \ := 0\n    // We use a variable to track the number of cars that are moving right\
    \ to left.\n    num_right_to_left := 0\n    // We use a variable to track the\
    \ number of cars that are moving left to right\n    // and have collided.\n  \
    \  num_left_to_right_collided := 0\n    // We use a variable to track the number\
    \ of cars that are moving right to left\n    // and have collided.\n    num_right_to_left_collided\
    \ := 0\n    // We use a variable to track the number of cars that are moving left\
    \ to right\n    // and have not collided.\n    num_left_to_right_not_collided\
    \ := 0\n    // We use a variable to track the number of cars that are moving right\
    \ to left\n    // and have not collided.\n    num_right_to\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxnrelo0d_test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  The hash table\
    \ is initialized with\n    // n entries, each with a key of 0 and a value of 1.\n\
    \    //\n    // Then, we iterate through the cars that are moving right to left.\
    \  For each\n    // car, we look up the hash table to see if there are any cars\
    \ at the same\n    // position.  If so, we increment the collision count.  We\
    \ then decrement the\n    // value of the hash table entry.  If the value becomes\
    \ 0, we remove the entry.\n    //\n    // This algorithm runs in O(n) time and\
    \ O(n) space.\n    collisions := 0\n    left_to_right := make(map[int]int)\n \
    \   for i := 0; i < n; i++ {\n        left_to_right[0]++\n    }\n    for i :=\
    \ 0; i < n; i++ {\n        if left_to_right[i] > 0 {\n            collisions +=\
    \ left_to_right[i]\n            left_to_right[i]--\n            if left_to_right[i]\
    \ == 0 {\n                delete(left_to_right, i)\n            }\n        }\n\
    \    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9b7bek0v_test.go:62: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9b7bek0v_test.go:62:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9b7bek0v_test.go:62: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9b7bek0v_test.go:62:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9b7bek0v_test.go:62: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We'll use a hash table to keep track of the cars that are\
    \ moving left to right.\n    // The key is the car's position, and the value is\
    \ the car's speed.\n    // We'll use a hash table to keep track of the cars that\
    \ are moving right to left.\n    // The key is the car's position, and the value\
    \ is the car's speed.\n    // We'll use a hash table to keep track of the cars\
    \ that are moving right to left.\n    // The key is the car's position, and the\
    \ value is the car's speed.\n    // We'll use a hash table to keep track of the\
    \ cars that are moving right to left.\n    // The key is the car's position, and\
    \ the value is the car's speed.\n    // We'll use a hash table to keep track of\
    \ the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash table to keep track\
    \ of the cars that are moving right to left.\n    // The key is the car's position,\
    \ and the value is the car's speed.\n    // We'll use a hash\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc74xj1rb_test.go:42:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073216
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    var collisions int = 0\n    for i := 0; i < n; i++ {\n     \
    \   for j := 0; j < n; j++ {\n            if i < j {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_2i5rpd0_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_2i5rpd0_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_2i5rpd0_test.go:45: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_2i5rpd0_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_2i5rpd0_test.go:45: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a simple simulation.  We imagine that the cars are\
    \ moving in a\n    // straight line.  We imagine that the cars are moving at the\
    \ same speed.\n    // We imagine that the cars are infinitely strong and sturdy.\n\
    \    // We imagine that the cars are moving in opposite directions.\n    // We\
    \ imagine that the cars are moving in a straight line.\n    // We imagine that\
    \ the cars are moving at the same speed.\n    // We imagine that the cars are\
    \ infinitely strong and sturdy.\n    // We imagine that the cars are moving in\
    \ opposite directions.\n    // We imagine that the cars are moving in a straight\
    \ line.\n    // We imagine that the cars are moving at the same speed.\n    //\
    \ We imagine that the cars are infinitely strong and sturdy.\n    // We imagine\
    \ that the cars are moving in opposite directions.\n    // We imagine that the\
    \ cars are moving in a straight line.\n    // We imagine that the cars are moving\
    \ at the same speed.\n    // We imagine that the cars are infinitely strong and\
    \ sturdy.\n    // We imagine that the cars are moving in opposite directions.\n\
    \    // We imagine that the cars are moving in a straight line.\n    // We imagine\
    \ that the cars are moving at the same speed.\n    // We imagine that the cars\
    \ are infinitely strong and sturdy.\n    // We imagine that the cars are moving\
    \ in opposite directions.\n    // We imagine that the cars are moving in a straight\
    \ line.\n    // We imagine that the cars are moving at the same speed.\n    //\
    \ We imagine that the cars are infinitely strong and sturdy.\n    // We imagine\
    \ that the cars are moving in opposite directions.\n    // We imagine that the\
    \ cars are moving in a straight line.\n    // We imagine that the cars are moving\
    \ at the same speed.\n    // We imagine that the cars are infinitely strong and\
    \ sturdy.\n    // We imagine that the cars are moving in opposite directions.\n\
    \    // We imagine that the cars are moving in a straight line.\n    // We imagine\
    \ that the cars are moving at the same speed.\n    // We imagine that the cars\
    \ are infinitely strong and sturdy.\n    // We imagine that the cars are moving\
    \ in opposite directions.\n    // We imagine that the cars are moving in a straight\
    \ line.\n    // We imagine that the cars are moving at the same speed.\n    //\
    \ We imagine that the cars are infinitely\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6s8j0nnq_test.go:52:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered 0 to n-1.  We will store the cars in\
    \ a map.\n    // The key is the car number, and the value is the car's position.\n\
    \    // Initially, the cars are far apart, so we will set the position of the\n\
    \    // cars to be their number.\n    cars := make(map[int]int)\n    for i :=\
    \ 0; i < n; i++ {\n        cars[i] = i\n    }\n\n    // Now, we will simulate\
    \ the cars moving.  We will do this by iterating\n    // through the cars, and\
    \ moving each car one step.  We will do this n times.\n    for i := 0; i < n;\
    \ i++ {\n        // We will iterate through the cars in order.\n        for j\
    \ := 0; j < n; j++ {\n            // We will move the car one step.\n        \
    \    cars[j] = cars[j] + 1\n        }\n    }\n\n    // Now, we will count the\
    \ number of collisions.  We will do this by iterating\n    // through the cars,\
    \ and checking if any two cars have the same position.\n    collisions := 0\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    if cars[i] == cars[j] {\n                collisions++\n            }\n  \
    \      }\n    }\n\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpz1o8nr02_test.go:67: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpz1o8nr02_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpz1o8nr02_test.go:67: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpz1o8nr02_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpz1o8nr02_test.go:67: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  For each car that's moving right to\
    \ left, we check if there's\n    // a car moving left to right that has the same\
    \ position.  If there is, we\n    // increment the collision count.\n    // We\
    \ use a map because it's a hash table.\n    // The key is the position of the\
    \ car moving left to right.\n    // The value is the number of cars moving left\
    \ to right that are at that position.\n    // The value is needed because we need\
    \ to know how many cars are at that position.\n    // For example, if there are\
    \ two cars moving left to right at position 1,\n    // and one car moving right\
    \ to left at position 1, we need to increment the\n    // collision count by two.\n\
    \    // We use a map because it's a hash table.\n    // The key is the position\
    \ of the car moving left to right.\n    // The value is the number of cars moving\
    \ left to right that are at that position.\n    // The value is needed because\
    \ we need to know how many cars are at that position.\n    // For example, if\
    \ there are two cars moving left to right at position 1,\n    // and one car moving\
    \ right to left at position 1, we need to increment the\n    // collision count\
    \ by two.\n    m := make(map[int]int)\n    // We start by putting all the cars\
    \ moving left to right into the hash table.\n    for i := 0; i < n; i++ {\n  \
    \      m[i] = 1\n    }\n    // We then iterate through the cars moving right to\
    \ left.\n    // For each car moving right to left, we check if there's a car moving\
    \ left to right\n    // at the same position.  If there is, we increment the collision\
    \ count.\n    collision_count := 0\n    for i := 0; i < n; i++ {\n        if m[i]\
    \ > 0 {\n            collision_count += m[i]\n        }\n    }\n    return collision_count\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_s2ul6zg_test.go:69: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_s2ul6zg_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_s2ul6zg_test.go:69: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_s2ul6zg_test.go:69:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_s2ul6zg_test.go:69: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a hash table to keep track of the cars that are moving\
    \ left to right.\n    // The key is the car's position, and the value is the number\
    \ of cars at that position.\n    // We use a hash table to keep track of the cars\
    \ that are moving right to left.\n    // The key is the car's position, and the\
    \ value is the number of cars at that position.\n    // We iterate through the\
    \ cars that are moving left to right.\n    // For each car, we check if there\
    \ are any cars that are moving right to left\n    // that are at the same position.\
    \  If so, we increment the number of collisions.\n    // We iterate through the\
    \ cars that are moving right to left.\n    // For each car, we check if there\
    \ are any cars that are moving left to right\n    // that are at the same position.\
    \  If so, we increment the number of collisions.\n    // We return the number\
    \ of collisions.\n    //\n    // Time complexity: O(n)\n    // Space complexity:\
    \ O(n)\n    left_to_right := make(map[int]int)\n    right_to_left := make(map[int]int)\n\
    \    collisions := 0\n    for i := 0; i < n; i++ {\n        left_to_right[i] =\
    \ 1\n        right_to_left[i] = 1\n    }\n    for i := 0; i < n; i++ {\n     \
    \   if right_to_left[i] > 0 {\n            collisions += left_to_right[i]\n  \
    \      }\n    }\n    for i := 0; i < n; i++ {\n        if left_to_right[i] > 0\
    \ {\n            collisions += right_to_left[i]\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__1\
    \ (0.00s)\n        tmp_tz32_oe_test.go:68: expected '%!s(int=9)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__2 (0.00s)\n        tmp_tz32_oe_test.go:68:\
    \ expected '%!s(int=16)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__3\
    \ (0.00s)\n        tmp_tz32_oe_test.go:68: expected '%!s(int=64)', got '%!s(int=16)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__4 (0.00s)\n        tmp_tz32_oe_test.go:68:\
    \ expected '%!s(int=100)', got '%!s(int=20)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 0 to n-1.\n    //\
    \ Assume that the cars moving left to right are numbered from 0 to n/2-1.\n  \
    \  // Assume that the cars moving right to left are numbered from n/2 to n-1.\n\
    \    // Assume that the cars moving left to right are at positions 0, 1, 2, ...,\
    \ n/2-1.\n    // Assume that the cars moving right to left are at positions n-1,\
    \ n-2, n-3, ..., n/2.\n    // Assume that the cars moving left to right move at\
    \ speed 1.\n    // Assume that the cars moving right to left move at speed -1.\n\
    \    // Assume that the cars moving left to right start at time 0.\n    // Assume\
    \ that the cars moving right to left start at time 0.\n    // Assume that the\
    \ cars moving left to right end at time n/2-1.\n    // Assume that the cars moving\
    \ right to left end at time n-1.\n    // Assume that the cars moving left to right\
    \ are at positions 0, 1, 2, ..., n/2-1 at time 0.\n    // Assume that the cars\
    \ moving right to left are at positions n-1, n-2, n-3, ..., n/2 at time 0.\n \
    \   // Assume that the cars moving left to right are at positions 1, 2, 3, ...,\
    \ n/2-1 at time 1.\n    // Assume that the cars moving right to left are at positions\
    \ n-2, n-3, n-4, ..., n/2 at time 1.\n    // Assume that the cars moving left\
    \ to right are at positions 2, 3, 4, ..., n/2-1 at time 2.\n    // Assume that\
    \ the cars moving right to left are at positions n-3, n-4, n-5, ..., n/2 at time\
    \ 2.\n    // Assume that the cars moving left to right are at positions 3, 4,\
    \ 5, ..., n/2-1 at time 3.\n    // Assume that the cars moving right to left are\
    \ at positions n-4, n-5, n-6, ..., n/2 at time 3.\n    // Assume that\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmploeaepo2_test.go:37:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 0 to n-1.\n    //\
    \ Assume that the cars moving left to right are numbered 0 to n-1.\n    // Assume\
    \ that the cars moving right to left are numbered n to 2n-1.\n    // Assume that\
    \ the cars moving left to right start at position 0.\n    // Assume that the cars\
    \ moving right to left start at position 2n.\n    // Assume that the cars moving\
    \ left to right move at speed 1.\n    // Assume that the cars moving right to\
    \ left move at speed 1.\n    // Assume that the cars moving left to right have\
    \ a trajectory of moving\n    // left to right.\n    // Assume that the cars moving\
    \ right to left have a trajectory of moving\n    // right to left.\n    // Assume\
    \ that the cars moving left to right have a trajectory of moving\n    // left\
    \ to right.\n    // Assume that the cars moving right to left have a trajectory\
    \ of moving\n    // right to left.\n    // Assume that the cars moving left to\
    \ right have a trajectory of moving\n    // left to right.\n    // Assume that\
    \ the cars moving right to left have a trajectory of moving\n    // right to left.\n\
    \    // Assume that the cars moving left to right have a trajectory of moving\n\
    \    // left to right.\n    // Assume that the cars moving right to left have\
    \ a trajectory of moving\n    // right to left.\n    // Assume that the cars moving\
    \ left to right have a trajectory of moving\n    // left to right.\n    // Assume\
    \ that the cars moving right to left have a trajectory of moving\n    // right\
    \ to left.\n    // Assume that the cars moving left to right have a trajectory\
    \ of moving\n    // left to right.\n    // Assume that the cars moving right to\
    \ left have a trajectory of moving\n    // right to left.\n    // Assume that\
    \ the cars moving left to right have a trajectory of moving\n    // left to right.\n\
    \    // Assume that the cars moving right to left have a trajectory of moving\n\
    \    // right to left.\n    // Assume that the cars moving left to right have\
    \ a trajectory of moving\n    // left to right.\n    // Assume that the cars moving\
    \ right to left have a trajectory of moving\n    // right to left.\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpipen4tgd_test.go:57:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the speed of the\
    \ car.\n    // We use a map to store the cars that are moving left to right.\n\
    \    // The key is the position of the car, and the\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3bhn11lt_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a very simple problem.  We can just simulate the\
    \ race.\n    // We can use a map to keep track of the cars.  The key is the position\n\
    \    // of the car.  The value is the number of cars at that position.\n    //\
    \ We can use a slice to keep track of the cars' positions.\n    // We can use\
    \ a slice to keep track of the cars' speeds.\n    // We can use a slice to keep\
    \ track of the cars' directions.\n    // We can use a slice to keep track of the\
    \ cars' collisions.\n    // We can use a slice to keep track of the cars' positions.\n\
    \    // We can use a slice to keep track of the cars' positions.\n    // We can\
    \ use a slice to keep track of the cars' positions.\n    // We can use a slice\
    \ to keep track of the cars' positions.\n    // We can use a slice to keep track\
    \ of the cars' positions.\n    // We can use a slice to keep track of the cars'\
    \ positions.\n    // We can use a slice to keep track of the cars' positions.\n\
    \    // We can use a slice to keep track of the cars' positions.\n    // We can\
    \ use a slice to keep track of the cars' positions.\n    // We can use a slice\
    \ to keep track of the cars' positions.\n    // We can use a slice to keep track\
    \ of the cars' positions.\n    // We can use a slice to keep track of the cars'\
    \ positions.\n    // We can use a slice to keep track of the cars' positions.\n\
    \    // We can use a slice to keep track of the cars' positions.\n    // We can\
    \ use a slice to keep track of the cars' positions.\n    // We can use a slice\
    \ to keep track of the cars' positions.\n    // We can use a slice to keep track\
    \ of the cars' positions.\n    // We can use a slice to keep track of the cars'\
    \ positions.\n    // We can use a slice to keep track of the cars' positions.\n\
    \    // We can use a slice to keep track of the cars' positions.\n    // We can\
    \ use a slice to keep track of the cars' positions.\n    // We can use a slice\
    \ to keep track of the cars' positions.\n    // We can use a slice to keep track\
    \ of\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvyh9oh5y_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We'll use a map to keep track of the cars.  The key will\
    \ be the position of the car,\n    // and the value will be the direction of the\
    \ car.\n    cars := make(map[int]int)\n\n    // We'll use a variable to keep track\
    \ of the number of collisions.\n    collisions := 0\n\n    // We'll use a variable\
    \ to keep track of the current time.\n    t := 0\n\n    // We'll use a variable\
    \ to keep track of the current position of the car.\n    pos := 0\n\n    // We'll\
    \ use a variable to keep track of the current direction of the car.\n    dir :=\
    \ 0\n\n    // We'll use a variable to keep track of the current car.\n    car\
    \ := 0\n\n    // We'll use a variable to keep track of the current car's direction.\n\
    \    car_dir := 0\n\n    // We'll use a variable to keep track of the current\
    \ car's position.\n    car_pos := 0\n\n    // We'll use a variable to keep track\
    \ of the current car's previous position.\n    car_prev_pos := 0\n\n    // We'll\
    \ use a variable to keep track of the current car's previous direction.\n    car_prev_dir\
    \ := 0\n\n    // We'll use a variable to keep track of the current car's previous\
    \ position.\n    car_prev_pos := 0\n\n    // We'll use a variable to keep track\
    \ of the current car's previous direction.\n    car_prev_dir := 0\n\n    // We'll\
    \ use a variable to keep track of the current car's previous position.\n    car_prev_pos\
    \ := 0\n\n    // We'll use a variable to keep track of the current car's previous\
    \ direction.\n    car_prev_dir := 0\n\n    // We'll use a variable to keep track\
    \ of the current car's previous position.\n    car_prev_pos := 0\n\n    // We'll\
    \ use a variable to keep track of the current car's previous direction.\n    car_prev_dir\
    \ := 0\n\n    // We'll use a variable to keep track of the current car's previous\
    \ position.\n    car_prev_pos := 0\n\n    // We'll use a variable to keep track\
    \ of the current car's previous direction.\n    car_prev_dir := 0\n\n    // We'll\
    \ use a variable to keep track of the current car's previous position\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmanvru9l_test.go:73:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars moving\
    \ left to right are numbered from 0 to n-1.\n    // The cars moving right to left\
    \ are numbered from n to 2n-1.\n    // The cars are initially very far from each\
    \ other.\n    // The cars move at the same speed.\n    // The cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    // in their trajectory\
    \ as if they did not collide.\n    // This function outputs the number of such\
    \ collisions.\n    //\n    // The cars moving left to right are numbered from\
    \ 0 to n-1.\n    // The cars moving right to left are numbered from n to 2n-1.\n\
    \    // The cars are initially very far from each other.\n    // The cars move\
    \ at the same speed.\n    // The cars are infinitely sturdy and strong; as a result,\
    \ they continue moving\n    // in their trajectory as if they did not collide.\n\
    \    // This function outputs the number of such collisions.\n    //\n    // The\
    \ cars moving left to right are numbered from 0 to n-1.\n    // The cars moving\
    \ right to left are numbered from n to 2n-1.\n    // The cars are initially very\
    \ far from each other.\n    // The cars move at the same speed.\n    // The cars\
    \ are infinitely sturdy and strong; as a result, they continue moving\n    //\
    \ in their trajectory as if they did not collide.\n    // This function outputs\
    \ the number of such collisions.\n    //\n    // The cars moving left to right\
    \ are numbered from 0 to n-1.\n    // The cars moving right to left are numbered\
    \ from n to 2n-1.\n    // The cars are initially very far from each other.\n \
    \   // The cars move at the same speed.\n    // The cars are infinitely sturdy\
    \ and strong; as a result, they continue moving\n    // in their trajectory as\
    \ if they did not collide.\n    // This function outputs the number of such collisions.\n\
    \    //\n    // The cars moving left to right are numbered from 0 to n-1.\n  \
    \  // The cars moving right to left are numbered from n to 2n-1.\n    // The cars\
    \ are initially very far from each other.\n    // The cars move at the same speed.\n\
    \    // The cars are infinitely sturdy and\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpswmc4ous_test.go:55:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to store the position of each car.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    // We start with the cars moving left to right.\
    \  We iterate through the cars\n    // and add them to the map.  Then we iterate\
    \ through the cars moving right to left,\n    // and add them to the map.  If\
    \ a car is already in the map, we increment the\n    // value by 1.  The number\
    \ of collisions is the number of cars that are in the map\n    // with a value\
    \ of 2.\n    // We can do this in O(n) time and O(n) space.\n    m := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        m[i] = 1\n    }\n    for i := 0; i < n;\
    \ i++ {\n        if m[i] == 1 {\n            m[i] = 2\n        } else {\n    \
    \        m[i] = 1\n        }\n    }\n    collisions := 0\n    for _, v := range\
    \ m {\n        if v == 2 {\n            collisions++\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp_dbrwn8u_test.go:63: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp_dbrwn8u_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp_dbrwn8u_test.go:63: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp_dbrwn8u_test.go:63:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp_dbrwn8u_test.go:63: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // and the number of cars that are moving right to left.\n\
    \    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmprhv8tbbh_test.go:39: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmprhv8tbbh_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmprhv8tbbh_test.go:39: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmprhv8tbbh_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmprhv8tbbh_test.go:39: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 0 to n-1.\n    //\
    \ Assume that the cars moving left to right are numbered 0 to n-1,\n    // and\
    \ the cars moving right to left are numbered n to 2n-1.\n    // Assume that the\
    \ cars moving left to right start at position 0,\n    // and the cars moving right\
    \ to left start at position 2n-1.\n    // Assume that the cars moving left to\
    \ right move at speed 1,\n    // and the cars moving right to left move at speed\
    \ -1.\n    // Assume that the cars moving left to right are indexed by i,\n  \
    \  // and the cars moving right to left are indexed by j.\n    // Assume that\
    \ the cars moving left to right are at position x[i],\n    // and the cars moving\
    \ right to left are at position y[j].\n    // Assume that the cars moving left\
    \ to right are at time t[i],\n    // and the cars moving right to left are at\
    \ time u[j].\n    // Assume that the cars moving left to right are at position\
    \ x[i] = i,\n    // and the cars moving right to left are at position y[j] = 2n-1-j.\n\
    \    // Assume that the cars moving left to right are at time t[i] = i,\n    //\
    \ and the cars moving right to left are at time u[j] = j.\n    // Assume that\
    \ the cars moving left to right are at position x[i] = i,\n    // and the cars\
    \ moving right to left are at position y[j] = 2n-1-j.\n    // Assume that the\
    \ cars moving left to right are at time t[i] = i,\n    // and the cars moving\
    \ right to left are at time u[j] = j.\n    // Assume that the cars moving left\
    \ to right are at position x[i] = i,\n    // and the cars moving right to left\
    \ are at position y[j] = 2n-1-j.\n    // Assume that the cars moving left to right\
    \ are at time t[i] = i,\n    // and the cars moving right to left are at time\
    \ u[j] = j.\n    // Assume that the cars moving left to right are at position\
    \ x[\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp2q_93399_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The following is an O(n^2) solution.  It's easy to see that\
    \ the problem\n    // can be solved in O(n log n) time.  However, the solution\
    \ is not obvious.\n    // I'll post the O(n log n) solution in a few days.\n \
    \   num_collisions := 0\n    for i := 0; i < n; i++ {\n        for j := 0; j <\
    \ n; j++ {\n            if i < j {\n                num_collisions++\n       \
    \     }\n        }\n    }\n    return num_collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpjvda0zk1_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpjvda0zk1_test.go:48:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpjvda0zk1_test.go:48: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpjvda0zk1_test.go:48:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpjvda0zk1_test.go:48: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073218
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered 0 to n-1.  The cars moving left to\
    \ right are\n    // numbered 0 to n/2-1.  The cars moving right to left are numbered\
    \ n/2 to n-1.\n    // We will use a map to keep track of the cars moving left\
    \ to right.\n    // The key of the map is the car number.  The value of the map\
    \ is the distance\n    // of the car from the origin.\n    // We will use a map\
    \ to keep track of the cars moving right to left.\n    // The key of the map is\
    \ the car number.  The value of the map is the distance\n    // of the car from\
    \ the origin.\n    // We will use a map to keep track of the cars moving left\
    \ to right.\n    // The key of the map is the car number.  The value of the map\
    \ is the distance\n    // of the car from the origin.\n    // We will use a map\
    \ to keep track of the cars moving right to left.\n    // The key of the map is\
    \ the car number.  The value of the map is the distance\n    // of the car from\
    \ the origin.\n    // We will use a map to keep track of the cars moving left\
    \ to right.\n    // The key of the map is the car number.  The value of the map\
    \ is the distance\n    // of the car from the origin.\n    // We will use a map\
    \ to keep track of the cars moving right to left.\n    // The key of the map is\
    \ the car number.  The value of the map is the distance\n    // of the car from\
    \ the origin.\n    // We will use a map to keep track of the cars moving left\
    \ to right.\n    // The key of the map is the car number.  The value of the map\
    \ is the distance\n    // of the car from the origin.\n    // We will use a map\
    \ to keep track of the cars moving right to left.\n    // The key of the map is\
    \ the car number.  The value of the map is the distance\n    // of the car from\
    \ the origin.\n    // We will use a map to keep track of the cars moving left\
    \ to right.\n    // The key of the map is the car number.  The value of the map\
    \ is the distance\n    // of the car from the origin.\n    //\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6dadjp9u_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree.\n    // The left\
    \ subtree contains the cars that are moving left to right.\n    // The right subtree\
    \ contains the cars that are moving right to left.\n    // The root of the tree\
    \ is the car that is in the middle of the road.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order that they start moving.\n    // The cars are inserted\
    \ into the tree in the order\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp79oee5_3_test.go:46:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073217
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n <= 1 {\n        return 0\n    }\n    return n - 1\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmphhej144c_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmphhej144c_test.go:40: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
