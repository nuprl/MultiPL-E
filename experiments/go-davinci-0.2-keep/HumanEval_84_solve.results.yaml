language: go_test.go
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    var result string\n    for\
    \ N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /=\
    \ 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpq69b_wiw_test.go:47: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpq69b_wiw_test.go:47: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpq69b_wiw_test.go:47:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpq69b_wiw_test.go:47: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpq69b_wiw_test.go:47: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        if N % 2 == 0 {\n            result = \"0\"\
    \ + result\n        } else {\n            result = \"1\" + result\n        }\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp4pc_iv6a_test.go:48: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp4pc_iv6a_test.go:48: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp4pc_iv6a_test.go:48:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp4pc_iv6a_test.go:48: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp4pc_iv6a_test.go:48: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    // To print results to the standard output you can use fmt.Println()\n\
    \    // Example: fmt.Println(\"Hello world!\")\n    return fmt.Sprintf(\"%b\"\
    , N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1000), expected: \"1\" },\n     { actual: candidate(150),\
    \ expected: \"110\" },\n     { actual: candidate(147), expected: \"1100\" },\n\
    \     { actual: candidate(333), expected: \"1001\" },\n     { actual: candidate(963),\
    \ expected: \"10010\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpl_la9vmt_test.go:42: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpl_la9vmt_test.go:42: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpl_la9vmt_test.go:42:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpl_la9vmt_test.go:42: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpl_la9vmt_test.go:42: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N%2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpp_2r63wi_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpp_2r63wi_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpp_2r63wi_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpp_2r63wi_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpp_2r63wi_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%v%v\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmphiwfwpsz_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"0\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpak5xlwlq_test.go:40: expected '1', got '0'\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpak5xlwlq_test.go:40: expected '110', got '0'\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpak5xlwlq_test.go:40: expected '1100',\
    \ got '0'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpak5xlwlq_test.go:40:\
    \ expected '1001', got '0'\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n    \
    \    tmpak5xlwlq_test.go:40: expected '10010', got '0'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    if N\
    \ == 0 {\n        return \"0\"\n    }\n    var result string\n    for N > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /= 2\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpyrb2xkw__test.go:47:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%v%v\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmphiwfwpsz_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var bin\
    \ string\n    for N > 0 {\n        bin = fmt.Sprintf(\"%d%s\", N % 2, bin)\n \
    \       N /= 2\n    }\n    return bin\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmprkl7iz_2_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmprkl7iz_2_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmprkl7iz_2_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmprkl7iz_2_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmprkl7iz_2_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    if N\
    \ == 0 {\n        return \"0\"\n    }\n    var result string\n    for N > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /= 2\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpyrb2xkw__test.go:47:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%v%v\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmphiwfwpsz_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    fmt.Println(N)\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T)\
    \ {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1000\n150\n147\n333\n963\n--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0\
    \ (0.00s)\n        tmpm5869578_test.go:41: expected '1', got ''\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpm5869578_test.go:41: expected '110',\
    \ got ''\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpm5869578_test.go:41:\
    \ expected '1100', got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n     \
    \   tmpm5869578_test.go:41: expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4\
    \ (0.00s)\n        tmpm5869578_test.go:41: expected '10010', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N%2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpp_2r63wi_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpp_2r63wi_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpp_2r63wi_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpp_2r63wi_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpp_2r63wi_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    if N\
    \ == 0 {\n        return \"0\"\n    }\n    var result string\n    for N > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /= 2\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpyrb2xkw__test.go:47:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    if N == 0 {\n        return \"0\"\n    }\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpoxrtiq3s_test.go:48: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpoxrtiq3s_test.go:48: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpoxrtiq3s_test.go:48:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpoxrtiq3s_test.go:48: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpoxrtiq3s_test.go:48: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var s\
    \ string\n    for N > 0 {\n        s = fmt.Sprintf(\"%d%s\", N % 2, s)\n     \
    \   N /= 2\n    }\n    return s\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpd3z_zswn_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpd3z_zswn_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpd3z_zswn_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpd3z_zswn_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpd3z_zswn_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        if N % 2 == 0 {\n            result = \"0\"\
    \ + result\n        } else {\n            result = \"1\" + result\n        }\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp4pc_iv6a_test.go:48: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp4pc_iv6a_test.go:48: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp4pc_iv6a_test.go:48:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp4pc_iv6a_test.go:48: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp4pc_iv6a_test.go:48: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    if N\
    \ == 0 {\n        return \"0\"\n    }\n    var result string\n    for N > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /= 2\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpyrb2xkw__test.go:47:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    if N\
    \ == 0 {\n        return \"0\"\n    }\n    var result string\n    for N > 0 {\n\
    \        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n        N /= 2\n    }\n\
    \    return result\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate := solve\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n   \
    \  { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpyrb2xkw__test.go:47:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpyrb2xkw__test.go:47: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpyrb2xkw__test.go:47: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var res\
    \ string\n    for N > 0 {\n        res = fmt.Sprintf(\"%d%s\", N % 2, res)\n \
    \       N /= 2\n    }\n    return res\n}\n\nfunc TestSolve(t *testing.T) {\n \
    \ candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpfp24g3pj_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpfp24g3pj_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpfp24g3pj_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpfp24g3pj_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpfp24g3pj_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%v%v\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmphiwfwpsz_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmphiwfwpsz_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmphiwfwpsz_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    var result string\n    for N > 0 {\n        result = fmt.Sprintf(\"\
    %d%s\", N % 2, result)\n        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t\
    \ *testing.T) {\n  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000),\
    \ expected: \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n  \
    \   { actual: candidate(147), expected: \"1100\" },\n     { actual: candidate(333),\
    \ expected: \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmptbsdakuh_test.go:45: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmptbsdakuh_test.go:45:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmptbsdakuh_test.go:45: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmptbsdakuh_test.go:45: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    return\
    \ fmt.Sprintf(\"%b\", N)\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate :=\
    \ solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmp7g0bcfae_test.go:39:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmp7g0bcfae_test.go:39: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmp7g0bcfae_test.go:39: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    var result\
    \ string\n    for N > 0 {\n        result = fmt.Sprintf(\"%d%s\", N % 2, result)\n\
    \        N /= 2\n    }\n    return result\n}\n\nfunc TestSolve(t *testing.T) {\n\
    \  candidate := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1000), expected:\
    \ \"1\" },\n     { actual: candidate(150), expected: \"110\" },\n     { actual:\
    \ candidate(147), expected: \"1100\" },\n     { actual: candidate(333), expected:\
    \ \"1001\" },\n     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1', got '1111101000'\n    --- FAIL:\
    \ TestSolve/test_num__1 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '110',\
    \ got '10010110'\n    --- FAIL: TestSolve/test_num__2 (0.00s)\n        tmpmztb0fr6_test.go:44:\
    \ expected '1100', got '10010011'\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n\
    \        tmpmztb0fr6_test.go:44: expected '1001', got '101001101'\n    --- FAIL:\
    \ TestSolve/test_num__4 (0.00s)\n        tmpmztb0fr6_test.go:44: expected '10010',\
    \ got '1111000011'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package solve_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Given a positive integer N, return the total sum of its digits in binary.\n\
    // Example\n// For N = 1000, the sum of digits will be 1 the output should be\
    \ \"1\".\n// For N = 150, the sum of digits will be 6 the output should be \"\
    110\".\n// For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n// Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n//\
    \ Output:\n// a string of binary number\nfunc solve(N int) string {\n    // Write\
    \ your code here\n    return \"\"\n}\n\nfunc TestSolve(t *testing.T) {\n  candidate\
    \ := solve\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1000), expected: \"1\" },\n\
    \     { actual: candidate(150), expected: \"110\" },\n     { actual: candidate(147),\
    \ expected: \"1100\" },\n     { actual: candidate(333), expected: \"1001\" },\n\
    \     { actual: candidate(963), expected: \"10010\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSolve (0.00s)\n    --- FAIL: TestSolve/test_num__0 (0.00s)\n\
    \        tmpdfekcydv_test.go:40: expected '1', got ''\n    --- FAIL: TestSolve/test_num__1\
    \ (0.00s)\n        tmpdfekcydv_test.go:40: expected '110', got ''\n    --- FAIL:\
    \ TestSolve/test_num__2 (0.00s)\n        tmpdfekcydv_test.go:40: expected '1100',\
    \ got ''\n    --- FAIL: TestSolve/test_num__3 (0.00s)\n        tmpdfekcydv_test.go:40:\
    \ expected '1001', got ''\n    --- FAIL: TestSolve/test_num__4 (0.00s)\n     \
    \   tmpdfekcydv_test.go:40: expected '10010', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
