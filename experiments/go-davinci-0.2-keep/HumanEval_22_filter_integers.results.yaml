language: go_test.go
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            integers = append(integers, value.(int))\n       \
    \ }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n\
    \  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    res := make([]int,\
    \ 0)\n    for _, v := range values {\n        switch v.(type) {\n        case\
    \ int:\n            res = append(res, v.(int))\n        }\n    }\n    return res\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, v := range values {\n        switch v.(type) {\n        case\
    \ int:\n            result = append(result, v.(int))\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        if value, ok := value.(int); ok {\n\
    \            result = append(result, value)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var ret []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            ret = append(ret, v.(int))\n        }\n    }\n    return ret\n}\n\
    \nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    integers := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            integers = append(integers, value.(int))\n       \
    \ }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n\
    \  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, v := range values {\n        switch v.(type) {\n        case\
    \ int:\n            integers = append(integers, v.(int))\n        }\n    }\n \
    \   return integers\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    result := make([]int,\
    \ 0)\n    for _, value := range values {\n        switch value.(type) {\n    \
    \    case int:\n            result = append(result, value.(int))\n        }\n\
    \    }\n    return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var integers\
    \ []int\n    for _, value := range values {\n        switch value.(type) {\n \
    \       case int:\n            integers = append(integers, value.(int))\n    \
    \    }\n    }\n    return integers\n}\n\nfunc TestFilter_Integers(t *testing.T)\
    \ {\n  candidate := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, value := range values {\n        switch value.(type) {\n        case\
    \ int:\n            result = append(result, value.(int))\n        }\n    }\n \
    \   return result\n}\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate\
    \ := filter_integers\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{}),\
    \ expected: []int{} },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
- exit_code: 0
  program: "package filter_integers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
    \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1,\
    \ 2, 3]\nfunc filter_integers(values []interface{}) []int {\n    var result []int\n\
    \    for _, v := range values {\n        switch v.(type) {\n        case int:\n\
    \            result = append(result, v.(int))\n        }\n    }\n    return result\n\
    }\n\nfunc TestFilter_Integers(t *testing.T) {\n  candidate := filter_integers\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]interface{}{}), expected: []int{}\
    \ },\n     { actual: candidate([]interface{}{4, map[interface{}]interface{}{},\
    \ []interface{}{}, 23.2, 9, \"adasd\"}), expected: []int{4, 9} },\n     { actual:\
    \ candidate([]interface{}{3, \"c\", 3, 3, \"a\", \"b\"}), expected: []int{3, 3,\
    \ 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073828
