language: go_test.go
name: HumanEval_102_choose_num
results:
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // Write your code here\n    if x % 2 == 0 {\n        return x\n    } else\
    \ if y % 2 == 0 {\n        return y\n    } else {\n        return -1\n    }\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_708awcm_test.go:45: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmp_708awcm_test.go:45:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmp_708awcm_test.go:45: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp_708awcm_test.go:45:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmp_708awcm_test.go:45: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // Write your code here\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpug27bxqo_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpug27bxqo_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpug27bxqo_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpug27bxqo_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n\n    if x + 1 == y {\n        return -1\n    }\n\n    return x +\
    \ 2\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpnaxr084l_test.go:50: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpnaxr084l_test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpnaxr084l_test.go:50: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmpnaxr084l_test.go:50:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 <= y {\n        return\
    \ x + 1\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpetp5ag2r_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpetp5ag2r_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpetp5ag2r_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpetp5ag2r_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var result int = -1\n    for i := x; i <= y; i++ {\n        if i % 2 == 0\
    \ {\n            result = i\n        }\n    }\n    return result\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n        return\
    \ -1\n    }\n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n        return\
    \ -1\n    }\n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 <= y {\n        return\
    \ x + 1\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpetp5ag2r_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpetp5ag2r_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpetp5ag2r_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpetp5ag2r_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // Write your code here\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpug27bxqo_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpug27bxqo_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpug27bxqo_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpug27bxqo_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n        return\
    \ -1\n    }\n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var max int = -1\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n\
    \            if i > max {\n                max = i\n            }\n        }\n\
    \    }\n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if y % 2 == 0 {\n        return\
    \ y\n    }\n    return -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpw18quhzh_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpw18quhzh_test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 <= y {\n        return\
    \ x + 1\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpetp5ag2r_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpetp5ag2r_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpetp5ag2r_test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpetp5ag2r_test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n\n    for i := y; i >= x; i-- {\n \
    \       if i % 2 == 0 {\n            return i\n        }\n    }\n\n    return\
    \ -1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var even int\n    if x % 2 == 0 {\n        even = x\n    } else {\n     \
    \   even = x + 1\n    }\n    for even <= y {\n        if even % 2 == 0 {\n   \
    \         return even\n        }\n        even += 1\n    }\n    return -1\n}\n\
    \nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp1cx4og4__test.go:50: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp1cx4og4__test.go:50:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp1cx4og4__test.go:50: expected '%!s(int=28)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n        return\
    \ -1\n    }\n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var result int\n    if x % 2 == 0 {\n        result = x\n    } else {\n \
    \       result = x + 1\n    }\n    if result > y {\n        return -1\n    }\n\
    \    return result\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(12, 15), expected: 14 },\n    \
    \ { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354),\
    \ expected: 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n\
    \     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp_hqh5jty_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmp_hqh5jty_test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmp_hqh5jty_test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    var max int = -1\n    for i := x; i <= y; i++ {\n        if i % 2 == 0 {\n\
    \            if i > max {\n                max = i\n            }\n        }\n\
    \    }\n    return max\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    }\n    if x + 1 == y {\n        return\
    \ -1\n    }\n    return choose_num(x + 1, y)\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmpwn2knzzl_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmpwn2knzzl_test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if x + 1 == y {\n        return\
    \ -1\n    } else {\n        return choose_num(x + 1, y)\n    }\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=14)'\n    --- FAIL: TestChoose_Num/test_num__2\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=12354)', got '%!s(int=34)'\n\
    \    --- FAIL: TestChoose_Num/test_num__3 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=5234)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__5 (0.00s)\n        tmplobda2h__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=28)'\n    --- FAIL: TestChoose_Num/test_num__6\
    \ (0.00s)\n        tmplobda2h__test.go:44: expected '%!s(int=-1)', got '%!s(int=8)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x % 2 == 0 {\n        return x\n    } else if y % 2 == 0 {\n        return\
    \ y\n    } else {\n        return -1\n    }\n}\n\nfunc TestChoose_Num(t *testing.T)\
    \ {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12,\
    \ 15), expected: 14 },\n     { actual: candidate(13, 12), expected: -1 },\n  \
    \   { actual: candidate(33, 12354), expected: 12354 },\n     { actual: candidate(5234,\
    \ 5233), expected: -1 },\n     { actual: candidate(6, 29), expected: 28 },\n \
    \    { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__1 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=12)'\n    --- FAIL: TestChoose_Num/test_num__3\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=5234)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpcobjzvm__test.go:44:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\n    --- FAIL: TestChoose_Num/test_num__5\
    \ (0.00s)\n        tmpcobjzvm__test.go:44: expected '%!s(int=-1)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 0
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    for i := y; i >= x; i-- {\n   \
    \     if i % 2 == 0 {\n            return i\n        }\n    }\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if y % 2 == 0 {\n        return y\n    }\n    return -1\n}\n\n\
    func TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(12, 15), expected: 14 },\n     { actual: candidate(13,\
    \ 12), expected: -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n\
    \     { actual: candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6,\
    \ 29), expected: 28 },\n     { actual: candidate(27, 10), expected: -1 },\n  \
    \   { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmp9k21evwz_test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmp9k21evwz_test.go:47:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n\n    if y % 2 == 0 {\n        return y\n    }\n\n    return -1\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpdd_86oju_test.go:50: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__4 (0.00s)\n        tmpdd_86oju_test.go:50:\
    \ expected '%!s(int=28)', got '%!s(int=6)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    return x + 1\n}\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate\
    \ := choose_num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(12, 15), expected:\
    \ 14 },\n     { actual: candidate(13, 12), expected: -1 },\n     { actual: candidate(33,\
    \ 12354), expected: 12354 },\n     { actual: candidate(5234, 5233), expected:\
    \ -1 },\n     { actual: candidate(6, 29), expected: 28 },\n     { actual: candidate(27,\
    \ 10), expected: -1 },\n     { actual: candidate(7, 7), expected: -1 },\n    \
    \ { actual: candidate(546, 546), expected: 546 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=12354)', got '%!s(int=34)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmptnckqyrx_test.go:44: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmptnckqyrx_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(int=8)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    if x > y {\n        return -1\n    }\n    if x % 2 == 0 {\n        return\
    \ x\n    }\n    if x + 1 == y {\n        return -1\n    }\n    return x + 2\n\
    }\n\nfunc TestChoose_Num(t *testing.T) {\n  candidate := choose_num\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(12, 15), expected: 14 },\n     { actual:\
    \ candidate(13, 12), expected: -1 },\n     { actual: candidate(33, 12354), expected:\
    \ 12354 },\n     { actual: candidate(5234, 5233), expected: -1 },\n     { actual:\
    \ candidate(6, 29), expected: 28 },\n     { actual: candidate(27, 10), expected:\
    \ -1 },\n     { actual: candidate(7, 7), expected: -1 },\n     { actual: candidate(546,\
    \ 546), expected: 546 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=14)', got '%!s(int=12)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=12354)', got '%!s(int=35)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmplpktkw6__test.go:47: expected '%!s(int=28)', got '%!s(int=6)'\n\
    \    --- FAIL: TestChoose_Num/test_num__6 (0.00s)\n        tmplpktkw6__test.go:47:\
    \ expected '%!s(int=-1)', got '%!s(int=9)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073389
- exit_code: 1
  program: "package choose_num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// This function takes two positive numbers x and y and returns the\n// biggest\
    \ even integer number that is in the range [x, y] inclusive. If \n// there's no\
    \ such number, then the function should return -1.\n// For example:\n// choose_num(12,\
    \ 15) = 14\n// choose_num(13, 12) = -1\nfunc choose_num(x int, y int) int {\n\
    \    // TODO: implement this function\n    return -1\n}\n\nfunc TestChoose_Num(t\
    \ *testing.T) {\n  candidate := choose_num\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(12, 15), expected: 14 },\n     { actual: candidate(13, 12), expected:\
    \ -1 },\n     { actual: candidate(33, 12354), expected: 12354 },\n     { actual:\
    \ candidate(5234, 5233), expected: -1 },\n     { actual: candidate(6, 29), expected:\
    \ 28 },\n     { actual: candidate(27, 10), expected: -1 },\n     { actual: candidate(7,\
    \ 7), expected: -1 },\n     { actual: candidate(546, 546), expected: 546 },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestChoose_Num (0.00s)\n    --- FAIL: TestChoose_Num/test_num__0\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=14)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__2 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=12354)', got '%!s(int=-1)'\n    --- FAIL: TestChoose_Num/test_num__4\
    \ (0.00s)\n        tmpc6hl31uf_test.go:39: expected '%!s(int=28)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestChoose_Num/test_num__7 (0.00s)\n        tmpc6hl31uf_test.go:39:\
    \ expected '%!s(int=546)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073389
