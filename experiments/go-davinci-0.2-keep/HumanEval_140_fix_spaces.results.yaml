language: go_test.go
name: HumanEval_140_fix_spaces
results:
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev byte\n    var count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            if prev == ' ' {\n\
    \                count++\n            } else {\n                count = 1\n  \
    \          }\n            if count == 2 {\n                result += \"-\"\n \
    \           }\n        } else {\n            if prev == ' ' {\n              \
    \  result += \"_\"\n            }\n            result += string(c)\n         \
    \   count = 0\n        }\n        prev = byte(c)\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpezam0by3_test.go:58: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpezam0by3_test.go:58:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow-_Dirty-_Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpezam0by3_test.go:58:\
    \ expected 'Exa-mple', got 'Exa-_mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpezam0by3_test.go:58: expected '-Exa_1_2_2_mple', got '-_Exa_1_2_2_mple'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char byte\n    var prev_prev_char\
    \ byte\n    for i := 0; i < len(text); i++ {\n        if text[i] == ' ' {\n  \
    \          if prev_char == ' ' && prev_prev_char == ' ' {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += string(text[i])\n        }\n   \
    \     prev_prev_char = prev_char\n        prev_char = text[i]\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmphzf9g0x6_test.go:52: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmphzf9g0x6_test.go:52:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char rune\n    var curr_char rune\n\
    \    var next_char rune\n    var prev_char_is_space bool\n    var curr_char_is_space\
    \ bool\n    var next_char_is_space bool\n    var prev_char_is_underscore bool\n\
    \    var curr_char_is_underscore bool\n    var next_char_is_underscore bool\n\
    \    var prev_char_is_hyphen bool\n    var curr_char_is_hyphen bool\n    var next_char_is_hyphen\
    \ bool\n    var prev_char_is_letter bool\n    var curr_char_is_letter bool\n \
    \   var next_char_is_letter bool\n    var prev_char_is_digit bool\n    var curr_char_is_digit\
    \ bool\n    var next_char_is_digit bool\n    var prev_char_is_special bool\n \
    \   var curr_char_is_special bool\n    var next_char_is_special bool\n    var\
    \ prev_char_is_whitespace bool\n    var curr_char_is_whitespace bool\n    var\
    \ next_char_is_whitespace bool\n    var prev_char_is_newline bool\n    var curr_char_is_newline\
    \ bool\n    var next_char_is_newline bool\n    var prev_char_is_tab bool\n   \
    \ var curr_char_is_tab bool\n    var next_char_is_tab bool\n    var prev_char_is_formfeed\
    \ bool\n    var curr_char_is_formfeed bool\n    var next_char_is_formfeed bool\n\
    \    var prev_char_is_carriage_return bool\n    var curr_char_is_carriage_return\
    \ bool\n    var next_char_is_carriage_return bool\n    var prev_char_is_unicode_space\
    \ bool\n    var curr_char_is_unicode_space bool\n    var next_char_is_unicode_space\
    \ bool\n    var prev_char_is_unicode_letter bool\n    var curr_char_is_unicode_letter\
    \ bool\n    var next_char_is_unicode_\nfunc TestFix_Spaces(t *testing.T) {\n \
    \ candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo47c3veo_test.go:58:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074818
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var last_char byte\n    for i := 0; i <\
    \ len(text); i++ {\n        if text[i] == ' ' {\n            if last_char == '\
    \ ' {\n                result += \"-\"\n            } else {\n               \
    \ result += \"_\"\n            }\n        } else {\n            result += string(text[i])\n\
    \        }\n        last_char = text[i]\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwn3xem2a_test.go:50: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpwn3xem2a_test.go:50: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwn3xem2a_test.go:50:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 0
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool = false\n    var consecutive_spaces\
    \ int = 0\n    for _, c := range text {\n        if c == ' ' {\n            if\
    \ prev_space {\n                consecutive_spaces++\n            } else {\n \
    \               consecutive_spaces = 1\n            }\n            prev_space\
    \ = true\n        } else {\n            if consecutive_spaces > 2 {\n        \
    \        result += \"-\"\n            } else {\n                for i := 0; i\
    \ < consecutive_spaces; i++ {\n                    result += \"_\"\n         \
    \       }\n            }\n            consecutive_spaces = 0\n            prev_space\
    \ = false\n            result += string(c)\n        }\n    }\n    if consecutive_spaces\
    \ > 2 {\n        result += \"-\"\n    } else {\n        for i := 0; i < consecutive_spaces;\
    \ i++ {\n            result += \"_\"\n        }\n    }\n    return result\n}\n\
    \nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool = false\n    var space_count\
    \ int = 0\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count > 2 {\n                continue\n            }\n \
    \           if prev_space {\n                result += \"-\"\n            } else\
    \ {\n                result += \"_\"\n            }\n            prev_space =\
    \ true\n        } else {\n            space_count = 0\n            result += string(c)\n\
    \            prev_space = false\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpwk7b3ozy_test.go:57: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpwk7b3ozy_test.go:57: expected 'Exa-mple', got 'Exa_-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpwk7b3ozy_test.go:57:\
    \ expected '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char_is_space bool\n    var space_count\
    \ int\n    for _, char := range text {\n        if char == ' ' {\n           \
    \ space_count++\n            if space_count > 2 {\n                if !prev_char_is_space\
    \ {\n                    result += \"-\"\n                }\n            } else\
    \ {\n                result += \"_\"\n            }\n            prev_char_is_space\
    \ = true\n        } else {\n            result += string(char)\n            prev_char_is_space\
    \ = false\n            space_count = 0\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmplpjdz3d1_test.go:56: expected 'Exa-mple', got 'Exa__mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmplpjdz3d1_test.go:56:\
    \ expected '-Exa_1_2_2_mple', got '__Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var last_char byte\n    var last_char_count\
    \ int\n    for _, char := range text {\n        if char == ' ' {\n           \
    \ if last_char == ' ' {\n                last_char_count++\n            } else\
    \ {\n                last_char = ' '\n                last_char_count = 1\n  \
    \          }\n            if last_char_count > 2 {\n                result +=\
    \ \"-\"\n            } else {\n                result += \"_\"\n            }\n\
    \        } else {\n            last_char = byte(char)\n            last_char_count\
    \ = 0\n            result += string(char)\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpfsqw_hpu_test.go:58: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpfsqw_hpu_test.go:58:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 2
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var last_char byte\n    var last_char_is_space\
    \ bool\n    var consecutive_spaces int\n\n    for i := 0; i < len(text); i++ {\n\
    \        if text[i] == ' ' {\n            if last_char_is_space {\n          \
    \      consecutive_spaces++\n            } else {\n                consecutive_spaces\
    \ = 1\n            }\n            last_char_is_space = true\n        } else {\n\
    \            if last_char_is_space {\n                if consecutive_spaces >\
    \ 2 {\n                    result += \"-\"\n                } else {\n       \
    \             result += \"_\"\n                }\n            }\n            last_char_is_space\
    \ = false\n            result += string(text[i])\n        }\n    }\n\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmf4t4yci_test.go:17:9: last_char declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev rune\n    var count int\n    for\
    \ _, c := range text {\n        if c == ' ' {\n            count++\n         \
    \   if count == 1 {\n                result += string(c)\n            } else if\
    \ count == 2 {\n                result += \"_\"\n            } else if count >\
    \ 2 {\n                if prev != '-' {\n                    result += \"-\"\n\
    \                }\n            }\n        } else {\n            result += string(c)\n\
    \            count = 0\n        }\n        prev = c\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpl02gwh8e_test.go:57: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpl02gwh8e_test.go:57:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow _Dirty _Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpl02gwh8e_test.go:57:\
    \ expected 'Exa-mple', got 'Exa _-mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpl02gwh8e_test.go:57: expected '-Exa_1_2_2_mple', got ' _-Exa\
    \ 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char string\n    for _, char :=\
    \ range text {\n        if char == ' ' {\n            if prev_char == \" \" {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(char)\n\
    \        }\n        prev_char = string(char)\n    }\n    return result\n}\n\n\
    func TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Example\"), expected: \"Example\" },\n     { actual:\
    \ candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual:\
    \ candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmphgo78bq3_test.go:50: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmphgo78bq3_test.go:50: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmphgo78bq3_test.go:50:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prevSpace bool\n    var spaceCount\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if prevSpace\
    \ {\n                spaceCount++\n            } else {\n                prevSpace\
    \ = true\n                spaceCount = 1\n            }\n        } else {\n  \
    \          if prevSpace {\n                if spaceCount > 2 {\n             \
    \       result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prevSpace = false\n\
    \            result += string(c)\n        }\n    }\n    if prevSpace {\n     \
    \   if spaceCount > 2 {\n            result += \"-\"\n        } else {\n     \
    \       result += \"_\"\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmplln6r_4o_test.go:66: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool\n    var space_count\
    \ int\n    for _, char := range text {\n        if char == ' ' {\n           \
    \ if prev_space {\n                space_count++\n            } else {\n     \
    \           prev_space = true\n                space_count = 1\n            }\n\
    \        } else {\n            if prev_space {\n                if space_count\
    \ > 2 {\n                    result += \"-\"\n                } else {\n     \
    \               result += \"_\"\n                }\n            }\n          \
    \  prev_space = false\n            result += string(char)\n        }\n    }\n\
    \    if prev_space {\n        if space_count > 2 {\n            result += \"-\"\
    \n        } else {\n            result += \"_\"\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\"\
    \ },\n     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\"\
    \ },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"\
    Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"Exa   mple\"), expected:\
    \ \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1 2 2 mple\"), expected:\
    \ \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpc50ba78e_test.go:66: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            space_count++\n\
    \            if space_count == 1 {\n                result += \"_\"\n        \
    \    } else if space_count > 2 {\n                if !prev_space {\n         \
    \           result += \"-\"\n                }\n            }\n            prev_space\
    \ = true\n        } else {\n            space_count = 0\n            result +=\
    \ string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpni1ba5tk_test.go:56: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmpni1ba5tk_test.go:56: expected 'Exa-mple', got 'Exa_mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpni1ba5tk_test.go:56: expected\
    \ '-Exa_1_2_2_mple', got '_Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                prev_space\
    \ = true\n                space_count = 1\n            }\n        } else {\n \
    \           if prev_space {\n                if space_count > 2 {\n          \
    \          result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpi4ewrbfc_test.go:66: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpt29hu2h3_test.go:37: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpt29hu2h3_test.go:37: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpt29hu2h3_test.go:37:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char rune\n    for _, char :=\
    \ range text {\n        if char == ' ' {\n            if prev_char == ' ' {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n        } else {\n            result += string(char)\n\
    \        }\n        prev_char = char\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpxpbxr5mz_test.go:50: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpxpbxr5mz_test.go:50: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpxpbxr5mz_test.go:50:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var space_count int\n    for _, char :=\
    \ range text {\n        if char == ' ' {\n            space_count++\n        \
    \    if space_count == 1 {\n                result += \"_\"\n            } else\
    \ if space_count > 2 {\n                result += \"-\"\n            }\n     \
    \   } else {\n            space_count = 0\n            result += string(char)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n\
    \  candidate := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Example\"), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif\
    \ \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow\
    \  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual:\
    \ candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"\
    \   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp3vbe9yvw_test.go:51: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n\
    \        tmp3vbe9yvw_test.go:51: expected 'Exa-mple', got 'Exa_-mple'\n    ---\
    \ FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp3vbe9yvw_test.go:51: expected\
    \ '-Exa_1_2_2_mple', got '_-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool\n    for _, c := range\
    \ text {\n        if c == ' ' {\n            if prev_space {\n               \
    \ result += \"-\"\n            } else {\n                result += \"_\"\n   \
    \         }\n            prev_space = true\n        } else {\n            result\
    \ += string(c)\n            prev_space = false\n        }\n    }\n    return result\n\
    }\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate := fix_spaces\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"Example\"), expected: \"Example\" },\n\
    \     { actual: candidate(\"Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n\
    \     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\"\
    \ },\n     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n  \
    \   { actual: candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\"\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmp_ls29bxn_test.go:51: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_-Dirty_-Fellow'\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmp_ls29bxn_test.go:51: expected 'Exa-mple', got 'Exa_--mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmp_ls29bxn_test.go:51:\
    \ expected '-Exa_1_2_2_mple', got '_--Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpt29hu2h3_test.go:37: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpt29hu2h3_test.go:37: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpt29hu2h3_test.go:37:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                prev_space\
    \ = true\n                space_count = 1\n            }\n        } else {\n \
    \           if prev_space {\n                if space_count > 2 {\n          \
    \          result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpi4ewrbfc_test.go:66: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char rune\n    var prev_prev_char\
    \ rune\n    for _, char := range text {\n        if char == ' ' {\n          \
    \  if prev_char == ' ' {\n                if prev_prev_char == ' ' {\n       \
    \             result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            } else {\n                result +=\
    \ \"_\"\n            }\n        } else {\n            result += string(char)\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = char\n   \
    \ }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjxu166jf_test.go:56: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjxu166jf_test.go:56:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmphufm_o5d_test.go:36: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmphufm_o5d_test.go:36:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmphufm_o5d_test.go:36:\
    \ expected 'Exa-mple', got 'Exa   mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmphufm_o5d_test.go:36: expected '-Exa_1_2_2_mple', got ' \
    \  Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_space bool\n    var space_count\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if prev_space\
    \ {\n                space_count++\n            } else {\n                prev_space\
    \ = true\n                space_count = 1\n            }\n        } else {\n \
    \           if prev_space {\n                if space_count > 2 {\n          \
    \          result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            }\n            prev_space = false\n\
    \            result += string(c)\n        }\n    }\n    if prev_space {\n    \
    \    if space_count > 2 {\n            result += \"-\"\n        } else {\n   \
    \         result += \"_\"\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__2\
    \ (0.00s)\n        tmpi4ewrbfc_test.go:66: expected 'Yellow_Yellow__Dirty__Fellow',\
    \ got 'Yellow_Yellow_Dirty_Fellow'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpt29hu2h3_test.go:37: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpt29hu2h3_test.go:37: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpt29hu2h3_test.go:37:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    // your code here\n    return text\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpqc1wnga5_test.go:37: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpqc1wnga5_test.go:37:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpqc1wnga5_test.go:37:\
    \ expected 'Exa-mple', got 'Exa   mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmpqc1wnga5_test.go:37: expected '-Exa_1_2_2_mple', got ' \
    \  Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prev_char rune\n    var prev_prev_char\
    \ rune\n    for _, char := range text {\n        if char == ' ' {\n          \
    \  if prev_char == ' ' {\n                if prev_prev_char == ' ' {\n       \
    \             result += \"-\"\n                } else {\n                    result\
    \ += \"_\"\n                }\n            } else {\n                result +=\
    \ \"_\"\n            }\n        } else {\n            result += string(char)\n\
    \        }\n        prev_prev_char = prev_char\n        prev_char = char\n   \
    \ }\n    return result\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__3\
    \ (0.00s)\n        tmpjxu166jf_test.go:56: expected 'Exa-mple', got 'Exa__-mple'\n\
    \    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n        tmpjxu166jf_test.go:56:\
    \ expected '-Exa_1_2_2_mple', got '__-Exa_1_2_2_mple'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpt29hu2h3_test.go:37: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpt29hu2h3_test.go:37: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpt29hu2h3_test.go:37:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return text\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmphufm_o5d_test.go:36: expected 'Mudasir_Hanif_', got 'Mudasir\
    \ Hanif '\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmphufm_o5d_test.go:36:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow Yellow  Dirty  Fellow'\n\
    \    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmphufm_o5d_test.go:36:\
    \ expected 'Exa-mple', got 'Exa   mple'\n    --- FAIL: TestFix_Spaces/test_num__4\
    \ (0.00s)\n        tmphufm_o5d_test.go:36: expected '-Exa_1_2_2_mple', got ' \
    \  Exa 1 2 2 mple'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    // your code here\n    return \"\"\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpt29hu2h3_test.go:37: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpt29hu2h3_test.go:37: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpt29hu2h3_test.go:37:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpt29hu2h3_test.go:37: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    return \"\"\n}\n\nfunc TestFix_Spaces(t *testing.T) {\n  candidate\
    \ := fix_spaces\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Example\"\
    ), expected: \"Example\" },\n     { actual: candidate(\"Mudasir Hanif \"), expected:\
    \ \"Mudasir_Hanif_\" },\n     { actual: candidate(\"Yellow Yellow  Dirty  Fellow\"\
    ), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n     { actual: candidate(\"\
    Exa   mple\"), expected: \"Exa-mple\" },\n     { actual: candidate(\"   Exa 1\
    \ 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__0\
    \ (0.00s)\n        tmpf4y8vo_u_test.go:36: expected 'Example', got ''\n    ---\
    \ FAIL: TestFix_Spaces/test_num__1 (0.00s)\n        tmpf4y8vo_u_test.go:36: expected\
    \ 'Mudasir_Hanif_', got ''\n    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected 'Yellow_Yellow__Dirty__Fellow', got\
    \ ''\n    --- FAIL: TestFix_Spaces/test_num__3 (0.00s)\n        tmpf4y8vo_u_test.go:36:\
    \ expected 'Exa-mple', got ''\n    --- FAIL: TestFix_Spaces/test_num__4 (0.00s)\n\
    \        tmpf4y8vo_u_test.go:36: expected '-Exa_1_2_2_mple', got ''\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074819
- exit_code: 1
  program: "package fix_spaces_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Given a string text, replace all spaces in it with underscores, \n// and\
    \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
    \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"\
    Example 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\
    \n// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text string)\
    \ string {\n    var result string\n    var prevSpace bool\n    var spaceCount\
    \ int\n    for _, c := range text {\n        if c == ' ' {\n            if prevSpace\
    \ {\n                spaceCount++\n            } else {\n                spaceCount\
    \ = 1\n            }\n            prevSpace = true\n        } else {\n       \
    \     if prevSpace {\n                if spaceCount > 2 {\n                  \
    \  result += \"-\"\n                } else {\n                    result += \"\
    _\"\n                }\n            }\n            result += string(c)\n     \
    \       prevSpace = false\n        }\n    }\n    return result\n}\n\nfunc TestFix_Spaces(t\
    \ *testing.T) {\n  candidate := fix_spaces\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Example\"), expected: \"Example\" },\n     { actual: candidate(\"\
    Mudasir Hanif \"), expected: \"Mudasir_Hanif_\" },\n     { actual: candidate(\"\
    Yellow Yellow  Dirty  Fellow\"), expected: \"Yellow_Yellow__Dirty__Fellow\" },\n\
    \     { actual: candidate(\"Exa   mple\"), expected: \"Exa-mple\" },\n     { actual:\
    \ candidate(\"   Exa 1 2 2 mple\"), expected: \"-Exa_1_2_2_mple\" },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFix_Spaces (0.00s)\n    --- FAIL: TestFix_Spaces/test_num__1\
    \ (0.00s)\n        tmpfie1txg3_test.go:59: expected 'Mudasir_Hanif_', got 'Mudasir_Hanif'\n\
    \    --- FAIL: TestFix_Spaces/test_num__2 (0.00s)\n        tmpfie1txg3_test.go:59:\
    \ expected 'Yellow_Yellow__Dirty__Fellow', got 'Yellow_Yellow_Dirty_Fellow'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074820
