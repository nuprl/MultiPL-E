language: go_test.go
name: HumanEval_37_sort_even
results:
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    // sort evens\n    for i := 0; i < len(evens); i++ {\n        for j\
    \ := i + 1; j < len(evens); j++ {\n            if evens[i] > evens[j] {\n    \
    \            evens[i], evens[j] = evens[j], evens[i]\n            }\n        }\n\
    \    }\n    // replace even indicies with sorted evens\n    for i, v := range\
    \ evens {\n        l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement me\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmprm19vo_r_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprm19vo_r_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i += 2 {\n        for\
    \ j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n           \
    \     l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list to return\n    l_prime\
    \ := make([]int, len(l))\n    // Create a new list to hold the even indicies of\
    \ l\n    evens := make([]int, 0)\n    // Iterate through l, adding the even indicies\
    \ to evens\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, v)\n        }\n    }\n    // Sort evens\n    for i := 0; i <\
    \ len(evens); i++ {\n        for j := i + 1; j < len(evens); j++ {\n         \
    \   if evens[i] > evens[j] {\n                evens[i], evens[j] = evens[j], evens[i]\n\
    \            }\n        }\n    }\n    // Iterate through l, adding the odd indicies\
    \ to l_prime\n    // and adding the sorted even indicies to l_prime\n    for i,\
    \ v := range l {\n        if i % 2 == 0 {\n            l_prime[i] = evens[0]\n\
    \            evens = evens[1:]\n        } else {\n            l_prime[i] = v\n\
    \        }\n    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // We'll use the merge sort algorithm to sort\
    \ the even indicies of l.\n    // We'll do this by creating a new list l' that\
    \ is identical to l in the odd indicies,\n    // and the even indicies of l' are\
    \ sorted.\n    // We'll then return l'.\n    // First, we'll create l'.\n    l_prime\
    \ := make([]int, len(l))\n    // We'll then copy the odd indicies of l into l'.\n\
    \    for i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    //\
    \ Now we'll sort the even indicies of l' using merge sort.\n    // First, we'll\
    \ create a helper function that merges two sorted lists.\n    merge := func(l1,\
    \ l2 []int) []int {\n        // We'll create a new list l' that will be the merged\
    \ list.\n        l_prime := make([]int, len(l1) + len(l2))\n        // We'll then\
    \ iterate through l1 and l2, adding the smaller of the two to l'.\n        i,\
    \ j := 0, 0\n        for k := 0; k < len(l_prime); k++ {\n            if i ==\
    \ len(l1) {\n                l_prime[k] = l2[j]\n                j++\n       \
    \     } else if j == len(l2) {\n                l_prime[k] = l1[i]\n         \
    \       i++\n            } else if l1[i] < l2[j] {\n                l_prime[k]\
    \ = l1[i]\n                i++\n            } else {\n                l_prime[k]\
    \ = l2[j]\n                j++\n            }\n        }\n        return l_prime\n\
    \    }\n    // Now we'll create a helper function that sorts a list using merge\
    \ sort.\n    merge_sort := func(l []int) []int {\n        // If the list has length\
    \ 1, we're done.\n        if len(l) == 1 {\n            return l\n        }\n\
    \        // Otherwise, we'll split the list in half and sort each half.\n    \
    \    l1 := merge_sort(l[:len\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm8dhv2p3_test.go:57:32: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    // Sort the even indicies\n    for i := 0; i < len(l); i += 2 {\n       \
    \ for j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n       \
    \         l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // We need to make a copy of l, otherwise we\
    \ will be modifying the original list\n    l_copy := make([]int, len(l))\n   \
    \ copy(l_copy, l)\n\n    // We need to find the even indicies of the list\n  \
    \  even_indicies := []int{}\n    for i, _ := range l_copy {\n        if i % 2\
    \ == 0 {\n            even_indicies = append(even_indicies, i)\n        }\n  \
    \  }\n\n    // We need to sort the even indicies of the list\n    for i := 0;\
    \ i < len(even_indicies); i++ {\n        for j := i + 1; j < len(even_indicies);\
    \ j++ {\n            if l_copy[even_indicies[i]] > l_copy[even_indicies[j]] {\n\
    \                l_copy[even_indicies[i]], l_copy[even_indicies[j]] = l_copy[even_indicies[j]],\
    \ l_copy[even_indicies[i]]\n            }\n        }\n    }\n\n    return l_copy\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\n\
    \    evens := make([]int, 0)\n    odds := make([]int, 0)\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            odds = append(odds, v)\n        }\
    \ else {\n            evens = append(evens, v)\n        }\n    }\n\n    evens\
    \ = merge_sort(evens)\n\n    result := make([]int, len(l))\n    for i, v := range\
    \ odds {\n        result[i*2] = v\n    }\n    for i, v := range evens {\n    \
    \    result[i*2+1] = v\n    }\n\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4a1qvmp6_test.go:30:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // We need to make a copy of the list, because\
    \ we don't want to modify the original.\n    // We could use the built-in copy\
    \ function, but it's good practice to write it ourselves.\n    l_copy := make([]int,\
    \ len(l))\n    for i, v := range l {\n        l_copy[i] = v\n    }\n\n    // We\
    \ need to sort the even indicies of l_copy.\n    // We can do this by iterating\
    \ through the even indicies, and sorting them.\n    for i := 0; i < len(l_copy);\
    \ i += 2 {\n        // We need to find the smallest value in the sublist l_copy[i:]\n\
    \        // We can do this by iterating through the sublist, and keeping track\
    \ of the smallest value.\n        smallest := l_copy[i]\n        smallest_index\
    \ := i\n        for j := i; j < len(l_copy); j++ {\n            if l_copy[j] <\
    \ smallest {\n                smallest = l_copy[j]\n                smallest_index\
    \ = j\n            }\n        }\n\n        // Now that we've found the smallest\
    \ value, we need to swap it with the value at index i.\n        l_copy[i], l_copy[smallest_index]\
    \ = l_copy[smallest_index], l_copy[i]\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpj1y5z18f_test.go:59: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123) %!s(int=5)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpj1y5z18f_test.go:59:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=-10) %!s(int=4) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=5)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l_even := l[1::2]\n    l_odd := l[0::2]\n  \
    \  sort(l_even)\n    for i := 0; i < len(l_even); i++ {\n        l_odd[i] = l_even[i]\n\
    \    }\n    return l_odd\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg8idflfm_test.go:16:18: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073838
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 2 == 0 {\n            continue\n        }\n        for j := i; j < len(l);\
    \ j++ {\n            if j % 2 == 0 {\n                continue\n            }\n\
    \            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n     \
    \       }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp5izq4_ve_test.go:47: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp5izq4_ve_test.go:47:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    // sort evens\n    for i := 0; i < len(evens); i++ {\n        for j := i\
    \ + 1; j < len(evens); j++ {\n            if evens[i] > evens[j] {\n         \
    \       evens[i], evens[j] = evens[j], evens[i]\n            }\n        }\n  \
    \  }\n    // merge\n    var result []int\n    for i := 0; i < len(odds); i++ {\n\
    \        result = append(result, odds[i])\n        result = append(result, evens[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2aeadc0a0a88?})\n\
    \t/tmp/tmpipz9wvmx_test.go:37 +0x2a5\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpipz9wvmx_test.go:49 +0x75\ntesting.tRunner(0xc0001a01a0, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list\n    l_new := make([]int,\
    \ len(l))\n    // Copy the odd indicies\n    for i := 0; i < len(l); i += 2 {\n\
    \        l_new[i] = l[i]\n    }\n    // Sort the even indicies\n    for i := 1;\
    \ i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n       \
    \     if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n\
    \        }\n    }\n    // Copy the even indicies\n    for i := 1; i < len(l);\
    \ i += 2 {\n        l_new[i] = l[i]\n    }\n    return l_new\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpyuesbe55_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyuesbe55_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // This is a bit of a hack to make a copy of\
    \ the list\n    // so that we can modify it without modifying the original.\n\
    \    // We can't just do l' := l because that would just make l'\n    // a pointer\
    \ to l, so modifying l' would modify l.\n    l_copy := make([]int, len(l))\n \
    \   copy(l_copy, l)\n\n    // This is a bit of a hack to get the even indicies\
    \ of l_copy.\n    // We can't just do l_copy[1::2] because that would give us\
    \ a slice\n    // of l_copy, so modifying it would modify l_copy.\n    // We want\
    \ to sort the even indicies of l_copy, but we don't want to\n    // modify l_copy.\n\
    \    l_copy_even := make([]int, len(l_copy)/2)\n    for i := 0; i < len(l_copy_even);\
    \ i++ {\n        l_copy_even[i] = l_copy[2*i]\n    }\n\n    // Sort the even indicies\
    \ of l_copy.\n    // This is a bit of a hack to sort the even indicies of l_copy.\n\
    \    // We can't just do sort.Ints(l_copy[1::2]) because that would sort\n   \
    \ // the even indicies of l_copy, which would modify l_copy.\n    // We want to\
    \ sort the even indicies of l_copy, but we don't want to\n    // modify l_copy.\n\
    \    sort.Ints(l_copy_even)\n\n    // Copy the sorted even indicies of l_copy\
    \ back into l_copy.\n    for i := 0; i < len(l_copy_even); i++ {\n        l_copy[2*i]\
    \ = l_copy_even[i]\n    }\n\n    return l_copy\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6rph8rfy_test.go:39:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement me\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmprm19vo_r_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprm19vo_r_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpu4ug91fb_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpu4ug91fb_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list with the same length as\
    \ l\n    l_prime := make([]int, len(l))\n    // Copy the odd indicies of l into\
    \ l_prime\n    for i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n \
    \   }\n    // Create a new list with the even indicies of l\n    l_even := make([]int,\
    \ len(l) / 2)\n    for i := 0; i < len(l_even); i++ {\n        l_even[i] = l[2\
    \ * i + 1]\n    }\n    // Sort the even indicies\n    for i := 0; i < len(l_even);\
    \ i++ {\n        for j := i + 1; j < len(l_even); j++ {\n            if l_even[i]\
    \ > l_even[j] {\n                l_even[i], l_even[j] = l_even[j], l_even[i]\n\
    \            }\n        }\n    }\n    // Copy the sorted even indicies into l_prime\n\
    \    for i := 0; i < len(l_even); i++ {\n        l_prime[2 * i + 1] = l_even[i]\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpgag7bbul_test.go:57: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpgag7bbul_test.go:57:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement this function\n    return\
    \ []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpodqvd5o7_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpodqvd5o7_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpodqvd5o7_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    var\
    \ result []int\n    for i, v := range l {\n        if i % 2 == 0 {\n         \
    \   odds = append(odds, v)\n        } else {\n            evens = append(evens,\
    \ v)\n        }\n    }\n    evens = merge_sort(evens)\n    for i, _ := range odds\
    \ {\n        result = append(result, odds[i])\n        result = append(result,\
    \ evens[i])\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpx2g6hway_test.go:26:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    // sort evens\n    for i := 0; i < len(evens); i++ {\n        for j\
    \ := i + 1; j < len(evens); j++ {\n            if evens[i] > evens[j] {\n    \
    \            evens[i], evens[j] = evens[j], evens[i]\n            }\n        }\n\
    \    }\n    // replace evens in l\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            l[i] = evens[i / 2]\n        }\n    }\n    return l\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplw9qt1_0_test.go:31:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    if len(l) == 1 {\n        return l\n    }\n    if len(l) == 2 {\n       \
    \ if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n        return\
    \ l\n    }\n    odd := make([]int, 0)\n    even := make([]int, 0)\n    for i,\
    \ v := range l {\n        if i % 2 == 0 {\n            even = append(even, v)\n\
    \        } else {\n            odd = append(odd, v)\n        }\n    }\n    for\
    \ i := 0; i < len(even); i++ {\n        for j := i + 1; j < len(even); j++ {\n\
    \            if even[i] > even[j] {\n                even[i], even[j] = even[j],\
    \ even[i]\n            }\n        }\n    }\n    for i := 0; i < len(even); i++\
    \ {\n        odd = append(odd, even[i])\n    }\n    return odd\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp1hf9huhi_test.go:65: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp1hf9huhi_test.go:65: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=0)\
    \ %!s(int=1) %!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=5) %!s(int=9) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp1hf9huhi_test.go:65:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=8) %!s(int=4)\
    \ %!s(int=2) %!s(int=11) %!s(int=-10) %!s(int=-12) %!s(int=3) %!s(int=5) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    sort(evens)\n    for i, v := range evens {\n        odds = append(odds[:i*2+1],\
    \ append([]int{v}, odds[i*2+1:]...)...)\n    }\n    return odds\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48vd08_j_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    var\
    \ result []int\n    for i, v := range l {\n        if i % 2 == 0 {\n         \
    \   odds = append(odds, v)\n        } else {\n            evens = append(evens,\
    \ v)\n        }\n    }\n    for i, v := range odds {\n        result = append(result,\
    \ v)\n        if i < len(evens) {\n            result = append(result, evens[i])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpz1g5nrb__test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpz1g5nrb__test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i; j < len(evens); j++ {\n\
    \            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps0ln81ln_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps0ln81ln_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            continue\n\
    \        }\n        for j := i; j < len(l); j++ {\n            if j % 2 == 0 {\n\
    \                continue\n            }\n            if l[i] > l[j] {\n     \
    \           l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpyswpgvq3_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpyswpgvq3_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // The length of the list\n    n := len(l)\n\
    \    // The list to return\n    r := make([]int, n)\n    // The list of even indicies\n\
    \    e := make([]int, n/2)\n    // The list of odd indicies\n    o := make([]int,\
    \ n/2)\n    // The index of the even indicies\n    j := 0\n    // The index of\
    \ the odd indicies\n    k := 0\n    // Iterate through the list\n    for i :=\
    \ 0; i < n; i++ {\n        // If the index is even\n        if i % 2 == 0 {\n\
    \            // Add the value to the even indicies list\n            e[j] = l[i]\n\
    \            // Increment the even indicies index\n            j++\n        }\
    \ else {\n            // Add the value to the odd indicies list\n            o[k]\
    \ = l[i]\n            // Increment the odd indicies index\n            k++\n \
    \       }\n    }\n    // Sort the even indicies list\n    e = sort(e)\n    //\
    \ Iterate through the list\n    for i := 0; i < n; i++ {\n        // If the index\
    \ is even\n        if i % 2 == 0 {\n            // Add the value to the even indicies\
    \ list\n            r[i] = e[i/2]\n        } else {\n            // Add the value\
    \ to the odd indicies list\n            r[i] = o[i/2]\n        }\n    }\n    //\
    \ Return the list\n    return r\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpme8u2jqx_test.go:44:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i += 2 {\n        for\
    \ j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n           \
    \     l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpf841kiu3_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpf841kiu3_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return l\n    }\n\n\
    \    // Find the middle of the list\n    mid := len(l) / 2\n\n    // Split the\
    \ list into two halves\n    left := l[:mid]\n    right := l[mid:]\n\n    // Recursively\
    \ sort the two halves\n    left = sort_even(left)\n    right = sort_even(right)\n\
    \n    // Merge the two sorted halves\n    return merge_even(left, right)\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppjmj8j7k_test.go:32:12: undefined: merge_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // We need to make a copy of l, since we're\
    \ going to modify it.\n    // We can't just do l' := l, since that would just\
    \ make a reference to l.\n    // We need to make a new slice with the same length\
    \ as l, and copy the values of l into it.\n    l_prime := make([]int, len(l))\n\
    \    copy(l_prime, l)\n\n    // Now we need to sort the even indicies of l_prime.\n\
    \    // We can do this by iterating over the even indicies of l_prime, and sorting\
    \ them.\n    // We can do this by iterating over the even indicies of l_prime,\
    \ and sorting them.\n    // We can do this by iterating over the even indicies\
    \ of l_prime, and sorting them.\n    // We can do this by iterating over the even\
    \ indicies of l_prime, and sorting them.\n    // We can do this by iterating over\
    \ the even indicies of l_prime, and sorting them.\n    // We can do this by iterating\
    \ over the even indicies of l_prime, and sorting them.\n    // We can do this\
    \ by iterating over the even indicies of l_prime, and sorting them.\n    // We\
    \ can do this by iterating over the even indicies of l_prime, and sorting them.\n\
    \    // We can do this by iterating over the even indicies of l_prime, and sorting\
    \ them.\n    // We can do this by iterating over the even indicies of l_prime,\
    \ and sorting them.\n    // We can do this by iterating over the even indicies\
    \ of l_prime, and sorting them.\n    // We can do this by iterating over the even\
    \ indicies of l_prime, and sorting them.\n    // We can do this by iterating over\
    \ the even indicies of l_prime, and sorting them.\n    // We can do this by iterating\
    \ over the even indicies of l_prime, and sorting them.\n    // We can do this\
    \ by iterating over the even indicies of l_prime, and sorting them.\n    // We\
    \ can do this by iterating over the even indicies of l_prime, and sorting them.\n\
    \    // We can do this by iterating over the even indicies of l\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprzexc2fk_test.go:40:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list l' with the same length\
    \ as l\n    l_prime := make([]int, len(l))\n    // Copy the odd indicies of l\
    \ into l'\n    for i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n \
    \   }\n    // Sort the even indicies of l\n    for i := 1; i < len(l); i += 2\
    \ {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j]\
    \ {\n                temp := l[i]\n                l[i] = l[j]\n             \
    \   l[j] = temp\n            }\n        }\n    }\n    // Copy the even indicies\
    \ of l into l'\n    for i := 1; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp61_p8zji_test.go:54: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp61_p8zji_test.go:54:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\n\
    \    // Make a copy of the list, so we can modify it\n    l_copy := make([]int,\
    \ len(l))\n    copy(l_copy, l)\n\n    // Sort the even indicies\n    for i :=\
    \ 0; i < len(l_copy); i += 2 {\n        for j := i + 2; j < len(l_copy); j +=\
    \ 2 {\n            if l_copy[i] > l_copy[j] {\n                l_copy[i], l_copy[j]\
    \ = l_copy[j], l_copy[i]\n            }\n        }\n    }\n\n    return l_copy\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list that is the same length\
    \ as l\n    new_list := make([]int, len(l))\n    // Copy the odd indicies of l\
    \ into new_list\n    for i := 0; i < len(l); i += 2 {\n        new_list[i] = l[i]\n\
    \    }\n    // Sort the even indicies of l\n    for i := 1; i < len(l); i += 2\
    \ {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j]\
    \ {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\
    \    // Copy the even indicies of l into new_list\n    for i := 1; i < len(l);\
    \ i += 2 {\n        new_list[i] = l[i]\n    }\n    return new_list\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp9nmou5xq_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp9nmou5xq_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var even_indicies []int\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            even_indicies = append(even_indicies,\
    \ v)\n        }\n    }\n    fmt.Println(even_indicies)\n    for i, v := range\
    \ even_indicies {\n        for j := i + 1; j < len(even_indicies); j++ {\n   \
    \         if even_indicies[j] < v {\n                even_indicies[i], even_indicies[j]\
    \ = even_indicies[j], even_indicies[i]\n            }\n        }\n    }\n    fmt.Println(even_indicies)\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = even_indicies[i\
    \ / 2]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxnx1gfl_test.go:31:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = merge_sort(evens)\n    var result []int\n    for i, v := range odds\
    \ {\n        result = append(result, v)\n        result = append(result, evens[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvurl03sn_test.go:25:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    sort(evens)\n    for i, v := range odds {\n        l[i] = v\n    }\n    for\
    \ i, v := range evens {\n        l[i + 1] = v\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq28rvcl7_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    even_indicies := []int{}\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            even_indicies = append(even_indicies,\
    \ v)\n        }\n    }\n    for i, v := range l {\n        if i % 2 == 0 {\n \
    \           l[i] = even_indicies[i/2]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpre_m2puw_test.go:22:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i * 2] = v\n \
    \   }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckqf1i0p_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = evens[0]\n\
    \            evens = evens[1:]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglgcgeeu_test.go:22:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i++ {\n        if i\
    \ % 2 == 0 {\n            continue\n        }\n        for j := i; j < len(l);\
    \ j++ {\n            if j % 2 == 0 {\n                continue\n            }\n\
    \            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n     \
    \       }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp5izq4_ve_test.go:47: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp5izq4_ve_test.go:47:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i * 2] = v\n \
    \   }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckqf1i0p_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    even_indicies := []int{}\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            even_indicies = append(even_indicies,\
    \ v)\n        }\n    }\n    sort(even_indicies)\n    for i, v := range l {\n \
    \       if i % 2 == 0 {\n            l[i] = even_indicies[i/2]\n        }\n  \
    \  }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplptqnvbd_test.go:22:5: undefined: sort

    /tmp/tmplptqnvbd_test.go:23:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = sort(evens)\n    var result []int\n    for i, v := range odds {\n\
    \        result = append(result, v)\n        result = append(result, evens[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga7k3db3_test.go:25:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    sort(evens)\n    for i, v := range evens {\n        odds = append(odds[:i+1],\
    \ append([]int{v}, odds[i+1:]...)...)\n    }\n    return odds\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjr66n6rt_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement me\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmprm19vo_r_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprm19vo_r_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sorted_evens := merge_sort(evens)\n    for i, v := range l {\n     \
    \   if i % 2 == 0 {\n            l[i] = sorted_evens[i / 2]\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp94075oeb_test.go:22:21: undefined: merge_sort

    /tmp/tmp94075oeb_test.go:23:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list to return\n    l_prime\
    \ := make([]int, len(l))\n    // Copy the odd indicies of l into l_prime\n   \
    \ for i := 0; i < len(l); i += 2 {\n        l_prime[i] = l[i]\n    }\n    // Sort\
    \ the even indicies of l\n    for i := 1; i < len(l); i += 2 {\n        for j\
    \ := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n             \
    \   l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // Copy the\
    \ even indicies of l into l_prime\n    for i := 1; i < len(l); i += 2 {\n    \
    \    l_prime[i] = l[i]\n    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpmcszp_05_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpmcszp_05_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = merge_sort(evens)\n    for i, v := range evens {\n        odds =\
    \ append(odds[:i*2+1], append([]int{v}, odds[i*2+1:]...)...)\n    }\n    return\
    \ odds\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjvwgldot_test.go:25:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var even_list []int\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            even_list = append(even_list, v)\n \
    \       }\n    }\n    for i, v := range even_list {\n        for j := i + 1; j\
    \ < len(even_list); j++ {\n            if even_list[j] < v {\n               \
    \ even_list[i], even_list[j] = even_list[j], even_list[i]\n            }\n   \
    \     }\n    }\n    for i, v := range l {\n        if i % 2 == 0 {\n         \
    \   l[i] = even_list[i / 2]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo0lirdyw_test.go:29:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return l\n    }\n\
    \    l_odd := l[1::2]\n    l_even := l[0::2]\n    l_even = merge_sort(l_even)\n\
    \    for i := 0; i < len(l_even); i++ {\n        l[2*i] = l_even[i]\n    }\n \
    \   for i := 0; i < len(l_odd); i++ {\n        l[2*i+1] = l_odd[i]\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph9oafv5t_test.go:19:17: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073842
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp1wzjoyj1_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp1wzjoyj1_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp1wzjoyj1_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = evens[0]\n\
    \            evens = evens[1:]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglgcgeeu_test.go:22:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i*2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp3jzgtkxz_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp3jzgtkxz_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpf841kiu3_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpf841kiu3_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i += 2 {\n        for\
    \ j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n           \
    \     l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Write your code here\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpri__b098_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpri__b098_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    l_even := make([]int, len(l)/2)\n    for i :=\
    \ 0; i < len(l); i += 2 {\n        l_even[i/2] = l[i]\n    }\n    for i := 0;\
    \ i < len(l_even); i++ {\n        for j := i + 1; j < len(l_even); j++ {\n   \
    \         if l_even[i] > l_even[j] {\n                l_even[i], l_even[j] = l_even[j],\
    \ l_even[i]\n            }\n        }\n    }\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        l[i] = l_even[i/2]\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc000160000?, 0x3, 0x3})\n\t\
    /tmp/tmpr_rdp_ss_test.go:18 +0x134\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpr_rdp_ss_test.go:40 +0x6f\ntesting.tRunner(0xc000103380, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    if len(l) == 1 {\n        return l\n    }\n    if len(l) == 2 {\n       \
    \ if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n        return\
    \ l\n    }\n    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j <\
    \ len(l); j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j] =\
    \ l[j], l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) < 2 {\n        return l\n    }\n \
    \   for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement me\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmprm19vo_r_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprm19vo_r_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var sorted []int\n    var evens []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        }\n    }\n    sorted = evens\n    for i, v := range l {\n      \
    \  if i % 2 != 0 {\n            sorted = append(sorted, v)\n        }\n    }\n\
    \    return sorted\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpq97nmlqb_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpq97nmlqb_test.go:47: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=-5) %!s(int=-3) %!s(int=9)\
    \ %!s(int=123) %!s(int=-10) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpq97nmlqb_test.go:47:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=23) %!s(int=3) %!s(int=12) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=11)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // We'll use a merge sort to sort the even indicies.\n\
    \    // We'll need to keep track of the indicies of the even indicies of l.\n\
    \    even_indicies := make([]int, 0)\n    for i, v := range l {\n        if i\
    \ % 2 == 0 {\n            even_indicies = append(even_indicies, i)\n        }\n\
    \    }\n    // Now we'll sort the even indicies.\n    // We'll need to keep track\
    \ of the indicies of the even indicies of l.\n    even_indicies = merge_sort(even_indicies)\n\
    \    // Now we'll create a list l' that is identical to l in the odd indicies,\n\
    \    // while its values at the even indicies are equal to the values of the even\
    \ indicies of l, but sorted.\n    l_prime := make([]int, len(l))\n    for i, v\
    \ := range l {\n        if i % 2 == 0 {\n            l_prime[i] = l[even_indicies[i/2]]\n\
    \        } else {\n            l_prime[i] = v\n        }\n    }\n    return l_prime\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjhj2d946_test.go:19:12: v declared but not used

    /tmp/tmpjhj2d946_test.go:26:21: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp1wzjoyj1_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp1wzjoyj1_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp1wzjoyj1_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = evens[0]\n\
    \            evens = evens[1:]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglgcgeeu_test.go:22:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i*2] = v\n   \
    \ }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfiae3jn5_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i += 2 {\n        for\
    \ j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n           \
    \     l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return l\n    }\n\
    \    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i * 2] = v\n \
    \   }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckqf1i0p_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // First, we find the length of the list.\n\
    \    // We do this by creating a variable called length, and setting it equal\
    \ to the length of the list.\n    length := len(l)\n    // Then, we create a new\
    \ list, called sorted_list, which is the same length as l.\n    sorted_list :=\
    \ make([]int, length)\n    // We then iterate through the list, using the index\
    \ i.\n    for i := 0; i < length; i++ {\n        // If the index i is even, we\
    \ use the function sort_even_helper to sort the even indicies.\n        if i %\
    \ 2 == 0 {\n            sorted_list[i] = sort_even_helper(l[i], l[i+1])\n    \
    \    } else {\n            // Otherwise, we set the value at the index i of sorted_list\
    \ equal to the value at the index i of l.\n            sorted_list[i] = l[i]\n\
    \        }\n    }\n    // Finally, we return the sorted list.\n    return sorted_list\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxg6_pvwk_test.go:25:30: undefined: sort_even_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = evens[0]\n\
    \            evens = evens[1:]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpglgcgeeu_test.go:22:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := []int{}\n    odds := []int{}\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = merge_sort(evens)\n    for i, v := range evens {\n        odds =\
    \ append(odds[:i*2+1], append([]int{v}, odds[i*2+1:]...)...)\n    }\n    return\
    \ odds\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpr8yidyn1_test.go:25:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    fmt.Println(evens)\n    for i, v := range evens {\n        for j :=\
    \ i + 1; j < len(evens); j++ {\n            if evens[j] < v {\n              \
    \  evens[i], evens[j] = evens[j], evens[i]\n            }\n        }\n    }\n\
    \    fmt.Println(evens)\n    for i, v := range l {\n        if i % 2 == 0 {\n\
    \            l[i] = evens[i / 2]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7foivrnu_test.go:31:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    if len(l) == 1 {\n        return l\n    }\n    if len(l) == 2 {\n       \
    \ if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n        return\
    \ l\n    }\n    for i := 1; i < len(l); i += 2 {\n        for j := i + 2; j <\
    \ len(l); j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j] =\
    \ l[j], l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpmf9xq3ah_test.go:53: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpmf9xq3ah_test.go:53:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    if len(l) == 1 {\n        return l\n    }\n    if len(l) == 2 {\n       \
    \ if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n        return\
    \ l\n    }\n    var evens []int\n    for i := 0; i < len(l); i += 2 {\n      \
    \  evens = append(evens, l[i])\n    }\n    evens = merge_sort(evens)\n    for\
    \ i := 0; i < len(evens); i += 1 {\n        l[i * 2] = evens[i]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwike1am5_test.go:32:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    even := make([]int, 0)\n    odd := make([]int,\
    \ 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n            odd = append(odd,\
    \ v)\n        } else {\n            even = append(even, v)\n        }\n    }\n\
    \    even = merge_sort(even)\n    for i, v := range even {\n        odd = append(odd[:i*2+1],\
    \ append([]int{v}, odd[i*2+1:]...)...)\n    }\n    return odd\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc3uqv9w3_test.go:25:12: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = sort(evens)\n    for i, v := range odds {\n        l[i * 2] = v\n\
    \    }\n    for i, v := range evens {\n        l[i * 2 + 1] = v\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf9n5o0vs_test.go:25:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = merge_sort(evens)\n    var result []int\n    for i, v := range odds\
    \ {\n        result = append(result, v)\n        result = append(result, evens[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvurl03sn_test.go:25:13: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp37polqe8_test.go:50: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp37polqe8_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=-3) %!s(int=-5) %!s(int=5)\
    \ %!s(int=9) %!s(int=123) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp37polqe8_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=-12)\
    \ %!s(int=12) %!s(int=5) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = sort(evens)\n    var result []int\n    for i, v := range odds {\n\
    \        result = append(result, v)\n        result = append(result, evens[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga7k3db3_test.go:25:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i * 2] = v\n \
    \   }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckqf1i0p_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // create a new list to store the result\n \
    \   result := make([]int, len(l))\n    // copy the odd indicies of l to result\n\
    \    for i := 0; i < len(l); i += 2 {\n        result[i] = l[i]\n    }\n    //\
    \ sort the even indicies of l\n    for i := 1; i < len(l); i += 2 {\n        for\
    \ j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n           \
    \     l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    // copy the\
    \ even indicies of l to result\n    for i := 1; i < len(l); i += 2 {\n       \
    \ result[i] = l[i]\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpdkjtunbb_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpdkjtunbb_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    for i := 0; i < len(l); i += 2 {\n        for\
    \ j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n           \
    \     l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i * 2] = v\n \
    \   }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckqf1i0p_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpf841kiu3_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpf841kiu3_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i; j < len(evens); j++ {\n\
    \            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i*2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpqff4if1d_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpqff4if1d_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073843
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return l\n    }\n\
    \    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = sort(evens)\n    var result []int\n    for i, v := range odds {\n\
    \        result = append(result, v)\n        result = append(result, evens[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpga7k3db3_test.go:25:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement me\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmprm19vo_r_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmprm19vo_r_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement this function.\n    var evens\
    \ []int\n    var odds []int\n    var result []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            odds = append(odds, v)\n        } else {\n\
    \            evens = append(evens, v)\n        }\n    }\n    evens = sort(evens)\n\
    \    for i, v := range odds {\n        result = append(result, v)\n        result\
    \ = append(result, evens[i])\n    }\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq7udblnm_test.go:27:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    var odds []int\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    sort(evens)\n    for i, v := range evens {\n        odds = append(odds[:i*2+1],\
    \ append([]int{v}, odds[i*2+1:]...)...)\n    }\n    return odds\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48vd08_j_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073840
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var even_indicies []int\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            even_indicies = append(even_indicies,\
    \ v)\n        }\n    }\n    fmt.Println(even_indicies)\n    for i, v := range\
    \ even_indicies {\n        for j := i + 1; j < len(even_indicies); j++ {\n   \
    \         if even_indicies[j] < v {\n                even_indicies[i], even_indicies[j]\
    \ = even_indicies[j], even_indicies[i]\n            }\n        }\n    }\n    fmt.Println(even_indicies)\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = even_indicies[i\
    \ / 2]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptxnx1gfl_test.go:31:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return []int{}\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpi660twb5_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpi660twb5_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpi660twb5_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    sort(evens)\n    for i, v := range evens {\n        l[i * 2] = v\n \
    \   }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpckqf1i0p_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // Create a new list to return\n    ret := make([]int,\
    \ len(l))\n    // Copy the odd indicies\n    for i := 0; i < len(l); i += 2 {\n\
    \        ret[i] = l[i]\n    }\n    // Sort the even indicies\n    for i := 1;\
    \ i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n       \
    \     if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n\
    \        }\n    }\n    // Copy the even indicies\n    for i := 1; i < len(l);\
    \ i += 2 {\n        ret[i] = l[i]\n    }\n    return ret\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmptct9pu0r_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmptct9pu0r_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var even []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = even[i/2]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpda7z_znx_test.go:22:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    evens := []int{}\n    odds := []int{}\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    evens = sort(evens)\n    for i, v := range evens {\n        odds = append(odds[:i+1],\
    \ append([]int{v}, odds[i+1:]...)...)\n    }\n    return odds\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphb7r6did_test.go:25:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073844
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    if len(l) == 0 {\n        return l\n    }\n\
    \    if len(l) == 1 {\n        return l\n    }\n    if len(l) == 2 {\n       \
    \ if l[0] > l[1] {\n            l[0], l[1] = l[1], l[0]\n        }\n        return\
    \ l\n    }\n    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j <\
    \ len(l); j += 2 {\n            if l[i] > l[j] {\n                l[i], l[j] =\
    \ l[j], l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073843
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    evens = sort(evens)\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            l[i] = evens[i / 2]\n        }\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvrbwyrzu_test.go:22:13: undefined: sort

    /tmp/tmpvrbwyrzu_test.go:23:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: Implement me!\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb3hl8q4c_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb3hl8q4c_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073841
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmphn1aoabl_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmphn1aoabl_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073844
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    var evens []int\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            evens = append(evens, v)\n        }\n  \
    \  }\n    for i, v := range evens {\n        for j := i + 1; j < len(evens); j++\
    \ {\n            if evens[j] < v {\n                evens[i], evens[j] = evens[j],\
    \ evens[i]\n            }\n        }\n    }\n    for i, v := range evens {\n \
    \       l[i * 2] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpeqfrxw14_test.go:50: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpeqfrxw14_test.go:50:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=5) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073839
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([1,\
    \ 2, 3])\n// [1, 2, 3]\n// >>> sort_even([5, 6, 3, 4])\n// [3, 6, 5, 4]\nfunc\
    \ sort_even(l []int) []int {\n    // TODO: implement this function\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp2213zs18_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2213zs18_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073839
