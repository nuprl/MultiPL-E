language: go_test.go
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, n := range lst {\n        sum += int(n * n)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxy0mrz01_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxy0mrz01_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpxy0mrz01_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpxy0mrz01_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, val := range lst {\n        sum += int(val * val)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdyjb13y0_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdyjb13y0_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpdyjb13y0_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpdyjb13y0_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbsftw2kv_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbsftw2kv_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbsftw2kv_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbsftw2kv_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\
    \ = 0\n    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbsftw2kv_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbsftw2kv_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbsftw2kv_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbsftw2kv_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v) * int(v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpe4hq38sp_test.go:49: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe4hq38sp_test.go:49:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpe4hq38sp_test.go:49: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, num := range lst {\n        sum += int(num * num)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmps60we95b_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmps60we95b_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmps60we95b_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmps60we95b_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, num := range lst {\n        sum += int(num * num)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmps60we95b_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmps60we95b_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmps60we95b_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmps60we95b_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v) * int(v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpe4hq38sp_test.go:49: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe4hq38sp_test.go:49:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpe4hq38sp_test.go:49: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var result\
    \ int\n    for _, v := range lst {\n        result += int(v * v)\n    }\n    return\
    \ result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpfmrbxmhg_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpfmrbxmhg_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpfmrbxmhg_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpfmrbxmhg_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var result\
    \ int\n    for _, v := range lst {\n        result += int(v * v)\n    }\n    return\
    \ result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpfmrbxmhg_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpfmrbxmhg_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpfmrbxmhg_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpfmrbxmhg_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdcu9w53b_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdcu9w53b_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpdcu9w53b_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpdcu9w53b_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    // your code\
    \ here\n    return 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpjscxcpov_test.go:46: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpjscxcpov_test.go:46:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpjscxcpov_test.go:46: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpjscxcpov_test.go:46:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpjscxcpov_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpjscxcpov_test.go:46:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpjscxcpov_test.go:46: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjscxcpov_test.go:46:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpjscxcpov_test.go:46: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpjscxcpov_test.go:46:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpjscxcpov_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp37uet34e_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp37uet34e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, num := range lst {\n        sum += int(num * num)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmps60we95b_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmps60we95b_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmps60we95b_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmps60we95b_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v) * int(v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpe4hq38sp_test.go:49: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpe4hq38sp_test.go:49:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpe4hq38sp_test.go:49: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v*v + 0.5)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpynr8bd4e_test.go:49: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpynr8bd4e_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5igzat7m_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5igzat7m_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
    \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should\
    \ be 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
    \ the output should be 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n\
    \    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzwa9smoz_test.go:49: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzwa9smoz_test.go:49:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074753
