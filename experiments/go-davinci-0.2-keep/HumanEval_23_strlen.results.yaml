language: go_test.go
name: HumanEval_23_strlen
results:
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var length int\n    for range myString\
    \ {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var length int\n    for range myString\
    \ {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    var length int\n    for range myString\
    \ {\n        length++\n    }\n    return length\n}\n\nfunc TestStrlen(t *testing.T)\
    \ {\n  candidate := strlen\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\"\
    ), expected: 0 },\n     { actual: candidate(\"x\"), expected: 1 },\n     { actual:\
    \ candidate(\"asdasnakj\"), expected: 9 },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
- exit_code: 0
  program: "package strlen_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return length of given string\n// >>> strlen('')\n// 0\n// >>> strlen('abc')\n\
    // 3\nfunc strlen(myString string) int {\n    return len(myString)\n}\n\nfunc\
    \ TestStrlen(t *testing.T) {\n  candidate := strlen\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"x\"),\
    \ expected: 1 },\n     { actual: candidate(\"asdasnakj\"), expected: 9 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073169
