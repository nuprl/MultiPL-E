language: go_test.go
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 2
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n     \
    \       result = append(result, get_name(v))\n        }\n    }\n    return result\n\
    }\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ew0d9a9_test.go:28:37: undefined: get_name

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    var sorted []int\n    var sorted_map map[int]int\n    var sorted_map_keys\
    \ []int\n    var sorted_map_keys_length int\n    var i int\n    var j int\n  \
    \  var k int\n    var l int\n    var m int\n    var n int\n    var o int\n   \
    \ var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var\
    \ u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z\
    \ int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n\
    \    var f int\n    var g int\n    var h int\n    var i_ int\n    var j_ int\n\
    \    var k_ int\n    var l_ int\n    var m_ int\n    var n_ int\n    var o_ int\n\
    \    var p_ int\n    var q_ int\n    var r_ int\n    var s_ int\n    var t_ int\n\
    \    var u_ int\n    var v_ int\n    var w_ int\n    var x_ int\n    var y_ int\n\
    \    var z_ int\n    var a_ int\n    var b_ int\n    var c_ int\n    var d_ int\n\
    \    var e_ int\n    var f_ int\n    var g_ int\n    var h_ int\n    var i__ int\n\
    \    var j__ int\n    var k__ int\n    var l__ int\n    var m__ int\n    var n__\
    \ int\n    var o__ int\n    var p__ int\n    var q__ int\n    var r__ int\n  \
    \  var s__ int\n    var t__ int\n    var u__ int\n    var v__ int\n    var w__\
    \ int\n    var x__ int\n    var y__ int\n    var z__ int\n    var a__ int\n  \
    \  var b__ int\n    var c__ int\n    var d__ int\n    var e__ int\n    var f__\
    \ int\n    var g__ int\n    var h__ int\n    var i___ int\n    var j___ int\n\
    \    var k___ int\n    var l___ int\n   \nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpuzhgpcys_test.go:113:6: expected ''('', found TestBy_Length

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsuaaquyf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsuaaquyf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsuaaquyf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsuaaquyf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    var sorted []int\n    var reversed []int\n    var temp int\n \
    \   var i int\n    var j int\n    var k int\n    var l int\n    var m int\n  \
    \  var n int\n    var o int\n    var p int\n    var q int\n    var r int\n   \
    \ var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var\
    \ x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c\
    \ int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n\
    \    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n\
    \    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n\
    \    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n\
    \    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n\
    \    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n\
    \    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n\
    \    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n\
    \    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n\
    \    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n\
    \    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n\
    \    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n\
    \    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3\n\
    func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
    Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
    \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
    \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1,\
    \ -1, 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual:\
    \ candidate([]int{9, 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"\
    } },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmps6ghqecq_test.go:114:9: missing variable type or initialization

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected:\
    \ []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"} },\n     { actual: candidate([]int{}), expected: []string{} },\n  \
    \   { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"} },\n  \
    \   { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\", \"\
    Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsax9en5o_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsax9en5o_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsax9en5o_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    var result\
    \ []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n      \
    \      result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpo1907c0t_test.go:51: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[2 1 1 4 5 8 2 3]'\n    --- FAIL: TestBy_Length/test_num__2\
    \ (0.00s)\n        tmpo1907c0t_test.go:51: expected '[One]', got '[1]'\n    ---\
    \ FAIL: TestBy_Length/test_num__3 (0.00s)\n        tmpo1907c0t_test.go:51: expected\
    \ '[Three Two One]', got '[1 3 2]'\n    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n\
    \        tmpo1907c0t_test.go:51: expected '[Nine Eight Four]', got '[9 4 8]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmplgye4sbp_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmplgye4sbp_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmplgye4sbp_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    return\
    \ []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate := by_length\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}),\
    \ expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpglfhxi1y_test.go:45: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpglfhxi1y_test.go:45: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpglfhxi1y_test.go:45:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return nil\n}\n\nfunc TestBy_Length(t *testing.T) {\n  candidate\
    \ := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2,\
    \ 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}), expected: []string{}\
    \ },\n     { actual: candidate([]int{1, -1, 55}), expected: []string{\"One\"}\
    \ },\n     { actual: candidate([]int{1, -1, 3, 2}), expected: []string{\"Three\"\
    , \"Two\", \"One\"} },\n     { actual: candidate([]int{9, 4, 8}), expected: []string{\"\
    Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpsdl_f1i9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpsdl_f1i9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpsdl_f1i9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // your\
    \ code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T) {\n\
    \  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmpu9b1b1p9_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmpu9b1b1p9_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmpu9b1b1p9_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074976
- exit_code: 1
  program: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
    // reverse the resulting array, and then replace each digit by its corresponding\
    \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
    , \"Eight\", \"Nine\".\n// For example:\n// arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\
    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n// -> reverse arr -> [8, 5, 4, 3,\
    \ 2, 2, 1, 1]\n// return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"\
    Two\", \"One\", \"One\"]\n// If the array is empty, return an empty array:\n//\
    \ arr = []\n// return []\n// If the array has any strange number ignore it:\n\
    // arr = [1, -1 , 55] \n// -> sort arr -> [-1, 1, 55]\n// -> reverse arr -> [55,\
    \ 1, -1]\n// return = ['One']\nfunc by_length(arr []int) []string {\n    // Write\
    \ your code here\n    return []string{}\n}\n\nfunc TestBy_Length(t *testing.T)\
    \ {\n  candidate := by_length\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{2,\
    \ 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n     { actual: candidate([]int{}),\
    \ expected: []string{} },\n     { actual: candidate([]int{1, -1, 55}), expected:\
    \ []string{\"One\"} },\n     { actual: candidate([]int{1, -1, 3, 2}), expected:\
    \ []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
    \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestBy_Length (0.00s)\n    --- FAIL: TestBy_Length/test_num__0\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Eight Five Four Three Two\
    \ Two One One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__2 (0.00s)\n \
    \       tmp4p1sz0jf_test.go:46: expected '[One]', got '[]'\n    --- FAIL: TestBy_Length/test_num__3\
    \ (0.00s)\n        tmp4p1sz0jf_test.go:46: expected '[Three Two One]', got '[]'\n\
    \    --- FAIL: TestBy_Length/test_num__4 (0.00s)\n        tmp4p1sz0jf_test.go:46:\
    \ expected '[Nine Eight Four]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074976
