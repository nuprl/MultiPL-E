language: go_test.go
name: HumanEval_110_exchange
results:
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: Implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 != 0 {\n            for j := 0; j < len(lst2);\
    \ j++ {\n                if lst2[j] % 2 != 0 {\n                    continue\n\
    \                } else {\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 != 0 {\n       \
    \     return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpllp_sap9_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, n :=\
    \ range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, n := range lst2 {\n        if n % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp48oe504j_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: Implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpllp_sap9_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    return \"YES\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpfqx48ziz_test.go:42: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpfqx48ziz_test.go:42: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpfqx48ziz_test.go:42:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpllp_sap9_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for i, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for j, w := range lst2 {\n             \
    \   if w % 2 == 0 {\n                    lst1[i] = w\n                    lst2[j]\
    \ = v\n                    break\n                }\n            }\n        }\n\
    \    }\n    for _, v := range lst1 {\n        if v % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement this function\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpng6j1doj_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpng6j1doj_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpng6j1doj_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpng6j1doj_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for i, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for j, v2 := range lst2 {\n            \
    \    if v2 % 2 != 0 {\n                    lst1[i] = v2\n                    lst2[j]\
    \ = v\n                    break\n                }\n            }\n        }\n\
    \    }\n    for _, v := range lst1 {\n        if v % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T)\
    \ {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp0p89hkdp_test.go:58: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmp0p89hkdp_test.go:58: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmp0p89hkdp_test.go:58:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    return \"YES\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpfqx48ziz_test.go:42: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpfqx48ziz_test.go:42: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpfqx48ziz_test.go:42:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code goes here\n \
    \   return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp15tvi8tf_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp15tvi8tf_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp15tvi8tf_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement this function\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpng6j1doj_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpng6j1doj_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpng6j1doj_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpng6j1doj_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if odds < 0 || evens < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpvthlbwa1_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    var evens, odds int\n    for\
    \ _, v := range lst1 {\n        if v % 2 == 0 {\n            evens++\n       \
    \ } else {\n            odds++\n        }\n    }\n    for _, v := range lst2 {\n\
    \        if v % 2 == 0 {\n            odds++\n        } else {\n            evens++\n\
    \        }\n    }\n    if evens == len(lst1) {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmp3ugmugra_test.go:60: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement this function\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpng6j1doj_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpng6j1doj_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpng6j1doj_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpng6j1doj_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpng6j1doj_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    return \"YES\"\n}\n\nfunc\
    \ TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmpfqx48ziz_test.go:42: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmpfqx48ziz_test.go:42: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__5 (0.00s)\n        tmpfqx48ziz_test.go:42:\
    \ expected 'NO', got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, n :=\
    \ range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, n := range lst2 {\n        if n % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp48oe504j_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: Implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    if len(lst1) == 0 || len(lst2)\
    \ == 0 {\n        return \"NO\"\n    }\n    for i := 0; i < len(lst1); i++ {\n\
    \        if lst1[i] % 2 == 1 {\n            for j := 0; j < len(lst2); j++ {\n\
    \                if lst2[j] % 2 == 0 {\n                    lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                    break\n                }\n           \
    \ }\n        }\n    }\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 1 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, n :=\
    \ range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, n := range lst2 {\n        if n % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp48oe504j_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, n :=\
    \ range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, n := range lst2 {\n        if n % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp48oe504j_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, n :=\
    \ range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, n := range lst2 {\n        if n % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp48oe504j_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code goes here\n \
    \   return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp15tvi8tf_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp15tvi8tf_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp15tvi8tf_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 != 0 {\n            for j := 0; j < len(lst2);\
    \ j++ {\n                if lst2[j] % 2 != 0 {\n                    continue\n\
    \                } else {\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    for i := 0; i < len(lst1); i++ {\n        if lst1[i] % 2 != 0 {\n       \
    \     return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code goes here\n \
    \   return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp15tvi8tf_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmp15tvi8tf_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmp15tvi8tf_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmp15tvi8tf_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 != 0 {\n            for j := 0; j < len(lst2);\
    \ j++ {\n                if lst2[j] % 2 != 0 {\n                    continue\n\
    \                }\n                lst1[i], lst2[j] = lst2[j], lst1[i]\n    \
    \            break\n            }\n        }\n    }\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n\
    \    }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: Implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpcqkv0q2y_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpcqkv0q2y_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpcqkv0q2y_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evenCount := 0\n    for _,\
    \ num := range lst1 {\n        if num % 2 == 0 {\n            evenCount++\n  \
    \      }\n    }\n    oddCount := len(lst1) - evenCount\n    for _, num := range\
    \ lst2 {\n        if num % 2 == 0 {\n            evenCount--\n        } else {\n\
    \            oddCount--\n        }\n    }\n    if evenCount <= 0 && oddCount <=\
    \ 0 {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\nfunc TestExchange(t\
    \ *testing.T) {\n  candidate := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmperx7gsht_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 0
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    if len(lst1) == 0 || len(lst2)\
    \ == 0 {\n        return \"NO\"\n    }\n    for i := 0; i < len(lst1); i++ {\n\
    \        if lst1[i] % 2 == 1 {\n            for j := 0; j < len(lst2); j++ {\n\
    \                if lst2[j] % 2 == 0 {\n                    lst1[i], lst2[j] =\
    \ lst2[j], lst1[i]\n                    break\n                }\n           \
    \ }\n        }\n    }\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 == 1 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for i := 0; i < len(lst1);\
    \ i++ {\n        if lst1[i] % 2 != 0 {\n            for j := 0; j < len(lst2);\
    \ j++ {\n                if lst2[j] % 2 != 0 {\n                    lst1[i], lst2[j]\
    \ = lst2[j], lst1[i]\n                    break\n                }\n         \
    \   }\n        }\n    }\n    for i := 0; i < len(lst1); i++ {\n        if lst1[i]\
    \ % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}), expected: \"\
    YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5, 3, 4}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2, 1, 4, 3}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 4}), expected:\
    \ \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2, 6, 3}), expected:\
    \ \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9}, []int{3, 5, 5,\
    \ 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100, 200}, []int{200,\
    \ 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpk26dj__g_test.go:57: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__2 (0.00s)\n        tmpk26dj__g_test.go:57: expected 'YES',\
    \ got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n        tmpk26dj__g_test.go:57:\
    \ expected 'YES', got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, n :=\
    \ range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, n := range lst2 {\n        if n % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmp48oe504j_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    var evens, odds int\n    for\
    \ _, n := range lst1 {\n        if n % 2 == 0 {\n            evens++\n       \
    \ } else {\n            odds++\n        }\n    }\n    for _, n := range lst2 {\n\
    \        if n % 2 == 0 {\n            odds++\n        } else {\n            evens++\n\
    \        }\n    }\n    if evens > odds {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmp6f1t6pi2_test.go:60: expected 'YES', got 'NO'\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmp6f1t6pi2_test.go:60: expected 'NO',\
    \ got 'YES'\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmp6f1t6pi2_test.go:60:\
    \ expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n \
    \       tmp6f1t6pi2_test.go:60: expected 'YES', got 'NO'\n    --- FAIL: TestExchange/test_num__5\
    \ (0.00s)\n        tmp6f1t6pi2_test.go:60: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__6 (0.00s)\n        tmp6f1t6pi2_test.go:60: expected 'YES',\
    \ got 'NO'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpllp_sap9_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO: implement\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpacpik9xn_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpacpik9xn_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpacpik9xn_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    var evens int\n    for _,\
    \ n := range lst1 {\n        if n % 2 == 0 {\n            evens++\n        }\n\
    \    }\n    for _, n := range lst2 {\n        if n % 2 == 0 {\n            evens--\n\
    \        }\n    }\n    if evens == 0 {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__3\
    \ (0.00s)\n        tmpnbi6_ka7_test.go:56: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    evens := 0\n    for _, v :=\
    \ range lst1 {\n        if v % 2 == 0 {\n            evens++\n        }\n    }\n\
    \    odds := len(lst1) - evens\n    for _, v := range lst2 {\n        if v % 2\
    \ == 0 {\n            odds--\n        } else {\n            evens--\n        }\n\
    \        if evens < 0 || odds < 0 {\n            return \"NO\"\n        }\n  \
    \  }\n    return \"YES\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate\
    \ := exchange\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 2, 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{1, 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2,\
    \ 3, 4}, []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__6\
    \ (0.00s)\n        tmpllp_sap9_test.go:59: expected 'YES', got 'NO'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    for _, v := range lst1 {\n\
    \        if v % 2 != 0 {\n            for _, v2 := range lst2 {\n            \
    \    if v2 % 2 == 0 {\n                    return \"YES\"\n                }\n\
    \            }\n            return \"NO\"\n        }\n    }\n    return \"YES\"\
    \n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__1\
    \ (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO', got 'YES'\n    --- FAIL:\
    \ TestExchange/test_num__4 (0.00s)\n        tmp_nmalvdb_test.go:52: expected 'NO',\
    \ got 'YES'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpfy_ejh78_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpfy_ejh78_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpfy_ejh78_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // TODO - Add your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmpl7iewku8_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmpl7iewku8_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmpl7iewku8_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2,\
    \ 3, 4}), expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1,\
    \ 5, 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4},\
    \ []int{2, 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5,\
    \ 7, 3}, []int{2, 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3,\
    \ 2, 6, 1, 8, 9}, []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual:\
    \ candidate([]int{100, 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmphn0qwguc_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmphn0qwguc_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmphn0qwguc_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
- exit_code: 1
  program: "package exchange_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // In this problem, you will implement a function that takes two lists of numbers,\n\
    // and determines whether it is possible to perform an exchange of elements\n\
    // between them to make lst1 a list of only even numbers.\n// There is no limit\
    \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
    \ to exchange elements between the lst1 and lst2 to make\n// all the elements\
    \ of lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
    // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4],\
    \ [1, 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
    func exchange(lst1 []int, lst2 []int) string {\n    // your code here\n    return\
    \ \"\"\n}\n\nfunc TestExchange(t *testing.T) {\n  candidate := exchange\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 2, 3, 4}),\
    \ expected: \"YES\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{1, 5,\
    \ 3, 4}), expected: \"NO\" },\n     { actual: candidate([]int{1, 2, 3, 4}, []int{2,\
    \ 1, 4, 3}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 4}), expected: \"YES\" },\n     { actual: candidate([]int{5, 7, 3}, []int{2,\
    \ 6, 3}), expected: \"NO\" },\n     { actual: candidate([]int{3, 2, 6, 1, 8, 9},\
    \ []int{3, 5, 5, 1, 1, 1}), expected: \"NO\" },\n     { actual: candidate([]int{100,\
    \ 200}, []int{200, 200}), expected: \"YES\" },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestExchange (0.00s)\n    --- FAIL: TestExchange/test_num__0\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL:\
    \ TestExchange/test_num__1 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__2 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__3 (0.00s)\n   \
    \     tmph7o1msk9_test.go:43: expected 'YES', got ''\n    --- FAIL: TestExchange/test_num__4\
    \ (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO', got ''\n    --- FAIL:\
    \ TestExchange/test_num__5 (0.00s)\n        tmph7o1msk9_test.go:43: expected 'NO',\
    \ got ''\n    --- FAIL: TestExchange/test_num__6 (0.00s)\n        tmph7o1msk9_test.go:43:\
    \ expected 'YES', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073580
