language: go_test.go
name: HumanEval_62_derivative
results:
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp8yxbz0p3_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    dxs := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        dxs[i - 1] = xs[i] * i\n    }\n    return dxs\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var res []int\n    for\
    \ i := 1; i < len(xs); i++ {\n        res = append(res, xs[i] * i)\n    }\n  \
    \  return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    n := len(xs) - 1\n    ys := make([]int, n)\n   \
    \ for i := 0; i < n; i++ {\n        ys[i] = xs[i] * (n - i)\n    }\n    return\
    \ ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp82f72o3__test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=12) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp82f72o3__test.go:44: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp82f72o3__test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=6) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp82f72o3__test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=2) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(res); i++ {\n        res[i] = xs[i] * (i + 1)\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpn9ouze3k_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp3mwvlskw_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3mwvlskw_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp3mwvlskw_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp3mwvlskw_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprqjdglea_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs)-1)\n    for i := 0;\
    \ i < len(result); i++ {\n        result[i] = xs[i+1] * (i+1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp30lakaqa_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4lv7ggca_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp3mwvlskw_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3mwvlskw_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp3mwvlskw_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp3mwvlskw_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i]\
    \ *= i + 1\n    }\n    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4lv7ggca_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if\
    \ n <= 1 {\n        return []int{}\n    }\n    res := make([]int, n - 1)\n   \
    \ for i := 1; i < n; i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return\
    \ res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 0; i < len(res); i++ {\n\
    \        res[i] = xs[i + 1] * (i + 1)\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp19i0iokv_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqcxp76uh_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs)-1)\n    for i := 0; i\
    \ < len(res); i++ {\n        res[i] = xs[i+1] * (i+1)\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp3mwvlskw_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3mwvlskw_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp3mwvlskw_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp3mwvlskw_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // xs[1] + 2 * xs[2] *\
    \ x + 3 * xs[3] * x^2 + ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 +\
    \ ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n    // xs[1] +\
    \ 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3]\
    \ * x^2 + ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n    //\
    \ xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n    // xs[1] + 2 * xs[2] * x\
    \ + 3 * xs[3] * x^2 + ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n\
    \    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n    // xs[1] + 2 * xs[2]\
    \ * x + 3 * xs[3] * x^2 + ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2\
    \ + ....\n    // xs[1] + 2 * xs[2] * x + 3 * xs[3] * x^2 + ....\n    // xs[1]\
    \ + 2 * xs[2] * x + 3 * xs[3] * x^\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpolmvdui6_test.go:37:6: expected ''('', found TestDerivative

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073708
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n\n    result := make([]int, len(xs) - 1)\n    for\
    \ i := 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpz14ik843_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpz14ik843_test.go:44: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpz14ik843_test.go:44: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpz14ik843_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    var ys []int\n    for i := 1; i < len(xs); i++ {\n        ys = append(ys,\
    \ xs[i] * i)\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpe_nknua1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(res); i++ {\n        res[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4lv7ggca_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4lv7ggca_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    res := make([]int, len(xs) - 1)\n    for i := 0; i < len(res); i++\
    \ {\n        res[i] = xs[i + 1] * (i + 1)\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkp712j4m_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprqjdglea_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1yyqn_c1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if\
    \ n == 0 {\n        return xs\n    }\n    ys := make([]int, n - 1)\n    for i\
    \ := 0; i < n - 1; i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i]\
    \ *= i + 1\n    }\n    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprqjdglea_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4lv7ggca_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(res); i++ {\n        res[i] = xs[i] * (i + 1)\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpn9ouze3k_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp4lv7ggca_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp4lv7ggca_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(res); i++ {\n        res[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp30lakaqa_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 0; i < len(result); i++ {\n        result[i] = xs[i\
    \ + 1] * (i + 1)\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T)\
    \ {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n\n    ys := make([]int, len(xs) - 1)\n    for i\
    \ := 0; i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ ys\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var res []int\n    for i := 1; i < len(xs); i++\
    \ {\n        res = append(res, xs[i] * i)\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 0; i < len(res); i++ {\n\
    \        res[i] = xs[i] * (i + 1)\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpmqfv8wko_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpmqfv8wko_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpmqfv8wko_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpmqfv8wko_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpmqfv8wko_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(res); i++ {\n        res[i] = xs[i] * (i + 1)\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpn9ouze3k_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    // TODO: implement this\
    \ function.\n    return []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp32b8u692_test.go:37: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n\
    \        tmp32b8u692_test.go:37: expected '[%!s(int=2) %!s(int=6)]', got '[]'\n\
    \    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp32b8u692_test.go:37:\
    \ expected '[%!s(int=2) %!s(int=2)]', got '[]'\n    --- FAIL: TestDerivative/test_num__3\
    \ (0.00s)\n        tmp32b8u692_test.go:37: expected '[%!s(int=2) %!s(int=2) %!s(int=0)\
    \ %!s(int=16)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(dxs); i++ {\n        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i] * (i + 1)\n    }\n    return result\n}\n\n\
    func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20}\
    \ },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n   \
    \  { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual:\
    \ candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual:\
    \ candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmp6er0h68w_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp6er0h68w_test.go:46: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmp6er0h68w_test.go:46: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmp6er0h68w_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp6er0h68w_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    result := make([]int,\
    \ len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i]\
    \ * i\n    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprqjdglea_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    res := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        res[i - 1] = xs[i] * i\n    }\n    return res\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmprqjdglea_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n\
    \        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpkh_ebozg_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var result []int\n  \
    \  for i := 1; i < len(xs); i++ {\n        result = append(result, xs[i] * i)\n\
    \    }\n    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate\
    \ := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1,\
    \ 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp1f1mrt6b_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        ys[i - 1] = xs[i] * i\n    }\n    return ys\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i]\
    \ *= i + 1\n    }\n    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    xs = xs[1:]\n    for i := range xs {\n        xs[i]\
    \ *= i + 1\n    }\n    return xs\n}\n\nfunc TestDerivative(t *testing.T) {\n \
    \ candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++\
    \ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpr842y0y9_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ret := make([]int, len(xs) - 1)\n    for i := 0; i < len(ret); i++ {\n\
    \        ret[i] = xs[i + 1] * (i + 1)\n    }\n    return ret\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpw8260g2a_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    ys := make([]int, len(xs) - 1)\n    for i := 0; i < len(ys); i++ {\n\
    \        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n}\n\nfunc TestDerivative(t\
    \ *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual \
    \  interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3,\
    \ 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0,\
    \ 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected:\
    \ []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpqcxp76uh_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    var result []int\n    for i, x := range xs {\n        if i == 0 {\n \
    \           continue\n        }\n        result = append(result, x * i)\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp457vtosm_test.go:49: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    if len(xs) == 1 {\n        return []int{0}\n   \
    \ }\n    var ys []int\n    for i := 1; i < len(xs); i++ {\n        ys = append(ys,\
    \ xs[i] * i)\n    }\n    return ys\n}\n\nfunc TestDerivative(t *testing.T) {\n\
    \  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}),\
    \ expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected:\
    \ []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmpe_nknua1_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073709
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    dxs := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(dxs); i++ {\n        dxs[i] = xs[i + 1] * (i + 1)\n    }\n    return\
    \ dxs\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073709
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n\
    \    }\n    result := make([]int, len(xs) - 1)\n    for i := 0; i < len(result);\
    \ i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4\
    \ (0.00s)\n        tmp30lakaqa_test.go:46: expected '[]', got '[%!s(int=0)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    var res []int\n    for\
    \ i := 1; i < len(xs); i++ {\n        res = append(res, xs[i] * i)\n    }\n  \
    \  return res\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 1;\
    \ i < len(xs); i++ {\n        res[i - 1] = xs[i] * i\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 1
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    res := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(res); i++ {\n        res[i] = xs[i] * (i + 1)\n    }\n    return res\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=1) %!s(int=4) %!s(int=12)\
    \ %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=6) %!s(int=16)]'\n    ---\
    \ FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpn9ouze3k_test.go:43: expected\
    \ '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__2\
    \ (0.00s)\n        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2)]',\
    \ got '[%!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n\
    \        tmpn9ouze3k_test.go:43: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]',\
    \ got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    ys := make([]int, len(xs) - 1)\n    for i := 0;\
    \ i < len(ys); i++ {\n        ys[i] = xs[i + 1] * (i + 1)\n    }\n    return ys\n\
    }\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return\
    \ result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    var result []int\n    for i := 1; i < len(xs); i++\
    \ {\n        result = append(result, xs[i] * i)\n    }\n    return result\n}\n\
    \nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1,\
    \ 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2,\
    \ 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n\
    \     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16}\
    \ },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073707
- exit_code: 0
  program: "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
    \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n//\
    \ >>> derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2,\
    \ 3])\n// [2, 6]\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n \
    \       return xs\n    }\n    result := make([]int, len(xs) - 1)\n    for i :=\
    \ 0; i < len(result); i++ {\n        result[i] = xs[i + 1] * (i + 1)\n    }\n\
    \    return result\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected:\
    \ []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2,\
    \ 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2,\
    \ 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073707
