language: go_test.go
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, v := range l {\n        for j, w := range l {\n            for\
    \ k, x := range l {\n                if i != j && i != k && j != k {\n       \
    \             if v + w + x == 0 {\n                        return true\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, v := range l {\n        for j, v2 := range l {\n            for\
    \ k, v3 := range l {\n                if i != j && i != k && j != k {\n      \
    \              if v + v2 + v3 == 0 {\n                        return true\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 2
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // check if there are at least 3 elements\n    if len(l) < 3 {\n    \
    \    return false\n    }\n\n    // sort the list\n    sorted := merge_sort(l)\n\
    \n    // check if there are 3 elements that sum to zero\n    for i := 0; i < len(sorted)\
    \ - 2; i++ {\n        if sorted[i] + sorted[i + 1] + sorted[i + 2] == 0 {\n  \
    \          return true\n        }\n    }\n\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbhtunw5_test.go:28:15: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074686
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l)\
    \ - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n            for k\
    \ := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // Your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpp_eyn6sz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpp_eyn6sz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: Implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpoff3huzi_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpoff3huzi_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // YOUR CODE HERE\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmphui7s3he_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmphui7s3he_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, v := range l {\n        for j, w := range l {\n            for\
    \ k, x := range l {\n                if i != j && i != k && j != k {\n       \
    \             if v + w + x == 0 {\n                        return true\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz7now6db_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz7now6db_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz7now6db_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz7now6db_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, _ := range l {\n        for j, _ := range l {\n            for\
    \ k, _ := range l {\n                if i != j && j != k && i != k {\n       \
    \             if l[i] + l[j] + l[k] == 0 {\n                        return true\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, v := range l {\n        for j, w := range l {\n            for\
    \ k, x := range l {\n                if i != j && i != k && j != k {\n       \
    \             if v + w + x == 0 {\n                        return true\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, v := range l {\n        for j, w := range l {\n            for\
    \ k, x := range l {\n                if i != j && i != k && j != k {\n       \
    \             if v + w + x == 0 {\n                        return true\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l)\
    \ - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n            for k\
    \ := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i, v := range l {\n        for j, w := range l {\n            for\
    \ k, x := range l {\n                if i != j && i != k && j != k {\n       \
    \             if v + w + x == 0 {\n                        return true\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l)\
    \ - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n            for k\
    \ := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function.\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpziwulgo2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpziwulgo2_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l)\
    \ - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n            for k\
    \ := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n\
    \                    return true\n                }\n            }\n        }\n\
    \    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n\
    \  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpkbujjbvo_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpkbujjbvo_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    if len(l) < 3 {\n        return false\n    }\n    for i := 0; i < len(l);\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1;\
    \ k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n          \
    \          return true\n                }\n            }\n        }\n    }\n \
    \   return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate\
    \ := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp9yehw1fu_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp9yehw1fu_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpusocs69p_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpusocs69p_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc1tstcgz_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc1tstcgz_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074687
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++\
    \ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] +\
    \ l[j] + l[k] == 0 {\n                    return true\n                }\n   \
    \         }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074687
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([1, 3, 5, 0])\n// False\n\
    // >>> triples_sum_to_zero([1, 3, -2, 1])\n// True\n// >>> triples_sum_to_zero([1,\
    \ 2, 3, 7])\n// False\n// >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n// True\n\
    // >>> triples_sum_to_zero([1])\n// False\nfunc triples_sum_to_zero(l []int) bool\
    \ {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmplkdp3xip_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmplkdp3xip_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074687
