name: HumanEval_111_histogram
language: go_test.go
prompt: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a string representing a space separated lowercase letters, return a dictionary\n\
  // of the letter with the most repetition and containing the corresponding count.\n\
  // If several letters have the same occurrence, return all of them.\n// Example:\n\
  // histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a':\
  \ 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b\
  \ b a') == {'b': 4}\n// histogram('') == {}\nfunc histogram(test string) map[string]int\
  \ {\n"
tests: "func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\"\
  : 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
  a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
  a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
  r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
  \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
  \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n\
  \     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"\
  a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var result = make(map[string]int)\n    var max = 0\n    for _,\
    \ letter := range test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    var result = make(map[string]int)\n    for _, letter := range test {\n    \
    \    result[string(letter)]++\n    }\n    return result\n}\n", "    var result\
    \ map[string]int = make(map[string]int)\n    var max int = 0\n    for _, char\
    \ := range test {\n        result[string(char)]++\n        if result[string(char)]\
    \ > max {\n            max = result[string(char)]\n        }\n    }\n    for key,\
    \ value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, c := range test {\n        result[string(c)]++\n\
    \        if result[string(c)] > max {\n            max = result[string(c)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n", "    var result = make(map[string]int)\n    var max =\
    \ 0\n    for _, letter := range test {\n        result[string(letter)] += 1\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    var result = make(map[string]int)\n    var max = 0\n    for _, letter := range\
    \ test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    if len(test) == 0 {\n\
    \        return map[string]int{}\n    }\n\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)]++\n    }\n\
    \n    max := 0\n    for _, count := range letters {\n        if count > max {\n\
    \            max = count\n        }\n    }\n\n    result := make(map[string]int)\n\
    \    for letter, count := range letters {\n        if count == max {\n       \
    \     result[letter] = count\n        }\n    }\n\n    return result\n}\n", " \
    \   var result = make(map[string]int)\n    var max = 0\n    for _, letter := range\
    \ test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    var maxKeys []string\n\n    for _, letter := range test\
    \ {\n        if _, ok := result[string(letter)]; ok {\n            result[string(letter)]\
    \ += 1\n        } else {\n            result[string(letter)] = 1\n        }\n\
    \    }\n\n    for key, value := range result {\n        if value > max {\n   \
    \         max = value\n            maxKeys = []string{key}\n        } else if\
    \ value == max {\n            maxKeys = append(maxKeys, key)\n        }\n    }\n\
    \n    for _, key := range maxKeys {\n        result[key] = max\n    }\n\n    return\
    \ result\n}\n", "    var result = make(map[string]int)\n    var max = 0\n    for\
    \ _, value := range test {\n        if _, ok := result[string(value)]; ok {\n\
    \            result[string(value)]++\n        } else {\n            result[string(value)]\
    \ = 1\n        }\n        if result[string(value)] > max {\n            max =\
    \ result[string(value)]\n        }\n    }\n    for key, value := range result\
    \ {\n        if value != max {\n            delete(result, key)\n        }\n \
    \   }\n    return result\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    for _, v := range test {\n        result[string(v)]++\n       \
    \ if result[string(v)] > max {\n            max = result[string(v)]\n        }\n\
    \    }\n    for k, v := range result {\n        if v != max {\n            delete(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter :=\
    \ range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    result := make(map[string]int)\n    for _, char := range test\
    \ {\n        result[string(char)] += 1\n    }\n    return result\n}\n", "    //\
    \ TODO: implement this function\n    return nil\n}\n", "    // TODO: implement\
    \ me\n    return nil\n}\n", "    result := make(map[string]int)\n    for _, char\
    \ := range test {\n        result[string(char)]++\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
