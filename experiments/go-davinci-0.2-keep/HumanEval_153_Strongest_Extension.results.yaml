language: go_test.go
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength++\n            } else if\
    \ char >= 'a' && char <= 'z' {\n                extension_strength--\n       \
    \     }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpngf7jun5_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpngf7jun5_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpngf7jun5_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpngf7jun5_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength++\n            } else if\
    \ char >= 'a' && char <= 'z' {\n                extension_strength--\n       \
    \     }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpr2818kjt_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpr2818kjt_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength += 1.0\n            } else\
    \ if char >= 'a' && char <= 'z' {\n                extension_strength -= 1.0\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpiqkaob70_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpiqkaob70_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := extension_strength(extension)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0puq6s_4_test.go:27:31: undefined: extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64\n        for _, letter := range extension {\n            if letter >=\
    \ 'A' && letter <= 'Z' {\n                extension_strength += 1\n          \
    \  } else if letter >= 'a' && letter <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp83242j9c_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp83242j9c_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp83242j9c_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp83242j9c_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                strength += 1\n            } else if letter >= 'a'\
    \ && letter <= 'z' {\n                strength -= 1\n            }\n        }\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpaom2nyqi_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpaom2nyqi_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpaom2nyqi_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpaom2nyqi_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength += 1.0\n            } else\
    \ if char >= 'a' && char <= 'z' {\n                extension_strength -= 1.0\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpiqkaob70_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpiqkaob70_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(strings.Count(extension, \"[A-Z]\")) - float64(strings.Count(extension,\
    \ \"[a-z]\"))\n        if extension_strength > strongest_extension_strength {\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptqda8qsj_test.go:27:39: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, letter := range extension {\n            if letter\
    \ >= 'A' && letter <= 'Z' {\n                extension_strength += 1\n       \
    \     } else if letter >= 'a' && letter <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxsnfu7l4_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxsnfu7l4_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64 = 0\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64 = 0\n        for _, char := range extension {\n            if char >=\
    \ 'A' && char <= 'Z' {\n                extension_strength++\n            } else\
    \ if char >= 'a' && char <= 'z' {\n                extension_strength--\n    \
    \        }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpwkefjwhs_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpwkefjwhs_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpwkefjwhs_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpwkefjwhs_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength++\n            } else if\
    \ char >= 'a' && char <= 'z' {\n                extension_strength--\n       \
    \     }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpr2818kjt_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpr2818kjt_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                strength += 1\n            } else if letter >= 'a'\
    \ && letter <= 'z' {\n                strength -= 1\n            }\n        }\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp0ixnvwbe_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp0ixnvwbe_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp0ixnvwbe_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp0ixnvwbe_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                strength += 1\n            } else if letter >= 'a'\
    \ && letter <= 'z' {\n                strength -= 1\n            }\n        }\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp0ixnvwbe_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp0ixnvwbe_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp0ixnvwbe_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp0ixnvwbe_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp5u8bd74k_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp5u8bd74k_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp5u8bd74k_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp5u8bd74k_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, letter := range extension {\n            if letter\
    \ >= 'A' && letter <= 'Z' {\n                extension_strength += 1\n       \
    \     } else if letter >= 'a' && letter <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxsnfu7l4_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxsnfu7l4_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                strength++\n            } else {\n               \
    \ strength--\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp3awo3p9v_test.go:64: expected 'Watashi.eIGHt8OKe', got 'Watashi.tEN'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp3awo3p9v_test.go:64:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123.'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp3awo3p9v_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp3awo3p9v_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp3awo3p9v_test.go:64:\
    \ expected 'YameRore.okIWILL123', got 'YameRore.'\n    --- FAIL: TestStrongest_Extension/test_num__7\
    \ (0.00s)\n        tmp3awo3p9v_test.go:64: expected '_.Bb', got '_.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n        tmp3awo3p9v_test.go:64:\
    \ expected 'Sp.671235', got 'Sp.'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64\n        for _, letter := range extension {\n            if letter >=\
    \ 'A' && letter <= 'Z' {\n                extension_strength++\n            }\
    \ else if letter >= 'a' && letter <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpgyo0hh5j_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpgyo0hh5j_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpgyo0hh5j_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpgyo0hh5j_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, extensions[0])\n}\n\nfunc TestStrongest_Extension(t *testing.T)\
    \ {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmp5uu8tv_n_test.go:49: expected 'Watashi.eIGHt8OKe', got 'Watashi.tEN'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmp5uu8tv_n_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got 'Boku123.nani'\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp5uu8tv_n_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.t'\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n\
    \        tmp5uu8tv_n_test.go:49: expected 'K.TAR', got 'K.Ta'\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmp5uu8tv_n_test.go:49: expected '__HAHA.123', got '__HAHA.Tab'\n\
    \    --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmp5uu8tv_n_test.go:49:\
    \ expected 'YameRore.okIWILL123', got 'YameRore.HhAas'\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmp5uu8tv_n_test.go:49: expected 'finNNalLLly.WoW', got 'finNNalLLly.Die'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(count_upper_case(extension))\
    \ - float64(count_lower_case(extension))\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw11zjtv3_test.go:27:29: undefined: count_upper_case

    /tmp/tmpw11zjtv3_test.go:27:68: undefined: count_lower_case

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(count_uppercase(extension)) - float64(count_lowercase(extension))\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpg8tet3j7_test.go:27:39: undefined: count_uppercase

    /tmp/tmpg8tet3j7_test.go:27:77: undefined: count_lowercase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpcaxku3a7_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpcaxku3a7_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpcaxku3a7_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpcaxku3a7_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := get_extension_strength(extension)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj_ihendj_test.go:27:31: undefined: get_extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest string\n    var strength float64\n\
    \    for _, extension := range extensions {\n        var cap, sm int\n       \
    \ for _, c := range extension {\n            if c >= 'A' && c <= 'Z' {\n     \
    \           cap++\n            } else if c >= 'a' && c <= 'z' {\n            \
    \    sm++\n            }\n        }\n        if float64(cap) - float64(sm) > strength\
    \ {\n            strength = float64(cap) - float64(sm)\n            strongest\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate :=\
    \ Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpw48hhkz5_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpw48hhkz5_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpw48hhkz5_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpw48hhkz5_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(strings.Count(extension, strings.ToUpper(extension)) - strings.Count(extension,\
    \ strings.ToLower(extension)))\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdhdv_lx6_test.go:27:39: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength++\n            } else if\
    \ char >= 'a' && char <= 'z' {\n                extension_strength--\n       \
    \     }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpr2818kjt_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpr2818kjt_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := extension_strength(extension)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0puq6s_4_test.go:27:31: undefined: extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength += 1.0\n            } else\
    \ if char >= 'a' && char <= 'z' {\n                extension_strength -= 1.0\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpiqkaob70_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpiqkaob70_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength += 1.0\n            } else\
    \ if char >= 'a' && char <= 'z' {\n                extension_strength -= 1.0\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpiqkaob70_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpiqkaob70_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpiqkaob70_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength += 1.0\n            } else\
    \ if char >= 'a' && char <= 'z' {\n                extension_strength -= 1.0\n\
    \            }\n        }\n        if strongest_extension_strength < extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpw_e37qrx_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpw_e37qrx_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpw_e37qrx_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpw_e37qrx_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpkh6xv856_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpkh6xv856_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpkh6xv856_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension_name string\n   \
    \ var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        extension_strength := float64(len(extension)) - float64(len(extension))\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                extension_strength++\n            }\n        }\n \
    \       if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension_name = extension\n   \
    \     }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension_name)\n\
    }\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp3mbgaivr_test.go:62: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.eMptY'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp3mbgaivr_test.go:62: expected '__HAHA.123', got '__HAHA.Tab'\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__6 (0.00s)\n        tmp3mbgaivr_test.go:62:\
    \ expected 'finNNalLLly.WoW', got 'finNNalLLly.NowW'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp3mbgaivr_test.go:62: expected 'Sp.671235', got 'Sp.Bb'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := extension_strength(extension)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0puq6s_4_test.go:27:31: undefined: extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                strength += 1\n            } else if letter >= 'a'\
    \ && letter <= 'z' {\n                strength -= 1\n            }\n        }\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmplp_1ndjw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmplp_1ndjw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmplp_1ndjw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmplp_1ndjw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := extension_strength(extension)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0puq6s_4_test.go:27:31: undefined: extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := extension_strength(extension)\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0puq6s_4_test.go:27:31: undefined: extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074511
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, letter := range extension {\n            if letter\
    \ >= 'A' && letter <= 'Z' {\n                extension_strength += 1\n       \
    \     } else if letter >= 'a' && letter <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxsnfu7l4_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxsnfu7l4_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, letter := range extension {\n            if letter\
    \ >= 'A' && letter <= 'Z' {\n                extension_strength += 1\n       \
    \     } else if letter >= 'a' && letter <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxsnfu7l4_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxsnfu7l4_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, letter := range extension {\n            if letter\
    \ >= 'A' && letter <= 'Z' {\n                extension_strength += 1\n       \
    \     } else if letter >= 'a' && letter <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxsnfu7l4_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxsnfu7l4_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxsnfu7l4_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpp7bap1x3_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpp7bap1x3_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpp7bap1x3_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpp7bap1x3_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := get_strength(extension)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3g1n7y2t_test.go:27:21: undefined: get_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength++\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                strength--\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpxwnkw5z__test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpxwnkw5z__test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpxwnkw5z__test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength += 1\n         \
    \   } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpbf7pwvsw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpbf7pwvsw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpbf7pwvsw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var extension_strength\
    \ float64\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength++\n            } else if\
    \ char >= 'a' && char <= 'z' {\n                extension_strength--\n       \
    \     }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpr2818kjt_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpr2818kjt_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpr2818kjt_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpwa9g6pwp_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpwa9g6pwp_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpwa9g6pwp_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpwa9g6pwp_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := float64(0)\n        for _, char := range extension {\n            if char\
    \ >= 'A' && char <= 'Z' {\n                extension_strength++\n            }\
    \ else if char >= 'a' && char <= 'z' {\n                extension_strength--\n\
    \            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmp46owj0b1_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmp46owj0b1_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmp46owj0b1_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        strength := float64(0)\n\
    \        for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                strength += 1\n            } else if letter >= 'a'\
    \ && letter <= 'z' {\n                strength -= 1\n            }\n        }\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc\
    \ TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmplp_1ndjw_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmplp_1ndjw_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmplp_1ndjw_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmplp_1ndjw_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0.0\n        for _, char := range extension {\n            if char >= 'A'\
    \ && char <= 'Z' {\n                extension_strength++\n            } else if\
    \ char >= 'a' && char <= 'z' {\n                extension_strength--\n       \
    \     }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpngf7jun5_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpngf7jun5_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpngf7jun5_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpngf7jun5_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        extension_strength\
    \ := calculate_extension_strength(extension)\n        if extension_strength >\
    \ strongest_extension_strength {\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        }\n  \
    \  }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpz9doirn9_test.go:27:31: undefined: calculate_extension_strength

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074513
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    // your code here\n    return \"\"\n}\n\n\
    func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpnv4qhfq2_test.go:49: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpnv4qhfq2_test.go:49:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpnv4qhfq2_test.go:49: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074512
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunc Strongest_Extension(class_name string,\
    \ extensions []string) string {\n    var strongest_extension string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                strength += 1\n            } else if char >= 'a' &&\
    \ char <= 'z' {\n                strength -= 1\n            }\n        }\n   \
    \     if strength > strongest_strength {\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpzbrm7zqd_test.go:64: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpzbrm7zqd_test.go:64: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpzbrm7zqd_test.go:64:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpzbrm7zqd_test.go:64: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074513
