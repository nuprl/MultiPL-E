language: go_test.go
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int\n    var depth int\n    var result []int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if c == ')' {\n            depth -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, max_depth)\n     \
    \       max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var depth int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            depth += 1\n   \
    \     } else if char == ')' {\n            depth -= 1\n        } else if char\
    \ == ' ' {\n            result = append(result, depth)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp1pb3_27f_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp1pb3_27f_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp1pb3_27f_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level--\n\
    \        } else if c == ' ' {\n            if current_level == max_level {\n \
    \               result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level = 0\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpsb315hni_test.go:55: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level int = 0\n    var level int = 0\n    var max_levels\
    \ []int\n    for _, char := range paren_string {\n        if char == '(' {\n \
    \           level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level -=\
    \ 1\n            if level == 0 {\n                max_levels = append(max_levels,\
    \ max_level)\n                max_level = 0\n            }\n        }\n    }\n\
    \    return max_levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []rune\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            level += 1\n            if level > max_level {\n        \
    \        max_level = level\n            }\n            paren_stack = append(paren_stack,\
    \ c)\n        } else if c == ')' {\n            level -= 1\n            if level\
    \ < 0 {\n                panic(\"Unmatched parentheses\")\n            }\n   \
    \         paren_stack = paren_stack[:len(paren_stack)-1]\n        } else if c\
    \ == ' ' {\n            if len(paren_stack) != 0 {\n                panic(\"Unmatched\
    \ parentheses\")\n            }\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        } else {\n        \
    \    panic(\"Invalid character\")\n        }\n    }\n    if len(paren_stack) !=\
    \ 0 {\n        panic(\"Unmatched parentheses\")\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level--\n\
    \        } else if c == ' ' {\n            if current_level == max_level {\n \
    \               result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level = 0\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpsb315hni_test.go:55: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level++\n            if level > max_level {\n                max_level = level\n\
    \            }\n        } else if c == ')' {\n            level--\n        } else\
    \ if c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            if current_level == max_level {\n                result =\
    \ append(result, max_level)\n                max_level = 0\n            }\n  \
    \          current_level--\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp7k_kgjxv_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp7k_kgjxv_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var current_max\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > current_max {\n \
    \               current_max = current_level\n            }\n        } else if\
    \ char == ')' {\n            current_level -= 1\n        } else if char == ' '\
    \ {\n            result = append(result, current_max)\n            current_level\
    \ = 0\n            current_max = 0\n        }\n    }\n    result = append(result,\
    \ current_max)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ paren := range paren_string {\n        if paren == '(' {\n            current_level\
    \ += 1\n        } else if paren == ')' {\n            result = append(result,\
    \ current_level)\n            current_level -= 1\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp5283ewth_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmp5283ewth_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp5283ewth_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, c := range paren_string {\n     \
    \   if c == '(' {\n            current_depth++\n            if current_depth >\
    \ max_depth {\n                max_depth = current_depth\n            }\n    \
    \    } else if c == ')' {\n            current_depth--\n        } else if c ==\
    \ ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    return result\n}\n\
    \nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2mgje9eu_test.go:15:9: paren_stack declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level++\n\
    \        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpftia7pse_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpftia7pse_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpftia7pse_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level++\n            if level > max_level {\n                max_level = level\n\
    \            }\n        } else if c == ')' {\n            level--\n        } else\
    \ if c == ' ' {\n            result = append(result, max_level)\n            max_level\
    \ = 0\n            level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, 1)\n            max_level += 1\n        } else if c\
    \ == ')' {\n            stack = stack[:len(stack)-1]\n            max_level -=\
    \ 1\n        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp7aas3n1e_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp7aas3n1e_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp7aas3n1e_test.go:47: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n        } else if c == ')' {\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \           current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var depth int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            depth++\n        } else if\
    \ c == ')' {\n            depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, depth)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []rune\n    var max_level\
    \ int\n    var level int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            stack = append(stack, c)\n            level++\n         \
    \   if level > max_level {\n                max_level = level\n            }\n\
    \        } else if c == ')' {\n            if len(stack) > 0 {\n             \
    \   stack = stack[:len(stack)-1]\n                level--\n            }\n   \
    \     } else if c == ' ' {\n            if len(stack) == 0 {\n               \
    \ result = append(result, max_level)\n                max_level = 0\n        \
    \        level = 0\n            }\n        }\n    }\n    if len(stack) == 0 {\n\
    \        result = append(result, max_level)\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074177
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_nesting int\n    var nesting\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         nesting++\n            if nesting > max_nesting {\n                max_nesting\
    \ = nesting\n            }\n        } else if char == ')' {\n            nesting--\n\
    \        } else if char == ' ' {\n            result = append(result, max_nesting)\n\
    \            max_nesting = 0\n            nesting = 0\n        }\n    }\n    result\
    \ = append(result, max_nesting)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int\n    var depth int\n    var result []int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if c == ')' {\n            depth -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, max_depth)\n     \
    \       max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var level int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            stack\
    \ = append(stack, level)\n            level += 1\n        } else if c == ')' {\n\
    \            result = append(result, level)\n            level = stack[len(stack)-1]\n\
    \            stack = stack[:len(stack)-1]\n        }\n    }\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvg01_xs7_test.go:45: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpvg01_xs7_test.go:45:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvg01_xs7_test.go:45: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n        } else if c == ')' {\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \           current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    var depth int\n\n    for _, char := range paren_string {\n        if\
    \ char == '(' {\n            stack = append(stack, 1)\n            depth += 1\n\
    \            if depth > max_depth {\n                max_depth = depth\n     \
    \       }\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            depth -= 1\n        } else if char == ' ' {\n            result =\
    \ append(result, max_depth)\n            max_depth = 0\n            depth = 0\n\
    \        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []rune\n    var depth int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            stack\
    \ = append(stack, c)\n            depth++\n        } else if c == ')' {\n    \
    \        if len(stack) > 0 {\n                stack = stack[:len(stack)-1]\n \
    \           }\n            if len(stack) == 0 {\n                result = append(result,\
    \ depth)\n                depth = 0\n            }\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpl7nk5qk6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=3) %!s(int=3) %!s(int=1) %!s(int=5)]'\n    --- FAIL:\
    \ TestParse_Nested_Parens/test_num__2 (0.00s)\n        tmpl7nk5qk6_test.go:49:\
    \ expected '[%!s(int=4)]', got '[%!s(int=7)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_level\
    \ int\n    var level int\n\n    for _, c := range paren_string {\n        if c\
    \ == '(' {\n            level++\n            if level > max_level {\n        \
    \        max_level = level\n            }\n            stack = append(stack, level)\n\
    \        } else if c == ')' {\n            level--\n            stack = stack[:len(stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            current_level -= 1\n    \
    \    } else if char == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp3de3fx7k_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp3de3fx7k_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp3de3fx7k_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int\n    var current_depth int\n    var result\
    \ []int\n    for _, char := range paren_string {\n        if char == '(' {\n \
    \           current_depth += 1\n            if current_depth > max_depth {\n \
    \               max_depth = current_depth\n            }\n        } else if char\
    \ == ')' {\n            current_depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpg1hmk_n6_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpg1hmk_n6_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpg1hmk_n6_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            result\
    \ = append(result, max_depth)\n            depth -= 1\n            max_depth =\
    \ depth\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp82386khc_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmp82386khc_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp82386khc_test.go:47: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n        } else if c == ')' {\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \           current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int = 0\n    var depth int = 0\n    var result\
    \ []int\n    var paren_array []rune = []rune(paren_string)\n    for _, paren :=\
    \ range paren_array {\n        if paren == '(' {\n            depth += 1\n   \
    \         if depth > max_depth {\n                max_depth = depth\n        \
    \    }\n        } else if paren == ')' {\n            depth -= 1\n        } else\
    \ if paren == ' ' {\n            result = append(result, max_depth)\n        \
    \    max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_nesting_levels []int\n    var current_nesting_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting_level++\n        } else if char == ')' {\n         \
    \   max_nesting_levels = append(max_nesting_levels, current_nesting_level)\n \
    \           current_nesting_level--\n        }\n    }\n    return max_nesting_levels\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpz4p2rjtw_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpz4p2rjtw_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpz4p2rjtw_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_count int\n    var max_paren_count\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_count++\n            if paren_count > max_paren_count {\n    \
    \            max_paren_count = paren_count\n            }\n        } else if char\
    \ == ')' {\n            paren_count--\n        } else if char == ' ' {\n     \
    \       result = append(result, max_paren_count)\n            max_paren_count\
    \ = 0\n            paren_count = 0\n        }\n    }\n    result = append(result,\
    \ max_paren_count)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \        } else if c == ')' {\n            current_level--\n        } else if\
    \ c == ' ' {\n            result = append(result, current_level)\n           \
    \ current_level = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var levels []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level += 1\n        } else\
    \ if c == ')' {\n            level -= 1\n        } else if c == ' ' {\n      \
    \      levels = append(levels, level)\n            level = 0\n        }\n    }\n\
    \    return levels\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpp7eeuvtl_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpp7eeuvtl_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpp7eeuvtl_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         stack = append(stack, 1)\n            if len(stack) > max_depth {\n\
    \                max_depth = len(stack)\n            }\n        } else if char\
    \ == ')' {\n            stack = stack[:len(stack)-1]\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpo0s47jff_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpo0s47jff_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpo0s47jff_test.go:48: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if c == ')' {\n            level -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if c == ')' {\n            level -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var current_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_depth++\n            if current_depth > max_depth {\n            \
    \    max_depth = current_depth\n            }\n        } else if c == ')' {\n\
    \            current_depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_nesting_levels []int\n    var current_nesting_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting_level++\n        } else if char == ')' {\n         \
    \   max_nesting_levels = append(max_nesting_levels, current_nesting_level)\n \
    \           current_nesting_level--\n        }\n    }\n    return max_nesting_levels\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpz4p2rjtw_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpz4p2rjtw_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpz4p2rjtw_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    // TODO: Implement this function.\n    return []int{}\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmptuq773aj_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n\
    \        tmptuq773aj_test.go:33: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n      \
    \  tmptuq773aj_test.go:33: expected '[%!s(int=4)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    depth := 0\n    max_depth := 0\n    depths := []int{}\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depths\
    \ = append(depths, max_depth)\n            depth -= 1\n            max_depth -=\
    \ 1\n        }\n    }\n    return depths\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp154mioea_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmp154mioea_test.go:47:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp154mioea_test.go:47: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074179
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var current_max\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > current_max {\n          \
    \      current_max = current_level\n            }\n        } else if c == ')'\
    \ {\n            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, current_max)\n            current_max = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, current_max)\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074180
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    for _, paren_group := range paren_string\
    \ {\n        var level int\n        var max_level int\n        for _, paren :=\
    \ range paren_group {\n            if paren == '(' {\n                level++\n\
    \            } else if paren == ')' {\n                level--\n            }\n\
    \            if level > max_level {\n                max_level = level\n     \
    \       }\n        }\n        result = append(result, max_level)\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpav3jzwhv_test.go:18:31: cannot range over paren_group (variable of type
    rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074180
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int = 0\n    var cur_depth int = 0\n    var\
    \ result []int\n    for _, char := range paren_string {\n        if char == '('\
    \ {\n            cur_depth++\n            if cur_depth > max_depth {\n       \
    \         max_depth = cur_depth\n            }\n        } else if char == ')'\
    \ {\n            cur_depth--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            cur_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    // TODO: Implement me!\n    return []int{}\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp35ku70fs_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n\
    \        tmp35ku70fs_test.go:33: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n      \
    \  tmp35ku70fs_test.go:33: expected '[%!s(int=4)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            level++\n      \
    \  } else if char == ')' {\n            level--\n        } else if char == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            level++\n      \
    \  } else if char == ')' {\n            level--\n        } else if char == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level += 1\n        } else\
    \ if c == ')' {\n            level -= 1\n        } else if c == ' ' {\n      \
    \      result = append(result, level)\n        }\n    }\n    return result\n}\n\
    \nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpxkvcz163_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpxkvcz163_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpxkvcz163_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []rune\n    var max_depth\
    \ int\n    var cur_depth int\n    for _, char := range paren_string {\n      \
    \  if char == '(' {\n            stack = append(stack, char)\n            cur_depth++\n\
    \            if cur_depth > max_depth {\n                max_depth = cur_depth\n\
    \            }\n        } else if char == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            cur_depth--\n        } else if char == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            cur_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth []int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth += 1\n\
    \        } else if char == ')' {\n            max_depth = append(max_depth, depth)\n\
    \            depth -= 1\n        }\n    }\n    return max_depth\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpwo_qa0qd_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpwo_qa0qd_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpwo_qa0qd_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []rune\n    var max_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, c)\n            if len(stack) > max_depth {\n      \
    \          max_depth = len(stack)\n            }\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n        } else if c == ' ' {\n    \
    \        result = append(result, max_depth)\n            max_depth = 0\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp13b2fjvm_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp13b2fjvm_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp13b2fjvm_test.go:48: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            level += 1\n   \
    \     } else if char == ')' {\n            result = append(result, level)\n  \
    \          level -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmptr3le5xd_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmptr3le5xd_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmptr3le5xd_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 2
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []rune\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   paren_stack = append(paren_stack, c)\n            max_level = max(max_level,\
    \ len(paren_stack))\n        } else if c == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpac93wvoj_test.go:20:25: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpg1hmk_n6_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpg1hmk_n6_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpg1hmk_n6_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth []int\n    var depth int\n    for _, char\
    \ := range paren_string {\n        if char == '(' {\n            depth += 1\n\
    \        } else if char == ')' {\n            max_depth = append(max_depth, depth)\n\
    \            depth -= 1\n        }\n    }\n    return max_depth\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpwo_qa0qd_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpwo_qa0qd_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpwo_qa0qd_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []rune\n    var max_depth\
    \ int\n    var depth int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            stack = append(stack, c)\n            depth += 1\n      \
    \      if depth > max_depth {\n                max_depth = depth\n           \
    \ }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         stack = append(stack, 1)\n            max_depth += 1\n        } else\
    \ if char == ')' {\n            stack = stack[:len(stack)-1]\n            max_depth\
    \ -= 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpfft_uncg_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpfft_uncg_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpfft_uncg_test.go:47: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var cur_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   cur_depth++\n            if cur_depth > max_depth {\n                max_depth\
    \ = cur_depth\n            }\n        } else if c == ')' {\n            cur_depth--\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            cur_depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth []int\n    var depth int\n    for _, paren\
    \ := range paren_string {\n        if paren == '(' {\n            depth += 1\n\
    \        } else if paren == ')' {\n            depth -= 1\n        } else if paren\
    \ == ' ' {\n            max_depth = append(max_depth, depth)\n            depth\
    \ = 0\n        }\n    }\n    return max_depth\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpsjol_0z1_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpsjol_0z1_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpsjol_0z1_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var current_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_depth++\n            if current_depth > max_depth {\n            \
    \    max_depth = current_depth\n            }\n        } else if c == ')' {\n\
    \            current_depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            current_level -= 1\n    \
    \    } else if char == ' ' {\n            result = append(result, current_level)\n\
    \            current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp3de3fx7k_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp3de3fx7k_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp3de3fx7k_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_nesting_levels []int\n    var nesting_level int\n\
    \    for _, char := range paren_string {\n        if char == '(' {\n         \
    \   nesting_level++\n        } else if char == ')' {\n            max_nesting_levels\
    \ = append(max_nesting_levels, nesting_level)\n            nesting_level--\n \
    \       }\n    }\n    return max_nesting_levels\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpy2namnyr_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpy2namnyr_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpy2namnyr_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n        } else if c == ')' {\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \           current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var current_depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_depth += 1\n            if current_depth > max_depth {\n   \
    \             max_depth = current_depth\n            }\n        } else if char\
    \ == ')' {\n            current_depth -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_depth)\n            max_depth = 0\n \
    \           current_depth = 0\n        }\n    }\n    result = append(result, max_depth)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var current_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_depth += 1\n            if current_depth > max_depth {\n         \
    \       max_depth = current_depth\n            }\n        } else if c == ')' {\n\
    \            current_depth -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_depth)\n            max_depth = 0\n            current_depth\
    \ = 0\n        }\n    }\n    result = append(result, max_depth)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            if current_level == max_level {\n                result =\
    \ append(result, max_level)\n                max_level = 0\n            }\n  \
    \          current_level--\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp7k_kgjxv_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp7k_kgjxv_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var depth int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            depth++\n        } else if\
    \ c == ')' {\n            depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, depth)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   level += 1\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if c == ')' {\n            level -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    // TODO: implement this function\n    return []int{}\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp3hkzwkde_test.go:33: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n\
    \        tmp3hkzwkde_test.go:33: expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]',\
    \ got '[]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n      \
    \  tmp3hkzwkde_test.go:33: expected '[%!s(int=4)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_level int\n    var level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         level++\n            if level > max_level {\n                max_level\
    \ = level\n            }\n        } else if char == ')' {\n            level--\n\
    \        } else if char == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int = 0\n    var depth int = 0\n    var result\
    \ []int\n    for _, c := range paren_string {\n        if c == '(' {\n       \
    \     depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if c == ')' {\n            depth -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074181
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level--\n\
    \        } else if c == ' ' {\n            if current_level == max_level {\n \
    \               result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level = 0\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpsb315hni_test.go:55: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []string\n    var\
    \ current_level int\n    var max_level int\n    for _, paren := range paren_string\
    \ {\n        if paren == '(' {\n            paren_stack = append(paren_stack,\
    \ \"(\")\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if paren == ')' {\n            if len(paren_stack) > 0 {\n                paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n                current_level -= 1\n   \
    \         }\n        } else if paren == ' ' {\n            result = append(result,\
    \ max_level)\n            max_level = 0\n            current_level = 0\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp564foaug_test.go:54: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp564foaug_test.go:54: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp564foaug_test.go:54: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var depth int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            depth++\n        } else if\
    \ c == ')' {\n            depth--\n        } else if c == ' ' {\n            result\
    \ = append(result, depth)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmph7igpoky_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []rune\n    var paren_count\
    \ int\n    var max_paren_count int\n    for _, paren := range paren_string {\n\
    \        if paren == '(' {\n            paren_stack = append(paren_stack, paren)\n\
    \            paren_count += 1\n            if paren_count > max_paren_count {\n\
    \                max_paren_count = paren_count\n            }\n        } else\
    \ if paren == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \            paren_count -= 1\n        } else if paren == ' ' {\n            result\
    \ = append(result, max_paren_count)\n            max_paren_count = 0\n       \
    \     paren_count = 0\n        }\n    }\n    result = append(result, max_paren_count)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpg1hmk_n6_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpg1hmk_n6_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpg1hmk_n6_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if char == ')' {\n            depth -=\
    \ 1\n        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \        } else if c == ')' {\n            current_level--\n        } else if\
    \ c == ' ' {\n            result = append(result, current_level)\n           \
    \ current_level = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []int\n    var max_depth\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         paren_stack = append(paren_stack, 1)\n            if len(paren_stack)\
    \ > max_depth {\n                max_depth = len(paren_stack)\n            }\n\
    \        } else if char == ')' {\n            paren_stack = paren_stack[:len(paren_stack)-1]\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp42k6gw5e_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp42k6gw5e_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp42k6gw5e_test.go:48: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074182
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    var current_depth int\n    for _, char := range paren_string {\n  \
    \      if char == '(' {\n            stack = append(stack, 1)\n            current_depth\
    \ += 1\n            if current_depth > max_depth {\n                max_depth\
    \ = current_depth\n            }\n        } else if char == ')' {\n          \
    \  stack = stack[:len(stack)-1]\n            current_depth -= 1\n        } else\
    \ if char == ' ' {\n            result = append(result, max_depth)\n         \
    \   max_depth = 0\n            current_depth = 0\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp1q0eh3we_test.go:52: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp1q0eh3we_test.go:52: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp1q0eh3we_test.go:52: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074182
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n        } else if c == ')' {\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \           current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpb6a_7k7z_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpb6a_7k7z_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, 1)\n            if len(stack) > max_depth {\n      \
    \          max_depth = len(stack)\n            }\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n        } else if c == ' ' {\n    \
    \        result = append(result, max_depth)\n            max_depth = 0\n     \
    \   }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpu8pll4ze_test.go:48: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpu8pll4ze_test.go:48: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpu8pll4ze_test.go:48: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074182
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level++\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level--\n        } else if char == ' '\
    \ {\n            result = append(result, max_level)\n            max_level = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.009s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            level++\n      \
    \  } else if char == ')' {\n            level--\n        } else if char == ' '\
    \ {\n            result = append(result, level)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpf255vhr4_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074181
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \        } else if c == ')' {\n            current_level--\n        } else if\
    \ c == ' ' {\n            result = append(result, current_level)\n           \
    \ current_level = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmprshzhm16_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var current_max\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > current_max {\n \
    \               current_max = current_level\n            }\n        } else if\
    \ char == ')' {\n            current_level -= 1\n        } else if char == ' '\
    \ {\n            result = append(result, current_max)\n            current_level\
    \ = 0\n            current_max = 0\n        }\n    }\n    result = append(result,\
    \ current_max)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    var depth int\n    for _, c := range paren_string {\n        if c ==\
    \ '(' {\n            stack = append(stack, 1)\n            depth += 1\n      \
    \      if depth > max_depth {\n                max_depth = depth\n           \
    \ }\n        } else if c == ')' {\n            stack = stack[:len(stack)-1]\n\
    \            depth -= 1\n        } else if c == ' ' {\n            result = append(result,\
    \ max_depth)\n            max_depth = 0\n            depth = 0\n        }\n  \
    \  }\n    result = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074183
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpg1hmk_n6_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpg1hmk_n6_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpg1hmk_n6_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_depth int\n    var depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   depth += 1\n            if depth > max_depth {\n                max_depth\
    \ = depth\n            }\n        } else if c == ')' {\n            depth -= 1\n\
    \        } else if c == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            depth = 0\n        }\n    }\n    result\
    \ = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int = 0\n    var current_depth int = 0\n\
    \    var result []int = make([]int, 0)\n    for _, char := range paren_string\
    \ {\n        if char == '(' {\n            current_depth += 1\n            if\
    \ current_depth > max_depth {\n                max_depth = current_depth\n   \
    \         }\n        } else if char == ')' {\n            current_depth -= 1\n\
    \        } else if char == ' ' {\n            result = append(result, max_depth)\n\
    \            max_depth = 0\n            current_depth = 0\n        }\n    }\n\
    \    result = append(result, max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074183
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth []int\n    var depth int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            depth += 1\n      \
    \  } else if c == ')' {\n            depth -= 1\n        } else if c == ' ' {\n\
    \            max_depth = append(max_depth, depth)\n            depth = 0\n   \
    \     }\n    }\n    return max_depth\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpl6aht9zq_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpl6aht9zq_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpl6aht9zq_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level++\n\
    \        } else if c == ')' {\n            result = append(result, current_level)\n\
    \            current_level--\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpehqpmous_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpehqpmous_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpehqpmous_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074183
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpg1hmk_n6_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpg1hmk_n6_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpg1hmk_n6_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int\n    var depth int\n    var depths []int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if c == ')' {\n            depth -= 1\n       \
    \ } else if c == ' ' {\n            depths = append(depths, max_depth)\n     \
    \       max_depth = 0\n            depth = 0\n        }\n    }\n    depths = append(depths,\
    \ max_depth)\n    return depths\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level--\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            max_level = 0\n            current_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, 1)\n            if len(stack) > max_depth {\n      \
    \          max_depth = len(stack)\n            }\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n        } else if c == ' ' {\n    \
    \        result = append(result, max_depth)\n            max_depth = 0\n     \
    \   }\n    }\n    result = append(result, max_depth)\n    return result\n}\n\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int\n    var depth int\n    var result []int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            depth\
    \ += 1\n            if depth > max_depth {\n                max_depth = depth\n\
    \            }\n        } else if c == ')' {\n            depth -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, max_depth)\n     \
    \       max_depth = 0\n            depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    var i int\n    for i = 0; i < len(paren_string); i++ {\n        if\
    \ paren_string[i] == '(' {\n            current_level++\n            if current_level\
    \ > max_level {\n                max_level = current_level\n            }\n  \
    \      } else if paren_string[i] == ')' {\n            current_level--\n     \
    \   } else if paren_string[i] == ' ' {\n            result = append(result, max_level)\n\
    \            max_level = 0\n            current_level = 0\n        }\n    }\n\
    \    result = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var current_max\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > current_max {\n    \
    \            current_max = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level--\n        } else if char == ' ' {\n   \
    \         result = append(result, current_max)\n            current_max = 0\n\
    \            current_level = 0\n        }\n    }\n    result = append(result,\
    \ current_max)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var paren_stack []rune\n    var current_level\
    \ int\n    var max_level int\n    for _, c := range paren_string {\n        if\
    \ c == '(' {\n            paren_stack = append(paren_stack, c)\n            current_level\
    \ += 1\n            if current_level > max_level {\n                max_level\
    \ = current_level\n            }\n        } else if c == ')' {\n            paren_stack\
    \ = paren_stack[:len(paren_stack)-1]\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, max_level)\n     \
    \       current_level = 0\n            max_level = 0\n        }\n    }\n    result\
    \ = append(result, max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074183
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            if current_level == max_level {\n                result =\
    \ append(result, max_level)\n                max_level = 0\n            }\n  \
    \          current_level--\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp7k_kgjxv_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmp7k_kgjxv_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level += 1\n        } else\
    \ if c == ')' {\n            result = append(result, level)\n            level\
    \ -= 1\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpotisyeyg_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpotisyeyg_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpotisyeyg_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074183
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            if current_level == max_level {\n                result\
    \ = append(result, max_level)\n                max_level = 0\n            }\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpvwzmm7f6_test.go:49: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=2)\
    \ %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpvwzmm7f6_test.go:49: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level++\n            if current_level > max_level {\n            \
    \    max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            if current_level == max_level {\n                result = append(result,\
    \ max_level)\n                max_level = 0\n            }\n            current_level--\n\
    \        } else if c == ' ' {\n            if current_level == max_level {\n \
    \               result = append(result, max_level)\n                max_level\
    \ = 0\n            }\n            current_level = 0\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0) %!s(int=1)\
    \ %!s(int=0) %!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpsb315hni_test.go:55: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=1) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=3) %!s(int=0)\
    \ %!s(int=4)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpsb315hni_test.go:55: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ c := range paren_string {\n        if c == '(' {\n            current_level\
    \ += 1\n        } else if c == ')' {\n            current_level -= 1\n       \
    \ } else if c == ' ' {\n            result = append(result, current_level)\n \
    \           current_level = 0\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp4uzu384g_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []int\n    var max_depth\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   stack = append(stack, 1)\n            if len(stack) > max_depth {\n      \
    \          max_depth = len(stack)\n            }\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n        } else if c == ' ' {\n    \
    \        result = append(result, max_depth)\n            max_depth = 0\n     \
    \   }\n    }\n    result = append(result, max_depth)\n    return result\n}\n\n\
    func TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660074183
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, char :=\
    \ range paren_string {\n        if char == '(' {\n            level++\n      \
    \  } else if char == ')' {\n            result = append(result, level)\n     \
    \       level--\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpp_56v3t2_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpp_56v3t2_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpp_56v3t2_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level += 1\n            if current_level > max_level {\n   \
    \             max_level = current_level\n            }\n        } else if char\
    \ == ')' {\n            current_level -= 1\n        } else if char == ' ' {\n\
    \            result = append(result, max_level)\n            current_level = 0\n\
    \            max_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_level []int\n    var level int\n    for _, c :=\
    \ range paren_string {\n        if c == '(' {\n            level += 1\n      \
    \  } else if c == ')' {\n            level -= 1\n        } else if c == ' ' {\n\
    \            max_level = append(max_level, level)\n            level = 0\n   \
    \     }\n    }\n    return max_level\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpyic3uyc5_test.go:44: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpyic3uyc5_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpyic3uyc5_test.go:44: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var max_nesting int\n    var current_nesting\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_nesting += 1\n            if current_nesting > max_nesting {\n\
    \                max_nesting = current_nesting\n            }\n        } else\
    \ if char == ')' {\n            current_nesting -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_nesting)\n            max_nesting\
    \ = 0\n            current_nesting = 0\n        }\n    }\n    result = append(result,\
    \ max_nesting)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    for _,\
    \ char := range paren_string {\n        if char == '(' {\n            current_level\
    \ += 1\n        } else if char == ')' {\n            result = append(result, current_level)\n\
    \            current_level -= 1\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpg1hmk_n6_test.go:42: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=2) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=1)]'\n    ---\
    \ FAIL: TestParse_Nested_Parens/test_num__1 (0.00s)\n        tmpg1hmk_n6_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]', got '[%!s(int=1) %!s(int=2)\
    \ %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2 (0.00s)\n  \
    \      tmpg1hmk_n6_test.go:42: expected '[%!s(int=4)]', got '[%!s(int=2) %!s(int=3)\
    \ %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074178
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int = 0\n    var\
    \ max_level int = 0\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_level += 1\n            if current_level > max_level\
    \ {\n                max_level = current_level\n            }\n        } else\
    \ if char == ')' {\n            current_level -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_level)\n            current_level\
    \ = 0\n            max_level = 0\n        }\n    }\n    result = append(result,\
    \ max_level)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var stack []byte\n    var count int\n\
    \    for _, c := range paren_string {\n        if c == '(' {\n            stack\
    \ = append(stack, byte(c))\n            count++\n        } else if c == ')' {\n\
    \            stack = stack[:len(stack)-1]\n            count--\n        } else\
    \ if c == ' ' {\n            result = append(result, count)\n            count\
    \ = 0\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmp8wbol5w0_test.go:47: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmp8wbol5w0_test.go:47: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmp8wbol5w0_test.go:47: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var max_depth int = 0\n    var current_depth int = 0\n\
    \    var result []int\n    for _, char := range paren_string {\n        if char\
    \ == '(' {\n            current_depth += 1\n            if current_depth > max_depth\
    \ {\n                max_depth = current_depth\n            }\n        } else\
    \ if char == ')' {\n            current_depth -= 1\n        } else if char ==\
    \ ' ' {\n            result = append(result, max_depth)\n            max_depth\
    \ = 0\n            current_depth = 0\n        }\n    }\n    result = append(result,\
    \ max_depth)\n    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T)\
    \ {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    (()()) ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual:\
    \ candidate(\"() (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n   \
    \  { actual: candidate(\"(()(())((())))\"), expected: []int{4} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074183
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, char := range paren_string {\n        if char == '(' {\n   \
    \         current_level++\n            if current_level > max_level {\n      \
    \          max_level = current_level\n            }\n        } else if char ==\
    \ ')' {\n            current_level--\n        } else if char == ' ' {\n      \
    \      result = append(result, max_level)\n            max_level = 0\n       \
    \     current_level = 0\n        }\n    }\n    result = append(result, max_level)\n\
    \    return result\n}\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate\
    \ := parse_nested_parens\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"(()())\
    \ ((())) () ((())()())\"), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"\
    () (()) ((())) (((())))\"), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"\
    (()(())((())))\"), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074178
- exit_code: 1
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var level int\n    for _, c := range\
    \ paren_string {\n        if c == '(' {\n            level++\n        } else if\
    \ c == ')' {\n            level--\n        } else if c == ' ' {\n            result\
    \ = append(result, level)\n        }\n    }\n    return result\n}\n\nfunc TestParse_Nested_Parens(t\
    \ *testing.T) {\n  candidate := parse_nested_parens\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"(()()) ((())) () ((())()())\"), expected: []int{2, 3,\
    \ 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"), expected: []int{1,\
    \ 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"), expected: []int{4}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestParse_Nested_Parens (0.00s)\n    --- FAIL: TestParse_Nested_Parens/test_num__0\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=2) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__1\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=4)]', got '[%!s(int=0) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestParse_Nested_Parens/test_num__2\
    \ (0.00s)\n        tmpdofzgfhs_test.go:43: expected '[%!s(int=4)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074175
- exit_code: 0
  program: "package parse_nested_parens_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Input to this function is a string represented multiple groups\
    \ for nested parentheses separated by spaces.\n// For each of the group, output\
    \ the deepest level of nesting of parentheses.\n// E.g. (()()) has maximum two\
    \ levels of nesting while ((())) has three.\n// >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n// [2, 3, 1, 3]\nfunc parse_nested_parens(paren_string\
    \ string) []int {\n    var result []int\n    var current_level int\n    var max_level\
    \ int\n    for _, c := range paren_string {\n        if c == '(' {\n         \
    \   current_level += 1\n            if current_level > max_level {\n         \
    \       max_level = current_level\n            }\n        } else if c == ')' {\n\
    \            current_level -= 1\n        } else if c == ' ' {\n            result\
    \ = append(result, max_level)\n            current_level = 0\n            max_level\
    \ = 0\n        }\n    }\n    result = append(result, max_level)\n    return result\n\
    }\n\nfunc TestParse_Nested_Parens(t *testing.T) {\n  candidate := parse_nested_parens\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"(()()) ((())) () ((())()())\"\
    ), expected: []int{2, 3, 1, 3} },\n     { actual: candidate(\"() (()) ((())) (((())))\"\
    ), expected: []int{1, 2, 3, 4} },\n     { actual: candidate(\"(()(())((())))\"\
    ), expected: []int{4} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074175
