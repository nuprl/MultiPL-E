language: go_test.go
name: HumanEval_69_search
results:
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k <= v && k > max {\n            max = k\n      \
    \  }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && freq[v] >= v {\n    \
    \        return v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp6lq6cv1n_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp6lq6cv1n_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v] += 1\n    }\n    for i := len(lst);\
    \ i > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    for _, v := range lst {\n       \
    \ if v > max {\n            max = v\n        }\n    }\n    for i := 1; i <= max;\
    \ i++ {\n        for _, v := range lst {\n            if v == i {\n          \
    \      count++\n            }\n        }\n        if count >= i {\n          \
    \  return i\n        }\n        count = 0\n    }\n    return -1\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    var max int\n    var\
    \ maxCount int\n    var count int\n    for i := 0; i < len(lst); i++ {\n     \
    \   count = 0\n        for j := 0; j < len(lst); j++ {\n            if lst[i]\
    \ == lst[j] {\n                count++\n            }\n        }\n        if count\
    \ >= lst[i] && count > maxCount {\n            max = lst[i]\n            maxCount\
    \ = count\n        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n\
    \    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp0uv_4n1i_test.go:78: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp0uv_4n1i_test.go:78: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    max := -1\n    for k, v := range m {\n        if k > v {\n       \
    \     continue\n        }\n        if k > max {\n            max = k\n       \
    \ }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if m[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp1kqaf04__test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp1kqaf04__test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int = 0\n    var count int = 0\n    for _, v := range lst {\n\
    \        if v > max {\n            max = v\n        }\n    }\n    for i := 1;\
    \ i <= max; i++ {\n        for _, v := range lst {\n            if v == i {\n\
    \                count++\n            }\n        }\n        if count >= i {\n\
    \            return i\n        }\n        count = 0\n    }\n    return -1\n}\n\
    \nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpl_uaw5wu_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpl_uaw5wu_test.go:75: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmpl_uaw5wu_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpl_uaw5wu_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpl_uaw5wu_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpl_uaw5wu_test.go:75: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpl_uaw5wu_test.go:75: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var m = make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    var max = -1\n    for k, v := range m {\n        if v >= k && k >\
    \ max {\n            max = k\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxFreq int\n    var freq int\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    freqMap\
    \ := make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n  \
    \  }\n    for i := 1; i <= max; i++ {\n        if freqMap[i] >= i {\n        \
    \    if freqMap[i] > maxFreq {\n                maxFreq = freqMap[i]\n       \
    \         freq = i\n            }\n        }\n    }\n    if freq == 0 {\n    \
    \    return -1\n    }\n    return freq\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmp55e5zxlw_test.go:80: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmp55e5zxlw_test.go:80: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__17 (0.00s)\n\
    \        tmp55e5zxlw_test.go:80: expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 2
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    var found bool\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i := max; i > 0; i-- {\n        count = 0\n        for _, v := range lst {\n\
    \            if v == i {\n                count++\n            }\n        }\n\
    \        if count >= i {\n            found = true\n            break\n      \
    \  }\n    }\n    if found {\n        return i\n    }\n    return -1\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp99pavt9x_test.go:38:16: undefined: i

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 2
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var result int\n    var max int\n    var maxFreq int\n    var freq int\n\
    \    var freqMap = make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n\
    \    }\n    for k, v := range freqMap {\n        if v >= k {\n            result\
    \ = k\n        }\n        if v > maxFreq {\n            maxFreq = v\n        \
    \    max = k\n        }\n    }\n    if result == 0 {\n        return -1\n    }\n\
    \    if result == max {\n        return result\n    }\n    return -1\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9_e5q8nc_test.go:20:9: freq declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if freq[i] >= i {\n     \
    \       return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    max := lst[0]\n   \
    \ for _, v := range lst {\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    count := make([]int, max+1)\n    for _, v := range lst {\n   \
    \     count[v]++\n    }\n    for i := max; i > 0; i-- {\n        if count[i] >=\
    \ i {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpe4hm0m2z_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpe4hm0m2z_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for k, v := range m {\n\
    \        if k <= v {\n            return k\n        }\n    }\n    return -1\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpvbtpa0mu_test.go:69: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpvbtpa0mu_test.go:69: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k <= v && k > max {\n            max = k\n      \
    \  }\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    var result int\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range lst {\n\
    \            if v == i {\n                count++\n            }\n        }\n\
    \        if count >= i {\n            result = i\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    var result int\n\n    for _, v :=\
    \ range lst {\n        if v > max {\n            max = v\n        }\n    }\n\n\
    \    for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i {\n            result = i\n        }\n    }\n\n\
    \    if result == 0 {\n        return -1\n    }\n\n    return result\n}\n\nfunc\
    \ TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4,\
    \ 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected:\
    \ -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8\
    \ },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10,\
    \ 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected:\
    \ 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n\
    \     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8,\
    \ 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
    \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8,\
    \ 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n\
    \     { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpe4hm0m2z_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpe4hm0m2z_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    for _, v := range lst {\n        if v > max {\n    \
    \        max = v\n        }\n    }\n    freq := make([]int, max+1)\n    for _,\
    \ v := range lst {\n        freq[v]++\n    }\n    for i, v := range freq {\n \
    \       if i == 0 {\n            continue\n        }\n        if i <= v {\n  \
    \          return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmp4j4y32us_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp4j4y32us_test.go:75: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmp4j4y32us_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmp4j4y32us_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp4j4y32us_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp4j4y32us_test.go:75: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmp4j4y32us_test.go:75: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073544
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxFreq int\n    var freq int\n    var num int\n\
    \    for _, num = range lst {\n        freq = 0\n        for _, n := range lst\
    \ {\n            if num == n {\n                freq++\n            }\n      \
    \  }\n        if freq >= num && freq > maxFreq {\n            max = num\n    \
    \        maxFreq = freq\n        }\n    }\n    if max == 0 {\n        return -1\n\
    \    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpy_cs1wvx_test.go:76: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpy_cs1wvx_test.go:76: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073544
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, count int\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    for k, v := range m {\n        if v >= k &&\
    \ k > max {\n            max = k\n            count = v\n        }\n    }\n  \
    \  if count >= max {\n        return max\n    }\n    return -1\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpimkz1j0__test.go:71: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__8 (0.00s)\n        tmpimkz1j0__test.go:71: expected\
    \ '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__19 (0.00s)\n\
    \        tmpimkz1j0__test.go:71: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__20 (0.00s)\n        tmpimkz1j0__test.go:71:\
    \ expected '%!s(int=-1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__24\
    \ (0.00s)\n        tmpimkz1j0__test.go:71: expected '%!s(int=-1)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp4sxo4dor_test.go:69: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp4sxo4dor_test.go:69: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var result int\n    var max int\n    var maxCount int\n    var count\
    \ int\n    for _, v := range lst {\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for i := 1; i <= max; i++ {\n        count = 0\n      \
    \  for _, v := range lst {\n            if v == i {\n                count++\n\
    \            }\n        }\n        if count >= i && count > maxCount {\n     \
    \       maxCount = count\n            result = i\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmplyld0_k1_test.go:81: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmplyld0_k1_test.go:81: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__17 (0.00s)\n\
    \        tmplyld0_k1_test.go:81: expected '%!s(int=4)', got '%!s(int=2)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073545
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    var max int\n    var\
    \ m = make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n       \
    \ if v > max {\n            max = v\n        }\n    }\n    for i := max; i > 0;\
    \ i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073545
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, count int\n    for _, v := range lst {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for i := 1; i <= max; i++ {\n    \
    \    count = 0\n        for _, v := range lst {\n            if v == i {\n   \
    \             count++\n            }\n        }\n        if count >= i {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpee3ccaz__test.go:74: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpee3ccaz__test.go:74: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpee3ccaz__test.go:74: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, maxFreq int\n    freq := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        freq[v]++\n        if v > max {\n            max = v\n\
    \        }\n    }\n    for i := 1; i <= max; i++ {\n        if freq[i] >= i {\n\
    \            maxFreq = i\n        }\n    }\n    if maxFreq == 0 {\n        return\
    \ -1\n    }\n    return maxFreq\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    var max int\n    var\
    \ maxCount int\n    var count int\n    for _, v := range lst {\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    for i := 1; i <= max; i++\
    \ {\n        count = 0\n        for _, v := range lst {\n            if v == i\
    \ {\n                count++\n            }\n        }\n        if count >= i\
    \ && count > maxCount {\n            maxCount = count\n        }\n    }\n    if\
    \ maxCount == 0 {\n        return -1\n    }\n    return maxCount\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp41ck218c_test.go:82: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp41ck218c_test.go:82: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmp41ck218c_test.go:82: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmp41ck218c_test.go:82: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp41ck218c_test.go:82: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp41ck218c_test.go:82: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmp41ck218c_test.go:82: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmp41ck218c_test.go:82: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmp41ck218c_test.go:82: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmp41ck218c_test.go:82: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpe4hm0m2z_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpe4hm0m2z_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var (\n        max, maxFreq int\n        freq = make(map[int]int)\n \
    \   )\n    for _, v := range lst {\n        freq[v]++\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for i := 1; i <= max; i++ {\n    \
    \    if freq[i] >= i {\n            maxFreq = i\n        }\n    }\n    if maxFreq\
    \ == 0 {\n        return -1\n    }\n    return maxFreq\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpe4hm0m2z_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpe4hm0m2z_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    for _, v := range lst {\n       \
    \ if v > max {\n            max = v\n        }\n    }\n    for i := 1; i <= max;\
    \ i++ {\n        for _, v := range lst {\n            if v == i {\n          \
    \      count++\n            }\n        }\n        if count >= i {\n          \
    \  return i\n        }\n        count = 0\n    }\n    return -1\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for k, v := range m {\n        if k <= v {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__17 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, maxCount int\n    for _, n := range lst {\n        if n > max\
    \ {\n            max = n\n        }\n    }\n    counts := make([]int, max+1)\n\
    \    for _, n := range lst {\n        counts[n]++\n    }\n    for i, c := range\
    \ counts {\n        if c >= i && c >= maxCount {\n            maxCount = c\n \
    \       }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpqownqfz2_test.go:75: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpqownqfz2_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpqownqfz2_test.go:75: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpqownqfz2_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpqownqfz2_test.go:75: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpqownqfz2_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpqownqfz2_test.go:75: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpqownqfz2_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpqownqfz2_test.go:75: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpqownqfz2_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxCount int\n    var count int\n    for _, v :=\
    \ range lst {\n        if v > max {\n            max = v\n        }\n    }\n \
    \   for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i && count > maxCount {\n            maxCount = count\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    var result int\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range lst {\n\
    \            if v == i {\n                count++\n            }\n        }\n\
    \        if count >= i {\n            result = i\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxCount int\n    var count int\n    for _, v :=\
    \ range lst {\n        if v > max {\n            max = v\n        }\n    }\n \
    \   for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i && count > maxCount {\n            maxCount = count\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxCount int\n    var count int\n    for _, v :=\
    \ range lst {\n        if v > max {\n            max = v\n        }\n    }\n \
    \   for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i && count > maxCount {\n            maxCount = count\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpe4hm0m2z_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpe4hm0m2z_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var count int\n    for _, v := range lst {\n       \
    \ if v > max {\n            max = v\n        }\n    }\n    for i := 1; i <= max;\
    \ i++ {\n        for _, v := range lst {\n            if v == i {\n          \
    \      count++\n            }\n        }\n        if count >= i {\n          \
    \  return i\n        }\n        count = 0\n    }\n    return -1\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpzwfuqgh6_test.go:75: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpzwfuqgh6_test.go:75: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var m = make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    var max = -1\n    for k, v := range m {\n        if k <= v && k >\
    \ max {\n            max = k\n        }\n    }\n    return max\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmp6cgf9y0w_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp6cgf9y0w_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // TODO\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpz783n0_x_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpz783n0_x_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpz783n0_x_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpz783n0_x_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpz783n0_x_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpz783n0_x_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpz783n0_x_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpz783n0_x_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpz783n0_x_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpz783n0_x_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpz783n0_x_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpz783n0_x_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpz783n0_x_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpz783n0_x_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpz783n0_x_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpz783n0_x_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpz783n0_x_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var m = make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n        if v > max {\n            max = v\n        }\n  \
    \  }\n    for i := max; i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for k, v := range m {\n        if k <= v {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__17 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var m = make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    var max = 0\n    for k, v := range m {\n        if k <= v && k > max\
    \ {\n            max = k\n        }\n    }\n    if max == 0 {\n        return\
    \ -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxCount int\n    var count int\n    var num int\n\
    \    for _, num = range lst {\n        count = 0\n        for _, num2 := range\
    \ lst {\n            if num == num2 {\n                count++\n            }\n\
    \        }\n        if count >= num && count > maxCount {\n            max = num\n\
    \            maxCount = count\n        }\n    }\n    if maxCount == 0 {\n    \
    \    return -1\n    }\n    return max\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmppk9c_t6j_test.go:76: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppk9c_t6j_test.go:76: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, count int\n    for _, v := range lst {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for i := 1; i <= max; i++ {\n    \
    \    count = 0\n        for _, v := range lst {\n            if v == i {\n   \
    \             count++\n            }\n        }\n        if count >= i {\n   \
    \         return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpee3ccaz__test.go:74: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmpee3ccaz__test.go:74: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpee3ccaz__test.go:74: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpee3ccaz__test.go:74: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmplhbdqwt4_test.go:57: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmplhbdqwt4_test.go:57: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmplhbdqwt4_test.go:57: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmplhbdqwt4_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmplhbdqwt4_test.go:57: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmplhbdqwt4_test.go:57: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmplhbdqwt4_test.go:57: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmplhbdqwt4_test.go:57: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmplhbdqwt4_test.go:57: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmplhbdqwt4_test.go:57:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmplhbdqwt4_test.go:57: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmplhbdqwt4_test.go:57:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmplhbdqwt4_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmplhbdqwt4_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmplhbdqwt4_test.go:57: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmplhbdqwt4_test.go:57:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmplhbdqwt4_test.go:57: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, count int\n    for _, v := range lst {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    for i := 1; i <= max; i++ {\n    \
    \    for _, v := range lst {\n            if v == i {\n                count++\n\
    \            }\n        }\n        if count >= i {\n            return i\n   \
    \     }\n        count = 0\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__1 (0.00s)\n\
    \        tmprdo1kp8__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmprdo1kp8__test.go:74: expected\
    \ '%!s(int=5)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__13 (0.00s)\n\
    \        tmprdo1kp8__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__14 (0.00s)\n        tmprdo1kp8__test.go:74: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmprdo1kp8__test.go:74: expected '%!s(int=4)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmprdo1kp8__test.go:74: expected\
    \ '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmprdo1kp8__test.go:74: expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxCount int\n    var count int\n    for _, v :=\
    \ range lst {\n        if v > max {\n            max = v\n        }\n    }\n \
    \   for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i && count > maxCount {\n            maxCount = count\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if m[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n \
    \ candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmp1kqaf04__test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmp1kqaf04__test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    var max int\n    for\
    \ _, v := range lst {\n        if v > max {\n            max = v\n        }\n\
    \    }\n    freq := make([]int, max+1)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for i := max; i > 0; i-- {\n        if freq[i] >= i {\n          \
    \  return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var maxCount int\n    var count int\n    for _, v :=\
    \ range lst {\n        if v > max {\n            max = v\n        }\n    }\n \
    \   for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i && count > maxCount {\n            maxCount = count\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n\
    \     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual:\
    \ candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8, 8,\
    \ 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3, 3,\
    \ 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7,\
    \ 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpbrnph2bc_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpbrnph2bc_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // create a map of the integers and their frequencies\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // iterate through\
    \ the map and find the greatest integer that is greater than zero, and has a frequency\
    \ \n    // greater than or equal to the value of the integer itself\n    var result\
    \ int\n    for k, v := range freq {\n        if k > 0 && k <= v && k > result\
    \ {\n            result = k\n        }\n    }\n    // if no such a value exist,\
    \ return -1\n    if result == 0 {\n        return -1\n    }\n    return result\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    if len(lst) == 0 {\n        return -1\n    }\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    for i := len(lst);\
    \ i > 0; i-- {\n        if freq[i] >= i {\n            return i\n        }\n \
    \   }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073545
- exit_code: 0
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var result int\n    var max int\n    var count int\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range lst {\n\
    \            if v == i {\n                count++\n            }\n        }\n\
    \        if count >= i {\n            result = i\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 2
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, maxCount int\n    counts := make(map[int]int)\n    for _, v\
    \ := range lst {\n        counts[v]++\n        if v > max {\n            max =\
    \ v\n        }\n    }\n    for i := max; i > 0; i-- {\n        if counts[i] >=\
    \ i {\n            return i\n        }\n    }\n    return -1\n}\n\nfunc TestSearch(t\
    \ *testing.T) {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy0a3f6gt_test.go:17:14: maxCount declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // Write your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpw0obfjvs_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmpw0obfjvs_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmpw0obfjvs_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return 0\n}\n\nfunc TestSearch(t *testing.T) {\n\
    \  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 5,\
    \ 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}),\
    \ expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n   \
    \  { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     {\
    \ actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__2 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__3 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=8)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__6 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__7 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__8 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=-1)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__12 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpdaokfz3t_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSearch/test_num__16 (0.00s)\n\
    \        tmpdaokfz3t_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n   \
    \ --- FAIL: TestSea"
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max int\n    var max_cnt int\n    var cnt int\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i := 1; i <= max; i++ {\n        cnt = 0\n        for _, v := range lst {\n\
    \            if v == i {\n                cnt++\n            }\n        }\n  \
    \      if cnt >= i && cnt > max_cnt {\n            max_cnt = cnt\n        }\n\
    \    }\n    if max_cnt == 0 {\n        return -1\n    }\n    return max_cnt\n\
    }\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
    \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
    \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2\
    \ },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3,\
    \ 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3,\
    \ 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10,\
    \ 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6,\
    \ 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4,\
    \ 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n\
    \     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n     { actual:\
    \ candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5,\
    \ 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}), expected:\
    \ 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4,\
    \ 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpr6jzoc4p_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpr6jzoc4p_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpr6jzoc4p_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpr6jzoc4p_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpr6jzoc4p_test.go:79: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpr6jzoc4p_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpr6jzoc4p_test.go:79: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpr6jzoc4p_test.go:79: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpr6jzoc4p_test.go:79: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpr6jzoc4p_test.go:79: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for k, v := range m {\n        if k <= v {\n            return k\n\
    \        }\n    }\n    return -1\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate\
    \ := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__11 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=5)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=2)', got '%!s(int=1)'\n   \
    \ --- FAIL: TestSearch/test_num__16 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__17 (0.00s)\n\
    \        tmpqk0p8vvl_test.go:66: expected '%!s(int=4)', got '%!s(int=2)'\n   \
    \ --- FAIL: TestSearch/test_num__18 (0.00s)\n        tmpqk0p8vvl_test.go:66: expected\
    \ '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    var max, maxCount int\n    for _, v := range lst {\n        if v > max\
    \ {\n            max = v\n        }\n    }\n    counts := make([]int, max+1)\n\
    \    for _, v := range lst {\n        counts[v]++\n    }\n    for i, v := range\
    \ counts {\n        if i > 0 && i <= v && v > maxCount {\n            maxCount\
    \ = v\n        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n  \
    \  return maxCount\n}\n\nfunc TestSearch(t *testing.T) {\n  candidate := search\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 5, 5, 5, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{3, 3}), expected: -1 },\n     { actual: candidate([]int{8,\
    \ 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n     { actual: candidate([]int{2, 3,\
    \ 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2, 7, 8, 8, 4, 8,\
    \ 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual: candidate([]int{6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual: candidate([]int{6, 9, 6,\
    \ 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected:\
    \ 1 },\n     { actual: candidate([]int{1, 9, 10, 1, 3}), expected: 1 },\n    \
    \ { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2,\
    \ 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n     { actual: candidate([]int{1}),\
    \ expected: 1 },\n     { actual: candidate([]int{8, 8, 10, 6, 4, 3, 5, 8, 2, 4,\
    \ 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected: 4 },\n     { actual: candidate([]int{2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}), expected: 2 },\n   \
    \  { actual: candidate([]int{1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}), expected:\
    \ 1 },\n     { actual: candidate([]int{9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3,\
    \ 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}), expected: 4 },\n  \
    \   { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8,\
    \ 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual: candidate([]int{9, 8,\
    \ 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected: 2 },\n     {\
    \ actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10,\
    \ 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}), expected:\
    \ -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}),\
    \ expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10, 3, 6,\
    \ 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4, 1,\
    \ 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
    \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__4 (0.00s)\n\
    \        tmpgyi56zyq_test.go:75: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__5 (0.00s)\n        tmpgyi56zyq_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__9 (0.00s)\n\
    \        tmpgyi56zyq_test.go:75: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__10 (0.00s)\n        tmpgyi56zyq_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__14 (0.00s)\n\
    \        tmpgyi56zyq_test.go:75: expected '%!s(int=2)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmpgyi56zyq_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=2)'\n    --- FAIL: TestSearch/test_num__18 (0.00s)\n\
    \        tmpgyi56zyq_test.go:75: expected '%!s(int=2)', got '%!s(int=4)'\n   \
    \ --- FAIL: TestSearch/test_num__21 (0.00s)\n        tmpgyi56zyq_test.go:75: expected\
    \ '%!s(int=2)', got '%!s(int=3)'\n    --- FAIL: TestSearch/test_num__22 (0.00s)\n\
    \        tmpgyi56zyq_test.go:75: expected '%!s(int=1)', got '%!s(int=3)'\n   \
    \ --- FAIL: TestSearch/test_num__23 (0.00s)\n        tmpgyi56zyq_test.go:75: expected\
    \ '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\n\
    FAIL\n"
  timestamp: 1660073545
- exit_code: 1
  program: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ You are given a non-empty list of positive integers. Return the greatest integer\
    \ that is greater than \n// zero, and has a frequency greater than or equal to\
    \ the value of the integer itself. \n// The frequency of an integer is the number\
    \ of times it appears in the list.\n// If no such a value exist, return -1.\n\
    // Examples:\n// search([4, 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4]) == 3\n// search([5, 5, 4, 4, 4]) == -1\nfunc search(lst []int) int\
    \ {\n    // your code here\n    return -1\n}\n\nfunc TestSearch(t *testing.T)\
    \ {\n  candidate := search\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 5, 5, 5, 1}), expected: 1 },\n     { actual: candidate([]int{4, 1, 4, 1, 4,\
    \ 4}), expected: 4 },\n     { actual: candidate([]int{3, 3}), expected: -1 },\n\
    \     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}), expected: 8 },\n   \
    \  { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n     { actual: candidate([]int{2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 2, 8, 2}), expected: 2 },\n     { actual:\
    \ candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}), expected: 1 },\n     {\
    \ actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected: -1 },\n     { actual:\
    \ candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10,\
    \ 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1, 9, 10,\
    \ 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7, 5,\
    \ 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n  \
    \   { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
    \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
    \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
    \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
    \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8,\
    \ 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n \
    \    { actual: candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6,\
    \ 2, 3, 1}), expected: 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6,\
    \ 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual:\
    \ candidate([]int{10}), expected: -1 },\n     { actual: candidate([]int{9, 7,\
    \ 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected:\
    \ 1 },\n     { actual: candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n  \
    \ }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
    \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSearch (0.00s)\n    --- FAIL: TestSearch/test_num__0 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__1 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__3 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=8)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__4 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__5 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__6 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=2)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__7 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__9 (0.00s)\n        tmppirxmmjr_test.go:58: expected\
    \ '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__10 (0.00s)\n\
    \        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n  \
    \  --- FAIL: TestSearch/test_num__11 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__12\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__13 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__14\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__15 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=1)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__16\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=4)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSearch/test_num__17 (0.00s)\n        tmppirxmmjr_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestSearch/test_num__18\
    \ (0.00s)\n        tmppirxmmjr_test.go:58: expected '%!s(int=2)', got '%!s(int=-1)'\n\
    \    "
  timestamp: 1660073542
